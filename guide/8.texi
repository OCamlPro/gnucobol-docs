@comment *********************************************************************
@comment ** 8. Functions                                                    **
@comment *********************************************************************
@newchapter{Functions}
@menu
* Intrinsic Functions.
* Built-In System Subroutines.
@end menu
@newsection{Intrinsic Functions}
GnuCOBOL supports a wide variety of ``intrinsic functions'' that may be used anywhere in the PROCEDURE DIVISION where a literal is allowed.  For example:

@example

MOVE FUNCTION LENGTH(Employee-Last-Name) TO Employee-LN-Len

@end example

Note how the word @code{FUNCTION} is part of the syntax when you use an intrinsic function.  You can use intrinsic functions without having to include the reserved word @code{FUNCTION} via settings in the @syntaxref{REPOSITORY} paragraph.  You may accomplish the same thing by specifying the
@switchidx{-fintrinsics} to the GnuCOBOL compiler when you compile your programs.

User-written functions (@pxref{Subprogram Types}) never require the @code{FUNCTION} keyword when they are executed, because each user-written function a program uses @i{must} be included in that program's @code{REPOSITORY} paragraph, which therefore makes the @code{FUNCTION} keyword optional.

The following intrinsic functions, known to other ``dialects'' of COBOL, are defined to GnuCOBOL as reserved words but are not otherwise implemented currently.  Any attempts to use these functions will result in a compile-time error message. However they are described at the end of this chapter.

@example
BOOLEAN-OF-INTEGER
CHAR-NATIONAL
DISPLAY-OF
EXCEPTION-FILE-N
EXCEPTION-LOCATION-N
INTEGER-OF-BOOLEAN
NATIONAL-OF
STANDARD-COMPARE

@end example

@verbatim

Date and Time Formats
~~~~~~~~~~~~~~~~~~~~~

@end verbatim

For functions @code{FORMATTED-CURRENT-DATE}, @code{FORMATTED-DATE}, @code{FORMATTED-TIME}, and @code{FORMATTED-DATETIME}, the format literal argument indicates the format of the date or time value that is the result of the function. The result of the function will have the same type as its format literal, which can be alphanumeric, national or UTF-8.

For functions @code{INTEGER-OF-FORMATTED-DATE}, @code{SECONDS-FROM-FORMATTED-TIME}, and @code{TEST-FORMATTED-DATETIME}, the format literal indicates the format of the date or time value specified as the second argument of the function.

The permissible format strings are listed as follows. For a full description of each subfield in the format literals, including a range of permissible values in data associated with the formats, see the Value meanings and limits section.

@verbatim

Integer date form:
~~~~~~~~~~~~~~~~~

@end verbatim

A value in integer date form is a positive integer that represents the number of days since 31 December, 1600 in the Gregorian calendar.

It must be greater than zero and less than or equal to the value of FUNCTION INTEGER-OF-DATE (99991231), which is 3,067,671.

@verbatim

Standard date form:
~~~~~~~~~~~~~~~~~~

@end verbatim

A value in standard date form is an integer of the form YYYYMMDD, calculated using (YYYY * 10,000) + (MM * 100) + DD, where:

YYYY represents the year in the Gregorian calendar. It must be an integer in the range [1601, 9999].

MM represents a month and must be an integer in the range [01, 12].

DD represents a day and must be an integer in the range [01, 31], valid for the specified month and year combination.

@verbatim

Julian date form:
~~~~~~~~~~~~~~~~

@end verbatim

A value in Julian date form is an integer of the form YYYYDDD, calculated using (YYYY * 1000) + DDD, where:

YYYY represents the year in the Gregorian calendar. It must be an integer in the range [1601, 9999].

DDD represents the day of the year. It must be a positive integer in the range [1, 366], valid for the year specified.

@verbatim

UTC offset value:
~~~~~~~~~~~~~~~~

@end verbatim

A UTC offset value is an integer representation of offset from UTC (Coordinated Universal Time) expressed in minutes. The value must be greater than or equal to -1439 and less than or equal to 1439.

Note: The offset value 1439 represents 23 hours 59 minutes, which is one minute less than a day.
Standard numeric time form

A value in standard numeric time form is a numeric value representing seconds past midnight. The value must be greater than or equal to zero and less than 86,400

@verbatim

Date and time formats:
~~~~~~~~~~~~~~~~~~~~~

@end verbatim

For functions @code{FORMATTED-CURRENT-DATE}, @code{FORMATTED-DATE}, @code{FORMATTED-TIME}, and @code{FORMATTED-DATETIME}, the format literal argument indicates the format of the date or time value that is the result of the function. The result of the function will have the same type as its format literal, which can be alphanumeric, national or UTF-8.

For functions @code{INTEGER-OF-FORMATTED-DATE}, @code{SECONDS-FROM-FORMATTED-TIME}, and @code{TEST-FORMATTED-DATETIME}, the format literal indicates the format of the date or time value specified as the second argument of the function.

The permissible format strings are listed as follows. For a full description of each subfield in the format literals, including a range of permissible values in data associated with the formats, see Value meanings and limits.

@verbatim

Date formats            Format literals
~~~~~~~~~~~~            ~~~~~~~~~~~~~~~

Basic calendar date     YYYYMMDD
Extended calendar date  YYYY-MM-DD
Basic ordinal date      YYYYDDD
Extended ordinal date   YYYY-DDD
Basic week date         YYYYWwwD
Extended week date      YYYY-Www-D

Integer-seconds time formats:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integer-seconds time formats            Format literals

Basic local time                        hhmmss
Extended local time                     hh:mm:ss
Basic Coordinated Universal Time (UTC) 	hhmmssZ
Extended UTC time                       hh:mm:ssZ
Basic offset time                       hhmmss+hhmm
Extended offset time                   	hh:mm:ss+hh:mm

Fractional-seconds time formats:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fractional-seconds time formats         Format literals
Basic local time                        hhmmss.ssss
Extended local time                     hh:mm:ss.ssss
Basic Coordinated Universal Time (UTC) 	hhmmss.ssssZ
Extended UTC time                       hh:mm:ss.ssssZ
Basic offset time                       hhmmss.ssss+hhmm
Extended offset time                    hh:mm:ss.ssss+hh:mm

@end verbatim

Note: The period is used as the decimal separator, and four "s" characters after the period are used for illustrative purposes. The number of "s" characters that might be specified after the decimal separator in these formats might range from 1 to 9.

@verbatim

Value meanings and limits:
~~~~~~~~~~~~~~~~~~~~~~~~~

The permissible date and time formats have the following meanings and limits:

Format    Meaning and limits
YYYY      Year, 1601-9999
MM        Month, 01-12
DD        Day of month, 01-{28|29|30|31} dependent on month sub-field
DDD       Day of year for ordinal date formats, 001-365|366
ww        Week of year, 01-53
D         Day of week, 1-7
W
-
hh        Hours, 00-23
mm        Minutes, 00-59
ss        Seconds, 00-59
.s        Fractional seconds, always prefixed with '.' then 1-9 's'
+|-hh:mm  UTC offset hours (extended times only), the offset can be adjusted
          upward (by a '+' prefix) or downward (by a - prefix). A prefix of 0
          (zero) indicates that an offset of UTC is not available on the system.
Z         UTC time indicator

@end verbatim


@verbatim

Value meanings and limits:
~~~~~~~~~~~~~~~~~~~~~~~~~

The permissible date and time formats have the following meanings and limits:

Format 	Meaning and limits:
~~~~~~~~~~~~~~~~~~~~~~~~~~

YYYY      Year, 1601-9999
MM        Month, 01-12
DD        Day of month, 01-{28|29|30|31} dependent on month sub-field
DDD       Day of year for ordinal date formats, 001-365|366
ww        Week of year, 01-53
D         Day of week, 1-7
W
-
hh        Hours, 00-23
mm        Minutes, 00-59
ss        Seconds, 00-59
.s        Fractional seconds, always prefixed with '.' then 1-9 's'
+|-hh:mm  UTC offset hours (extended times only), the offset can be adjusted
          upward (by a '+' prefix) or downward (by a - prefix).

          A prefix of 0 (zero) indicates that an offset of UTC is not available
          on the system.
Z 	       UTC time indicator

@end verbatim

The supported intrinsic functions are listed in the following sections, along with their syntax and usage notes.
@menu
* ABS
* ACOS
* ANNUITY
* ASIN
* ATAN
* BIT-OF
* BIT-TO-CHAR
* BYTE-LENGTH
* CHAR
* COMBINED-DATETIME
* CONCAT
* CONCATENATE
* CONTENT-LENGTH
* CONTENT-OF
* COS
* CURRENCY-SYMBOL
* CURRENT-DATE
* DATE-OF-INTEGER
* DATE-TO-YYYYMMDD
* DAY-OF-INTEGER
* DAY-TO-YYYYDDD
* E
* EXCEPTION-FILE
* EXCEPTION-LOCATION
* EXCEPTION-STATEMENT
* EXCEPTION-STATUS
* EXP
* EXP10
* FACTORIAL
* FORMATTED-CURRENT-DATE
* FORMATTED-DATE
* FORMATTED-DATETIME
* FORMATTED-TIME
* FRACTION-PART
* HEX-OF
* HEX-TO-CHAR
* HIGHEST-ALGEBRAIC
* INTEGER
* INTEGER-OF-DATE
* INTEGER-OF-DAY
* INTEGER-OF-FORMATTED-DATE
* INTEGER-PART
* LENGTH
* LENGTH-AN
* LOCALE-COMPARE
* LOCALE-DATE
* LOCALE-TIME
* LOCALE-TIME-FROM-SECONDS
* LOG
* LOG10
* LOWER-CASE
* LOWEST-ALGEBRAIC
* MAX
* MEAN
* MEDIAN
* MIDRANGE
* MIN
* MOD
* MODULE-CALLER-ID
* MODULE-DATE
* MODULE-FORMATTED-DATE
* MODULE-ID
* MODULE-PATH
* MODULE-SOURCE
* MODULE-TIME
* MONETARY-DECIMAL-POINT
* MONETARY-THOUSANDS-SEPARATOR
* NUMERIC-DECIMAL-POINT
* NUMERIC-THOUSANDS-SEPARATOR
* NUMVAL
* NUMVAL-C
* NUMVAL-C-V2
* NUMVAL-F
* ORD
* ORD-MAX
* ORD-MIN
* PI
* PRESENT-VALUE
* RANDOM
* RANGE
* REM
* REVERSE
* SECONDS-FROM-FORMATTED-TIME
* SECONDS-PAST-MIDNIGHT
* SIGN
* SIN
* SQRT
* STANDARD-DEVIATION
* STORED-CHAR-LENGTH
* SUBSTITUTE
* SUBSTITUTE-CASE
* SUM
* TAN
* TEST-DATE-YYYYMMDD
* TEST-DAY-YYYYDDD
* TEST-FORMATTED-DATETIME
* TEST-NUMVAL
* TEST-NUMVAL-C
* TEST-NUMVAL-F
* TRIM
* UPPER-CASE
* VARIANCE
* WHEN-COMPILED
* YEAR-TO-YYYY
* BOOLEAN-OF-INTEGER
* CHAR-NATIONAL
* DISPLAY-OF
* EXCEPTION-FILE-N
* EXCEPTION-LOCATION-N
* INTEGER-OF-BOOLEAN
* NATIONAL-OF
* STANDARD-COMPARE

@end menu
@comment *********************************************************************
@comment ** 8.1.1 ABS                                                       **
@comment *********************************************************************
@page
@newsubsection{ABS}
@diagram{ABS Function,FN-ABS,FN-ABS,None}
This function determines and returns the absolute value of @var{number} (a numeric literal or data item) supplied as an argument.

Note that @code{ABSOLUTE-VALUE} has an alias for this function.
@comment *********************************************************************
@comment ** 8.1.2 ACOS                                                      **
@comment *********************************************************************
@page
@newsubsection{ACOS}
@diagram{ACOS Function,FN-ACOS,FN-ACOS,None}
The @code{ACOS} function determines and returns the trigonometric arc-cosine, or inverse cosine, of @var{cosine} value (a numeric literal or data item) supplied as an argument.

The result will be an angle, expressed in radians.  You may convert this to an angle measured in degrees, as follows:

@example
COMPUTE @var{degrees} = ( @var{radians} * 180 ) / FUNCTION PI
@end example
@comment *********************************************************************
@comment ** 8.1.3 ANNUITY                                                   **
@comment *********************************************************************
@page
@newsubsection{ANNUITY}
@diagram{ANNUITY Function,FN-ANNUITY,FN-ANNUITY,None}
This function returns a numeric value approximating the ratio of an annuity paid at @var{interest-rate} (numeric data item or literal) for each of @var{number-of-periods} (numeric data items or literals).

@var{interest-rate} is the rate of interest paid at each payment.  If you only have an annual interest rate and you wish to compute monthly annuity payments, divide the annual interest rate by 12 and use that value for @var{interest-rate}.

Multiply the result of this function times the desired principal amount to determine the amount of each period's payment.

A note for the financially challenged: an annuity is basically a reverse loan; an accountant would take the result of this function multiplied by -1 times the principal amount to compute a loan payment you are making.
@enumerate

@item
Here is an example of a program using this function. Given a total amount of 100,000 USD and an annual interest of 5% the program calculates the monthly payment for the duration of one year, two years ... up to 10 years.
@verbatim

         >>SOURCE FREE
IDENTIFICATION DIVISION.
PROGRAM-ID. PANNUITY.
*> Given a total amount of 100,000 and an annual interest of 5%
*> the program calculates monthly payment for a duration of 1 year, 2 years
*> ...up to 10 years.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 Total-Loan       Pic 9(9)V99 value 100000.
01 Interest-Rate    Pic 999V99  value 0.05.
01 Interest-RateP   Pic 999V99  value zero.
01 Months           Pic 999     value zero.
01 Years            Pic 999     value zero.
01 Monthly-Payment  Pic 9(9)V99.
01 Total-Payments   Pic 9(9)V99.

PROCEDURE DIVISION.
DISPLAY SPACE
COMPUTE Interest-RateP = Interest-Rate * 100
DISPLAY 'Total Loan: ' Total-Loan ' USD - Interest Rate: ' Interest-RateP '%'
DISPLAY SPACE
DISPLAY ' Y   M  Monthly Amount    Total Payments'
DISPLAY '--- ---  -------------    --------------'
PERFORM 10 TIMES
  ADD 12 to Months
  COMPUTE Monthly-Payment = Total-Loan * FUNCTION ANNUITY ((Interest-Rate / 12),
                 Months)
  COMPUTE Total-Payments = Monthly-payment * Months
  COMPUTE Years = Months / 12
  DISPLAY Years ' ' Months '   ' Monthly-Payment ' USD  ' Total-Payments
END-PERFORM
ACCEPT omitted
GOBACK.

@end verbatim
@item
Other additional documentation:

@item
When the value of Interest-Rate is zero, the value returned by the function is the approximation of:
(1 / Number-Periods)
When the value of Interest-Rate is not zero, the value of the function is the approximation of:
(Interest-Rate / (1 - (1 + Interest-Rate) ** (- (Number-Periods))))

@end enumerate

@comment *********************************************************************
@comment ** 8.1.4 ASIN                                                      **
@comment *********************************************************************
@page
@newsubsection{ASIN}
@diagram{ASIN Function,FN-ASIN,FN-ASIN,None}
The @code{ASIN} function determines and returns the trigonometric arc-sine, or inverse sine, of @var{sine} value (a numeric literal or data item) supplied as an argument.

The result will be an angle, expressed in radians.  You may convert this to an angle measured in degrees, as follows:

@example
COMPUTE @var{degrees} = ( @var{radians} * 180 ) / FUNCTION PI
@end example
@comment *********************************************************************
@comment ** 8.1.5 ATAN                                                      **
@comment *********************************************************************
@page
@newsubsection{ATAN}
@diagram{ATAN Function,FN-ATAN,FN-ATAN,None}
Use this function to determine and return the trigonometric arc-tangent, or inverse tangent, of @var{tangent} value (a numeric literal or data item) supplied as an argument.

The result will be an angle, expressed in radians.  You may convert this to an angle measured in degrees, as follows:

@example
COMPUTE @var{degrees} = ( @var{radians} * 180 ) / FUNCTION PI
@end example
@comment *********************************************************************
@comment ** 8.1.6 BIT-OF                                                  **
@comment *********************************************************************
@page
@newsubsection{BIT-OF}
@diagram{BIT-OF Function,FN-BIT-OF,FN-BIT-OF,None}
@code{BIT-OF} function returns an alphanumeric character string of '1' and '0' characters, which represents the binary value of each byte in the argument used on input.
@enumerate
@item
The function type is alphanumeric.
@item
@var{argument-1} must be a data item, literal, or an intrinsic function result of any data class.
@end enumerate
@noindent
Returned values:

@enumerate
@item
An alphanumeric character string consisting of the binary representation of each byte in @var{argument-1}.
@item
The length of the character string returned, in bytes, is eight times the length of @var{argument-1}, in bytes.
@end enumerate

@example

        >>SOURCE FREE
*> Example of use of function BIT-OF
identification division.
program-id. pgmbitof.
environment division.
configuration section.
   repository. function all intrinsic.
data division.
working-storage section.
01 AAA PIC XXX VALUE "1 2".
01 BBB PIC XXX VALUE "A B".

procedure division.
  display BIT-OF(1)     at 0110
  display BIT-OF(2)     at 0210
  display BIT-OF(3)     at 0310
  display BIT-OF(0123)  at 0410
  display BIT-OF(AAA)   at 0510
  display BIT-OF(BBB)   at 0610
  accept omitted
  stop run.

Produces :

00110001
00110010
00110011
00110000001100010011001000110011
001100010010000000110010
010000010010000001000010

@end example

@comment *********************************************************************
@comment ** 8.1.7 BIT-TO-CHAR                                               **
@comment *********************************************************************
@page
@newsubsection{BIT-TO-CHAR}
@diagram{BIT-TO-CHAR Function,FN-BIT-TO-CHAR,FN-BIT-TO-CHAR,None}
@code{BIT-TO-CHAR} function returns a character string that represents a bit pattern supplied on input.
@enumerate
@item
The function type is alphanumeric.
@item
@var{argument-1} must be an alphanumeric literal, alphanumeric data item, or alphanumeric group item.
@item
@var{argument-1} must consist only of the characters "0" and "1".
@item
The length of @var{argument-1} must be a multiple of 8 bytes.
@end enumerate

@noindent
Returned values:
@enumerate
@item
A character string consisting of bytes representing the sequence of "0" and "1" characters in @var{argument-1}.
@item
The length of the result string is equal to the length of the input string divided by 8.
@end enumerate

@example

        >>SOURCE FREE
*> Example of use of function BIT-TO-CHAR
identification division.
program-id. pgmbittochar.
environment division.
configuration section.
  repository. function all intrinsic.
data division.
working-storage section.
01 AAA PIC X(8) VALUE "0110000".

procedure division.
  display BIT-TO-CHAR("00110000") at 0610
  display BIT-TO-CHAR("00110001") at 0710
  display BIT-TO-CHAR("00110010") at 0810
  display BIT-TO-CHAR("00110011") at 0910
  display BIT-TO-CHAR(AAA)        at 1010
  accept omitted
  stop run.

Produces:

    0
    1
    2
    3
    a

@end example

@comment *********************************************************************
@comment ** 8.1.8 BYTE-LENGTH                                               **
@comment *********************************************************************
@page
@newsubsection{BYTE-LENGTH}
@diagram{BYTE-LENGTH Function,FN-BYTE-LENGTH,FN-BYTE-LENGTH,None}
@code{BYTE-LENGTH} returns the length --- in bytes --- of @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal).  This intrinsic function is identical to the @syntaxref{LENGTH-AN} function.  Note that the value returned by this function is not necessarily the number of @i{characters} comprising @var{string}, but rather the number of actual @i{bytes} required to store it.

For example, if @var{string} is encoded using a double-byte character set such as Unicode UTF-16 (where each character is represented by 16 bits of storage, not the 8-bits inherent to character sets like @sc{ASCII} or @sc{EBCDIC}), then calling this function with a @var{string} argument whose @syntaxref{PICTURE} is @code{N(4)} would return a value of 8 rather than the value 4.

Contrast this with the @syntaxref{LENGTH} function.
@comment *********************************************************************
@comment ** 8.1.9 CHAR                                                      **
@comment *********************************************************************
@page
@newsubsection{CHAR}
@diagram{CHAR Function,FN-CHAR,FN-CHAR,None}
This function returns the character in the ordinal position specified by @var{integer} (a numeric integer literal or data item with a value of 1 or greater) from the @syntaxrefalt{COLLATING SEQUENCE,OBJECT-COMPUTER} being used by the program.

For example, if the program is using the (default) @sc{ASCII} character set, CHAR(34) returns the 34th character in the @sc{ASCII} character set --- an exclamation-point (@samp{!}).  If you are using this function to convert a numeric value to its corresponding @sc{ASCII} character, you must use an argument value one greater than the numeric value.

If an argument whose value is less than 1 or greater than 256 is specified, the character in the program collating sequence corresponding to a value of all zero bits is returned.

The following code is an alternative approach when you just wish to convert a number to its @sc{ASCII} equivalent:

@example
01  Char-Value.
    05 Numeric-Value        USAGE BINARY-CHAR.
@dots{}
    MOVE numeric-character-value TO Numeric-Value
@end example

The @code{Char-Value} item now has the corresponding @sc{ASCII} character value.
@comment *********************************************************************
@comment ** 8.1.10 COMBINED-DATETIME                                         **
@comment *********************************************************************
@page
@newsubsection{COMBINED-DATETIME}
@diagram{COMBINED-DATETIME Function,FN-COMBINED-DATETIME,FN-COMBINED-DATETIME,None}
This function returns a 12-digit numeric result, the first seven digits of which are the integer value of @var{days} argument (a numeric data item or literal) and the last five of which are the integer value of @var{seconds} argument (also a numeric data item or literal).

If @var{days} is less than 1 or greater than 3,067,671, or if @var{seconds} is less than 1 or greater than 86,400, a value of 0 is returned and a runtime error will result.

@var{days}
Must be in integer date form. For details, see Integer date form.
A value in integer date form is a positive integer that represents a number of days succeeding 31 December 1600, in the Gregorian calendar. It is based on a starting date of Monday, 1 January 1601 and integer date 1 represents Monday, 1 January 1601.

@var{seconds}
Must be in standard numeric time form. For details, see Standard numeric time form. A value in standard numeric time form is a numeric value
representing seconds past midnight.

The returned value is determined by arithmetic expression
Days-1 + (Seconds-2/100000).
The date occupies the integer part of the returned value and the time is
represented in the fractional part of the returned value.

Example
Given the integer date form value "143951", which represents the date 15 February 1995, and the standard numeric time form value "18867.812479168304", which represents the time "05:14:27.812479168304", the returned value would be exactly "143951.1886781247".

@comment *********************************************************************
@comment ** 8.1.11 CONCAT                                                    **
@comment *********************************************************************
@page
@newsubsection{CONCAT}
@diagram{CONCAT Function,FN-CONCATENATE,FN-CONCATENATE,None}
This function concatenates the @var{argument-1}, @var{argument-2}, @dots{} (group items, @code{USAGE DISPLAY} elementary items and/or alphanumeric literals) together into a single string result.

If a numeric literal or @code{PIC 9} identifier is specified as an argument, decimal points, if any, will be removed and negative signs in @code{PIC S9} fields or numeric literals will be inserted as defined by the @syntaxref{SIGN IS} clause (or absence thereof) of the field.  Numeric literals are processed as if @code{SIGN IS TRAILING SEPARATE} were in effect.

@comment *********************************************************************
@comment ** 8.1.11 CONCATENATE                                              **
@comment *********************************************************************
@page
@newsubsection{CONCATENATE}
@diagram{CONCATENATE Function,FN-CONCATENATE,FN-CONCATENATE,None}
This function concatenates the @var{string-1}, @var{string-2}, @dots{} (group items, @code{USAGE DISPLAY} elementary items and/or alphanumeric literals) together into a single string result.

If a numeric literal or @code{PIC 9} identifier is specified as an argument, decimal points, if any, will be removed and negative signs in @code{PIC S9} fields or numeric literals will be inserted as defined by the @syntaxref{SIGN IS} clause (or absence thereof) of the field.  Numeric literals are processed as if @code{SIGN IS TRAILING SEPARATE} were in effect.

CONCATENATE is a GnuCOBOL extention BUT also see the ISO standard CONCAT function.

@comment *********************************************************************
@comment ** 8.1.12 CONTENT-LENGTH                                           **
@comment *********************************************************************
@page
@newsubsection{CONTENT-LENGTH}
@diagram{CONTENT-LENGTH Function,FN-CONTENT-LENGTH,FN-CONTENT-LENGTH,None}
Scans for a NUL byte delimiter of the data starting at address in given pointer, and returns the length. The NUL byte is not included in the count. An EC-DATA-PTR-NUL exception is set to exist if the pointer is NUL, and a zero length is returned.

Function CONTENT-LENGTH is a GnuCOBOL extention.
@verbatim

Example:

 01  ptr USAGE POINTER.
 01  str  PIC X(4)  VALUE z"abc".

     SET      ptr TO ADDESS OF str.
     DISPLAY  FUNCTION CONTENT-LENGTH (str).

 Will display 3.

@end verbatim
@comment *********************************************************************
@comment ** 8.1.13 CONTENT-OF                                               **
@comment *********************************************************************
@page
@newsubsection{CONTENT-OF}
@diagram{CONTENT-OF Function,FN-CONTENT-OF,FN-CONTENT-OF,None}
Takes a pointer and optional length. Returns a character field of the data addressed by the pointer, either up to a NUL byte or to the given length.

The NUL byte is not included in the data when no optional length is given.
With an optional count, the character field can hold any content including NUL bytes,

An EC-DATA-PTR-NUL exception is set to exist if the pointer is NUL, and a zero length space is returned.

An EC-SIZE-TRANCATION is set if the resulting field would exceed character field limits and the data is truncated.

Reference modification is allowed on resulting field.

Function CONTENT-OF is a GnuCOBOL extention.

@comment *********************************************************************
@comment ** 8.1.14 COS                                                      **
@comment *********************************************************************
@page
@newsubsection{COS}
@diagram{COS Function,FN-COS,FN-COS,None}
The @code{COS} function determines and returns the trigonometric cosine of @var{angle} (a numeric literal or data item) supplied as an argument.

@var{angle} is assumed to be a value expressed in radians.  If you need to determine the cosine of an angle measured in degrees, you first need to convert that angle to radians as follows:

@example
COMPUTE @var{radians} = ( @var{degrees} * FUNCTION PI) / 180
@end example
@comment *********************************************************************
@comment ** 8.1.15 CURRENCY-SYMBOL                                          **
@comment *********************************************************************
@page
@newsubsection{CURRENCY-SYMBOL}
@diagram{CURRENCY-SYMBOL Function,FN-CURRENCY-SYMBOL,FN-CURRENCY-SYMBOL,None}
The @code{CURRENCY-SYMBOL} function returns the currency symbol character currently in effect for the locale under which your program is running.  On UNIX systems, your locale is established via the
@envvarruntimeref{LANG} environment variable.  On Windows, the Control Panel's "Regional and Language Options" define the locale.

Changing the currency symbol via the @syntaxref{SPECIAL-NAMES} paragraph's @code{CURRENCY SYMBOL} setting will @i{not} affect the value returned by this function.
@comment *********************************************************************
@comment ** 8.1.16 CURRENT-DATE                                             **
@comment *********************************************************************
@page
@newsubsection{CURRENT-DATE}
@diagram{CURRENT-DATE Function,FN-CURRENT-DATE,FN-CURRENT-DATE,None}
Returns the current date and time as the following 21-character structure:

@example
01  CURRENT-DATE-AND-TIME.
    05 CDT-Year                PIC 9(4).
    05 CDT-Month               PIC 9(2). *> 01-12
    05 CDT-Day                 PIC 9(2). *> 01-31
    05 CDT-Hour                PIC 9(2). *> 00-23
    05 CDT-Minutes             PIC 9(2). *> 00-59
    05 CDT-Seconds             PIC 9(2). *> 00-59
    05 CDT-Hundredths-Of-Secs  PIC 9(2). *> 00-99
    05 CDT-GMT-Diff-Hours      PIC S9(2)
                               SIGN LEADING SEPARATE.
    05 CDT-GMT-Diff-Minutes    PIC 9(2). *> 00 or 30
@end example

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.17 DATE-OF-INTEGER                                          **
@comment *********************************************************************
@page
@newsubsection{DATE-OF-INTEGER}
@diagram{DATE-OF-INTEGER Function,FN-DATE-OF-INTEGER,FN-DATE-OF-INTEGER,None}
This function returns a numeric calendar date in @i{yyyymmdd} (i.e. Gregorian) format.  The date is determined by adding the number of days specified as @var{integer} (a numeric integer data item or literal) to the date December 31, 1600.  For example, @code{DATE-OF-INTEGER(1)} returns 16010101 while @code{DATE-OF-INTEGER(150000)} returns 20110908.

A value less than 1 or greater than 3067671 (9999/12/31) will return a result of 0.
@comment *********************************************************************
@comment ** 8.1.18 DATE-TO-YYYYMMDD                                         **
@comment *********************************************************************
@page
@newsubsection{DATE-TO-YYYYMMDD}
@diagram{DATE-TO-YYYYMMDD Function,FN-DATE-TO-YYYYMMDD,FN-DATE-TO-YYYYMMDD,None}
You can use this function to convert the six-digit Gregorian date specified as @var{yymmdd} (a numeric integer data item or literal) to an eight-digit format (@i{yyyymmdd}).

The optional @var{yy-cutoff} (a numeric integer data item or literal) argument is the year cutoff used to delineate centuries; if the year component of the date meets or exceeds this cutoff value, the result will be 19yymmdd; if the year component of the date is less than the cutoff value, the result will be 20yymmdd.  The default cutoff value if no second argument is given will be 50.

The optional @var{yy-execution-time} argument (a numeric integer data item or literal)   The default execution time value if no third argument is given will be now equivalent to specifying @code{(FUNCTION NUMVAL (FUNCTION CURRENT-DATE (1:4)))}.
@comment *********************************************************************
@comment ** 8.1.19 DAY-OF-INTEGER                                           **
@comment *********************************************************************
@page
@newsubsection{DAY-OF-INTEGER}
@diagram{DAY-OF-INTEGER Function,FN-DAY-OF-INTEGER,FN-DAY-OF-INTEGER,None}
This function returns a calendar date in yyyyddd (i.e. Julian) format.  The date is determined by adding the number of days specified as integer (a numeric integer data item or literal) to December 31, 1600.  For example, @code{DAY-OF-INTEGER(1)} returns 1601001 while @code{DAY-OF-INTEGER(250000)} returns 2011251.

A value less than 1 or greater than 3067671 (9999/12/31) will return a result of 0.
@comment *********************************************************************
@comment ** 8.1.20 DAY-TO-YYYYDDD                                           **
@comment *********************************************************************
@page
@newsubsection{DAY-TO-YYYYDDD}
@diagram{DAY-TO-YYYYDDD Function,FN-DAY-TO-YYYYDDD,FN-DAY-TO-YYYYDDD,None}
You can use this function to convert the five-digit Julian date specified as @var{yyddd} (a numeric integer data item or literal) to a seven-digit numeric Julian format (yyyyddd).

The optional @var{yy-cutoff} argument (a numeric integer data item or literal) is the year cutoff used to delineate centuries; if the year component of the date meets or exceeds this cutoff value, the result will be 19yyddd; if the year component of the date is less than the cutoff, the result will be 20yyddd.  The default cutoff value if no second argument is given will be 50.

The optional @var{yy-execution-time} argument (a numeric integer data item or literal)   The default execution time value if no third argument is given will be now equivalent to specifying (FUNCTION NUMVAL (FUNCTION CURRENT-DATE (1:4))).
@comment *********************************************************************
@comment ** 8.1.21 E                                                        **
@comment *********************************************************************
@page
@newsubsection{E}
@diagram{E Function,FN-E,FN-E,None}
This function returns the mathematical constant @i{E} (the base of natural logarithms).  The maximum precision with which this value may be returned is 2.7182818284590452353602874713526625.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.22 EXCEPTION-FILE                                           **
@comment *********************************************************************
@page
@newsubsection{EXCEPTION-FILE}
@diagram{EXCEPTION-FILE Function,FN-EXCEPTION-FILE,FN-EXCEPTION-FILE,None}
This function returns I/O exception information from the most-recently executed input or output statement.  The information is returned as a 34-character string, where the first two characters are the two-digit file status value (@pxref{File Status Codes}) and the remaining 32 are the @var{file-name-1} specification from the file's @syntaxref{SELECT} statement.

The name returned after the file status information will be returned only if the returned file status value is not 00.

Since this function has no arguments, no parenthesis should be specified.

The documentation of the @subpgmref{CBL_ERROR_PROC} built-in subroutine illustrates the use of this function.
@comment *********************************************************************
@comment ** 8.1.23 EXCEPTION-LOCATION                                       **
@comment *********************************************************************
@page
@newsubsection{EXCEPTION-LOCATION}
@diagram{EXCEPTION-LOCATION Function,FN-EXCEPTION-LOCATION,FN-EXCEPTION-LOCATION,None}
This function returns exception information from the most-recently failing statement.  The information is returned to a 1023 character string in one of the following formats, depending on the nature of the failure:
@itemize @bullet

@item
primary-entry-point-name; paragraph OF section; statement-number

@item
primary-entry-point-name; section; statement-number

@item
primary-entry-point-name; paragraph; statement-number

@item
primary-entry-point-name; statement-number
@end itemize

Since this function has no arguments, no parenthesis should be specified.

The program must be compiled with the
@switchidx{-debug},
@switchidx{-ftraceall} or
@switchidx{-g} for this function to return any meaningful information.

The documentation of the @subpgmref{CBL_ERROR_PROC} built-in subroutine illustrates the use of this function.
@comment *********************************************************************
@comment ** 8.1.24 EXCEPTION-STATEMENT                                      **
@comment *********************************************************************
@page
@newsubsection{EXCEPTION-STATEMENT}
@diagram{EXCEPTION-STATEMENT Function,FN-EXCEPTION-STMT,FN-EXCEPTION-STMT,None}
This function returns the most-recent COBOL statement that generated an exception condition.

Since this function has no arguments, no parenthesis should be specified.

The program must be compiled with the
@switchidx{-debug},
@switchidx{-ftraceall} or
@switchidx{-g} for this function to return any meaningful information.

The documentation of the @subpgmref{CBL_ERROR_PROC} built-in subroutine illustrates the use of this function.
@comment *********************************************************************
@comment ** 8.1.25 EXCEPTION-STATUS                                         **
@comment *********************************************************************
@page
@newsubsection{EXCEPTION-STATUS}
@diagram{EXCEPTION-STATUS Function,FN-EXCEPTION-STATUS,FN-EXCEPTION-STATUS,None}
This function returns the error type (a text string --- see column 2 of the upcoming table for the possible values) from the most-recent COBOL statement that generated an exception condition.

Since this function has no arguments, no parenthesis should be specified.

The documentation of the @subpgmref{CBL_ERROR_PROC} built-in subroutine illustrates the use of this function.

The following are the error type strings, and their corresponding exception codes and descriptions.
@anchoridx{Error Exception Codes}@anchoridx{Error Type Strings}
@multitable @columnfractions .075 .35 .575
@headitem Code @tab Error Type @tab Description


@item @code{0101}
@tab @code{EC-ARGUMENT-FUNCTION} @tab Function argument error

@item @code{0202}
@tab @code{EC-BOUND-ODO} @tab @code{OCCURS @dots{} DEPENDING} ON data item out of bounds

@item @code{0204}
@tab @code{EC-BOUND-PTR} @tab Data-pointer contains an address that is out of bounds

@item @code{0205}
@tab @code{EC-BOUND-REF-MOD} @tab Reference modifier out of bounds

@item @code{0207}
@tab @code{EC-BOUND-SUBSCRIPT} @tab Subscript out of bounds

@item @code{0303}
@tab @code{EC-DATA-INCOMPATIBLE} @tab Incompatible data exception

@item @code{0500}
@tab @code{EC-I-O} @tab input-output exception

@item @code{0501}
@tab @code{EC-I-O-AT-END} @tab I-O status @code{1x}

@item @code{0502}
@tab @code{EC-I-O-EOP} @tab An end of page condition occurred

@item @code{0504}
@tab @code{EC-I-O-FILE-SHARING} @tab I-O status @code{6x}

@item @code{0505}
@tab @code{EC-I-O-IMP} @tab I-O status @code{9x}

@item @code{0506}
@tab @code{EC-I-O-INVALID-KEY} @tab I-O status @code{2x}

@item @code{0508}
@tab @code{EC-I-O-LOGIC-ERROR} @tab I-O status @code{4x}

@item @code{0509}
@tab @code{EC-I-O-PERMANENT-ERROR} @tab I-O status @code{3x}

@item @code{050A}
@tab @code{EC-I-O-RECORD-OPERATION} @tab I-O status @code{5x}

@item @code{0601}
@tab @code{EC-IMP-ACCEPT} @tab Implementation-defined accept condition

@item @code{0602}
@tab @code{EC-IMP-DISPLAY} @tab Implementation-defined display condition

@item @code{0A00}
@tab @code{EC-OVERFLOW} @tab Overflow condition

@item @code{0A02}
@tab @code{EC-OVERFLOW-STRING} @tab @code{STRING} overflow condition

@item @code{0A03}
@tab @code{EC-OVERFLOW-UNSTRING} @tab @code{UNSTRING} overflow condition

@item @code{0B05}
@tab @code{EC-PROGRAM-NOT-FOUND} @tab Called program not found

@item @code{0D03}
@tab @code{EC-RANGE-INSPECT-SIZE} @tab Size of replace item in inspect differs

@item @code{1000}
@tab @code{EC-SIZE} @tab Size error exception

@item @code{1004}
@tab @code{EC-SIZE-OVERFLOW} @tab Arithmetic overflow in calculation

@item @code{1005}
@tab @code{EC-SIZE-TRUNCATION} @tab Significant digits truncated in store

@item @code{1007}
@tab @code{EC-SIZE-ZERO-DIVIDE} @tab Division by zero

@item @code{1202}
@tab @code{EC-STORAGE-NOT-ALLOC} @tab The data-pointer specified in a @code{FREE} statement does not identify currently allocated storage

@item @code{1203}
@tab @code{EC-STORAGE-NOT-AVAIL} @tab The amount of storage requested by an @*@code{ALLOCATE} statement is not available
@end multitable
@comment *********************************************************************
@comment ** 8.1.26 EXP                                                      **
@comment *********************************************************************
@page
@newsubsection{EXP}
@diagram{EXP Function,FN-EXP,FN-EXP,None}
Computes and returns the value of the mathematical constant @i{e} raised to the power specified by @var{number} (a numeric literal or data item).
@comment *********************************************************************
@comment ** 8.1.27 EXP10                                                    **
@comment *********************************************************************
@page
@newsubsection{EXP10}
@diagram{EXP10 Function,FN-EXP10,FN-EXP10,None}
Computes and returns the value of 10 raised to the power specified by @var{number} (a numeric literal or data item).
@comment *********************************************************************
@comment ** 8.1.28 FACTORIAL                                                **
@comment *********************************************************************
@page
@newsubsection{FACTORIAL}
@diagram{FACTORIAL Function,FN-FACTORIAL,FN-FACTORIAL,None}
This function computes and returns the factorial value of @var{number} (a numeric literal or data item).
@comment *********************************************************************
@comment ** 8.1.29 FORMATTED-CURRENT-DATE                                   **
@comment *********************************************************************
@page
@newsubsection{FORMATTED-CURRENT-DATE}
@diagram{FORMATTED-CURRENT-DATE Function,FN-FORMATTED-CURRENT-DATE,FN-FORMATTED-CURRENT-DATE,None}
@code{FORMATTED-CURRENT-DATE} returns the current date and time provided by the system at run-time, formatted according to date-and-time-format according to the argument type.

FUNCTION FORMATTED-CURRENT-DATE gives you exactly what you asked it to, including up to nanoseconds (8 decimal positions in the seconds) [but the system may only provide miliseconds, especially on older win32].

The function argument must be a national or alphanumeric literal and the content, a combined date and time format.

The returned value is formatted to the same form as @var{argument-1}.
@comment *********************************************************************
@comment ** 8.1.30 FORMATTED-DATE                                           **
@comment *********************************************************************
@page
@newsubsection{FORMATTED-DATE}
@diagram{FORMATTED-DATE Function,FN-FORMATTED-DATE,FN-FORMATTED-DATE,None}
@code{FORMATTED-DATE} uses a format to convert a date in integer date form to a date in the requested format. The returned value will be in date format.

@var{argument-1} shall be a national or alphanumeric literal.

@var{argument-2} shall be a value in integer date form.

Example
Given the date format "YYYYMMDD" and the value "143951", which represents the date 15 February 1995, the returned value would be "19950215".

@comment *********************************************************************
@comment ** 8.1.31 FORMATTED-DATETIME                                       **
@comment *********************************************************************
@page
@newsubsection{FORMATTED-DATETIME}
@diagram{FORMATTED-DATETIME Function,FN-FORMATTED-DATETIME,FN-FORMATTED-DATETIME,None}
@code{FORMATTED-DATETIME} uses a combined time and date form to convert and combine a date in integer form and a numeric time expressed as seconds past midnight in UTC. See Date and Time Formats for details.

@var{argument-1} shall be a national or alphanumeric literal.

@var{argument-2} shall be a value in integer date form.

@var{argument-3} shall be a value in standard numeric time form.

@var{argument-4} is an integer specifying the offset from UTC expressed in minutes. If specified but have a value equal or less than 1439.

Note: The offset value 1439 represents 23 hours 59 minutes which is one minutes less than a day.

@var{argument-4} must not be specified if the time portion in @var{argument-1} is neither a UTC nor an offset format.

The returned value is a representation of the date contained in @var{argument-2} combined with the time contained in @var{argument-3} according to the format in @var{argument-1}.

If the format in @var{argument-1} indicates that the returned value is to be expressed in UTC, the time portion of the returned value reflects the adjustment of the value in @var{argument-3} by the offset in @var{argument-4}.

If the format in @var{argument-1} indicates that the time is to be returned as an offset from UTC, the value in @var{argument-3} is reflected directly in the time portion of the returned value and the offset in @var{argument-4} is reflected directly in the offset portion of the returned value.

Example
If the first argument has the format "YYMMDDThhmmss.ss+hhmm", the second argument the value
"143951", the third argument the value "18867.812479168304", and the fourth argument the value
"+300", the returned value would be "19950215T05142781+0500".

@comment *********************************************************************
@comment ** 8.1.32 FORMATTED-TIME                                           **
@comment *********************************************************************
@page
@newsubsection{FORMATTED-TIME}
@diagram{FORMATTED-TIME Function,FN-FORMATTED-TIME,FN-FORMATTED-TIME,None}
@code{FORMATTED-TIME} converts a value representing seconds past midnight formatted time of day with optional offset.

@var{argument-1} shall be a national or alphanumeric literal.

@var{argument-2} shall be a value in integer time form.

@var{argument-3} is an integer specifying the offset from UTC expressed in minutes. If specified but have a value equal or less than 1439.

Note: The offset value 1439 represents 23 hours 59 minutes which is one minutes less than a day.

@var{argument-3} must not be specified if the time portion in @var{argument-1} is neither a UTC nor an offset format.

Returned value :

Is a representation of the standard numeric time contained in @var{argument-2} according to the format in @var{argument-1}.

If the format in @var{argument-1} indicates that the returned value is to be expressed in UTC, the time portion of the returned value reflects the adjustment of the value in @var{argument-2} by the offset in @var{argument-3}.

If the format in @var{argument-1} indicates that the time is to be returned as an offset from UTC, the value in @var{argument-2} is reflected directly in the time portion of the returned value and the offset in @var{argument-3} is reflected directly in the offset portion of the returned value.

Example
If the first argument has the format "hhmmss.ss+hhmm", the second argument the value "18867.812479168304" which represents the local time, and the third argument the value "-300", which represents the five hours that Eastern Standard Time (EST) differs from UTC, the returned value would be "05142781-0500".

@comment *********************************************************************
@comment ** 8.1.33 FRACTION-PART                                            **
@comment *********************************************************************
@page
@newsubsection{FRACTION-PART}
@diagram{FRACTION-PART Function,FN-FRACTION-PART,FN-FRACTION-PART,None}
This function returns that portion of @var{number} (a numeric data item or a numeric literal) that occurs to the right of the decimal point.  @code{FRACTION-PART(3.1415)}, for example, returns a value of 0.1415.  This function is equivalent to the expression:

@example
@var{number} -- FUNCTION INTEGER-PART(@var{number})

Example:
display "base - " FUNCTION FRACTION-PART(FLOATER).
Gives
base - 000.456789

@end example
@enumerate
@item
When moved to a variable, it MUST have a preceding 'V' in the PICTURE, i.e., PIC v(4).
@end enumerate
@comment ******************************************************************
@comment ** 8.1.34 HEX-OF                                               **
@comment ******************************************************************
@page
@newsubsection{HEX-OF}
@diagram{HEX-OF Function,FN-HEX-OF,FN-HEX-OF,None}
@code{HEX-OF} function returns an alphanumeric character string consisting of a hexadecimal representation of the argument used on input.
@enumerate
@item
The type of the function is alphanumeric.
@item
@var{argument-1} must be a data item, literal, or an intrinsic function result of any data class.
@end enumerate

@noindent
Returned values:
@enumerate
@item
An alphanumeric character string consisting of a hexadecimal representation of @var{argument-1}.
@item
The length of the character string returned, in bytes, is twice the length of @var{argument-1}, in bytes.
@end enumerate

@comment ******************************************************************
@comment ** 8.1.35 HEX-TO-CHAR                                          **
@comment ******************************************************************
@page
@newsubsection{HEX-TO-CHAR}
@diagram{HEX-TO-CHAR Function,FN-HEX-TO-CHAR,FN-HEX-TO-CHAR,None}
@code{HEX-TO-CHAR} function returns a character string that represents the hexadecimal digit characters supplied on input.
@enumerate
@item
The type of the function is alphanumeric.
@item
@var{argument-1} must be an alphanumeric literal, alphanumeric data item, or alphanumeric group item.
@item
@var{argument-1} must consist only of the characters '0' through '9', 'A' through 'F', and 'a' through 'f'.
@item
The length of @var{argument-1} must be a multiple of 2 bytes.
@end enumerate

@noindent
Returned values:
@enumerate
@item
A character string of bytes representing the hexadecimal digit characters of @var{argument-1}.
@item
The length of the result string is equal to the length of the input string divided by 2.
@end enumerate

@comment *********************************************************************
@comment ** 8.1.36 HIGHEST-ALGEBRAIC                                        **
@comment *********************************************************************
@page
@newsubsection{HIGHEST-ALGEBRAIC}
@diagram{HIGHEST-ALGEBRAIC Function,FN-HIGHEST-ALGEBRAIC,FN-HIGHEST-ALGEBRAIC,None}
This function returns the highest (i.e. largest or farthest away from 0 in a positive direction if @var{numeric-identifier} is signed) value that could possibly be stored in @var{numeric-identifier}.
Or in other words the @code{HIGHEST-ALGEBRAIC} function provide the ability to manipulate numeric data items in a manner similar to the means that @code{HIGH-VALUES} permit with alphanumeric data items, but without the risks of the data incompatibilities associated with those figurative constants.
@comment *********************************************************************
@comment ** 8.1.37 INTEGER                                                  **
@comment *********************************************************************
@page
@newsubsection{INTEGER}
@diagram{INTEGER Function,FN-INTEGER,FN-INTEGER,None}
The @code{INTEGER} function returns the greatest integer value that is less than or equal to @var{number} (a numeric literal or data item).
@comment *********************************************************************
@comment ** 8.1.38 INTEGER-OF-DATE                                          **
@comment *********************************************************************
@page
@newsubsection{INTEGER-OF-DATE}
@diagram{INTEGER-OF-DATE Function,FN-INTEGER-OF-DATE,FN-INTEGER-OF-DATE,None}
This function converts @var{date} (a numeric integer data item or literal) --- presumed to be a Gregorian calendar form standard date (YYYYMMDD) --- to internal date form (the number of days that have transpired since 1600/12/31).

Once in that form, mathematical operations may be performed against the internal date before it is transformed back into a date using the @syntaxref{DATE-OF-INTEGER} or @syntaxref{DAY-OF-INTEGER} function.
@comment *********************************************************************
@comment ** 8.1.39 INTEGER-OF-DAY                                           **
@comment *********************************************************************
@page
@newsubsection{INTEGER-OF-DAY}
@diagram{INTEGER-OF-DAY Function,FN-INTEGER-OF-DAY,FN-INTEGER-OF-DAY,None}
This function converts @var{date} (a numeric integer data item or literal) --- presumed to be a Julian calendar form standard date (YYYYDDD) --- to internal date form (the number of days that have transpired since 1600/12/31).

Once in that form, mathematical operations may be performed against the internal date before it is transformed back into a date using the @syntaxref{DATE-OF-INTEGER} or @syntaxref{DAY-OF-INTEGER} function.
@comment *********************************************************************
@comment ** 8.1.40 INTEGER-OF-FORMATTED-DATE                                **
@comment *********************************************************************
@page
@newsubsection{INTEGER-OF-FORMATTED-DATE}
@diagram{INTEGER-OF-FORMATTED-DATE Function,FN-INTEGER-OF-FORMATTED-DATE,FN-INTEGER-OF-FORMATTED-DATE,None}
@code{INTEGER-OF-FORMATTED-DATE} converts a date that is in specified format to integer date form.

@var{argument-1} shall be a national or alphanumeric literal. The content must be either a date format or a combined date and time format.

@var{argument-2} shall be a data item of the same type as @var{argument-1}.

If @var{argument-1} is a date format the content of @var{argument-2} shall be a valid date in that format.

If @var{argument-1} is a combined date and time format, the content of @var{argument-2} shall be a valid combined date and time in same format.
@comment *********************************************************************
@comment ** 8.1.41 INTEGER-PART                                             **
@comment *********************************************************************
@page
@newsubsection{INTEGER-PART}
@diagram{INTEGER-PART Function,FN-INTEGER-PART,FN-INTEGER-PART,None}
Returns the integer portion of @var{number} (a numeric literal or data item).
@comment *********************************************************************
@comment ** 8.1.42 LENGTH                                                   **
@comment *********************************************************************
@page
@newsubsection{LENGTH}
@diagram{LENGTH Function,FN-LENGTH,FN-LENGTH,None}
Returns the length --- in characters --- of @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal).

The value returned by this function is not the number of @i{bytes} of storage occupied by string, but rather the number of actual @i{characters} making up the string.  For example, if @var{string} is encoded using a double-byte character set such as Unicode UTF-16 (where each character is represented by 16 bits of storage, not the 8-bits inherent to character sets like @sc{ASCII} or @sc{EBCDIC}), then calling this function with a @var{string} argument whose @code{PICTURE is X(4)} would return a value of 4 rather than the value 8 (the actual number of bytes of storage occupied by that item).

Contrast this function with the @syntaxref{BYTE-LENGTH} and @syntaxref{LENGTH-AN} functions.
@comment *********************************************************************
@comment ** 8.1.43 LENGTH-AN                                                **
@comment *********************************************************************
@page
@newsubsection{LENGTH-AN}
@diagram{LENGTH-AN Function,FN-LENGTH-AN,FN-LENGTH-AN,None}
This function returns the length --- in bytes of storage --- of @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal).

This intrinsic function is identical to the @syntaxref{BYTE-LENGTH} function.

Note that the value returned by this function is not the number of @i{characters} making up the @var{string}, but rather the number of actual @i{bytes} of storage required to store @var{string}.  For example, if @var{string} is encoded using a double-byte character set such as Unicode UTF-16 (where each character is represented by 16 bits of storage, not the 8-bits inherent to character sets like @sc{ASCII} or @sc{EBCDIC}), then calling this function with a @var{string} argument whose @code{PICTURE is N(4)} would return a value of 8 rather than the value 4.

Contrast this with the @syntaxref{LENGTH} function.
@comment *********************************************************************
@comment ** 8.1.44 LOCALE-COMPARE                                           **
@comment *********************************************************************
@page
@newsubsection{LOCALE-COMPARE}
@diagram{LOCALE-COMPARE Function,FN-LOCALE-COMPARE,FN-LOCALE-COMPARE,None}
The @code{LOCALE-COMPARE} function returns a character indicating the result of comparing @var{argument-1} and @var{argument-2} using a culturally-preferred ordering defined by a @var{locale}.

Either or both of the 1@sup{st} two arguments may be an alphanumeric literal, a group item or an elementary item appropriate to storing alphabetic or alphanumeric data.  If the lengths of the two arguments are unequal, the shorter will be assumed to be padded to the right with spaces.

The two arguments will be compared, character by character, against each other until their relationship to each other can be determined.  The comparison is made according to the cultural rules in effect for @var{locale} name or for the current locale if no @var{locale} argument is specified.  Once that relationship is determined, a one-character alphanumeric value will be returned as follows:
@itemize

@item
@samp{<} --- If @var{argument-1} is determined to be less than @var{argument-2}

@item
@samp{=} --- If the two arguments are equal to each other

@item
@samp{>} --- If @var{argument-1} is determined to be greater than @var{argument-2}
@end itemize

@xref{LOCALE Names}, for a list of typically-available locale names.
@comment *********************************************************************
@comment ** 8.1.45 LOCALE-DATE                                              **
@comment *********************************************************************
@page
@newsubsection{LOCALE-DATE}
@diagram{LOCALE-DATE Function,FN-LOCALE-DATE,FN-LOCALE-DATE,None}
Converts the eight-digit Gregorian @var{date} (a numeric integer data item or literal) from yyyymmdd format to the format appropriate to the current locale.  On a Windows system, this will be the ``short date'' format as set using Control Panel.

You may include an optional second argument to specify the @var{locale} name (group item or @code{PIC X} identifier) you'd like to use for date formatting.  If used, this second argument @i{must} be an identifier.  Locale names are specified using UNIX-standard names.
@comment *********************************************************************
@comment ** 8.1.46 LOCALE-TIME                                              **
@comment *********************************************************************
@page
@newsubsection{LOCALE-TIME}
@diagram{LOCALE-TIME Function,FN-LOCALE-TIME,FN-LOCALE-TIME,None}
Converts the four- (hhmm) or six-digit (hhmmss) @var{time} (a numeric integer data item or literal) to a format appropriate to the current locale.  On a Windows system, this will be the ``time'' format as set using Control Panel.

You may include an optional @var{locale} name (a group item or @code{PIC X} identifier) you'd like to use for time formatting.  If used, this second argument @i{must} be an identifier.  Locale names are specified using UNIX-standard names.
@comment *********************************************************************
@comment ** 8.1.47 LOCALE-TIME-FROM-SECONDS                                 **
@comment *********************************************************************
@page
@newsubsection{LOCALE-TIME-FROM-SECONDS}
@diagram{LOCALE-TIME-FROM-SECONDS Function,FN-LOC-TM-FROM-SECS,FN-LOC-TM-FROM-SECS,None}
Converts the number of @var{seconds} since midnight (a numeric integer data item or literal) to a format appropriate to the current locale.  On a Windows system, this will be the ``time'' format as set using Control Panel.

You may include an optional @var{locale} name (a group item or @code{PIC X} identifier) you'd like to use for time formatting.  If used, this second argument @i{must} be an identifier.  Locale names are specified using UNIX-standard names.

@xref{LOCALE Names}, for a list of typically-available locale names.
@comment *********************************************************************
@comment ** 8.1.48 LOG                                                      **
@comment *********************************************************************
@page
@newsubsection{LOG}
@diagram{LOG Function,FN-LOG,FN-LOG,None}
Computes and returns the natural logarithm (base @i{e}) of @var{number} (a numeric literal or data item).
@comment *********************************************************************
@comment ** 8.1.49 LOG10                                                    **
@comment *********************************************************************
@page
@newsubsection{LOG10}
@diagram{LOG10 Function,FN-LOG10,FN-LOG10,None}
Computes and returns the base 10 logarithm of @var{number} (a numeric literal or data item).
@comment *********************************************************************
@comment ** 8.1.50 LOWER-CASE                                               **
@comment *********************************************************************
@page
@newsubsection{LOWER-CASE}
@diagram{LOWER-CASE Function,FN-LOWER-CASE,FN-LOWER-CASE,None}
This function returns the value of @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal), converted entirely to lower case.

What constitutes a ``letter'' (or upper/lower case too, for that manner) may be influenced through the use of a @syntaxrefalt{CHARACTER CLASSIFICATION,OBJECT-COMPUTER}.
@comment *********************************************************************
@comment ** 8.1.51 LOWEST-ALGEBRAIC                                         **
@comment *********************************************************************
@page
@newsubsection{LOWEST-ALGEBRAIC}
@diagram{LOWEST-ALGEBRAIC Function,FN-LOWEST-ALGEBRAIC,FN-LOWEST-ALGEBRAIC,None}
This function returns the lowest (i.e. smallest or farthest away from 0 in a negative direction if @var{numeric-identifier} is signed) value that could possibly be stored in @var{numeric-identifier}.
Or in other words this function @code{LOWEST-ALGEBRAIC} provides the ability to manipulate numeric data items in a manner similar to the means that @code{LOW-VALUES} permit with alphanumeric data items, but without the risks of the data incompatibilities associated with those figurative constants.
@comment *********************************************************************
@comment ** 8.1.52 MAX                                                      **
@comment *********************************************************************
@page
@newsubsection{MAX}
@diagram{MAX Function,FN-MAX,FN-MAX,None}
This function returns the maximum value from the specified list of numbers (each @var{number-n} may be a numeric data item or a numeric literal).
@comment *********************************************************************
@comment ** 8.1.53 MEAN                                                     **
@comment *********************************************************************
@page
@newsubsection{MEAN}
@diagram{MEAN Function,FN-MEAN,FN-MEAN,None}
This function returns the statistical mean value of the specified list of numbers (each @var{number-n} may be a numeric data item or a numeric literal).
@comment *********************************************************************
@comment ** 8.1.54 MEDIAN                                                   **
@comment *********************************************************************
@page
@newsubsection{MEDIAN}
@diagram{MEDIAN Function,FN-MEDIAN,FN-MEDIAN,None}
This function returns the statistical median value of the specified list of numbers (each @var{number-n} may be a numeric data item or a numeric literal).
@comment *********************************************************************
@comment ** 8.1.55 MIDRANGE                                                 **
@comment *********************************************************************
@page
@newsubsection{MIDRANGE}
@diagram{MIDRANGE Function,FN-MIDRANGE,FN-MIDRANGE,None}
The @code{MIDRANGE} (middle range) function returns a numeric value that is the arithmetic mean (average) of the values of the minimum and maximum numbers from the supplied list.  Each @var{number-n} may be a numeric data items or a numeric literal.
@comment *********************************************************************
@comment ** 8.1.56 MIN                                                      **
@comment *********************************************************************
@page
@newsubsection{MIN}
@diagram{MIN Function,FN-MIN,FN-MIN,None}
This function returns the minimum value from the specified list of numbers (each @var{number-n} may be a numeric data item or a numeric literal).
@comment *********************************************************************
@comment ** 8.1.57 MOD                                                      **
@comment *********************************************************************
@page
@newsubsection{MOD}
@diagram{MOD Function,FN-MOD,FN-MOD,None}
This function returns the value of @var{value} modulo @var{modulus} (essentially the remainder from the division of @var{value} by @var{modulus}).  Both arguments may be numeric data items or numeric literals.  Either (or both) may have a non-integer value.
@comment *********************************************************************
@comment ** 8.1.58 MODULE-CALLER-ID                                         **
@comment *********************************************************************
@page
@newsubsection{MODULE-CALLER-ID}
@diagram{MODULE-CALLER-ID Function,FN-MODULE-CALLER-ID,FN-MODULE-CALLER-ID,None}
This function returns the null string if it is executed within a main program.  When executed with a subprogram, it returns the entry-point name of the program that called the subprogram.

The discussion of the @syntaxref{MODULE-TIME} function includes a sample program that uses this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.59 MODULE-DATE                                              **
@comment *********************************************************************
@page
@newsubsection{MODULE-DATE}
@diagram{MODULE-DATE Function,FN-MODULE-DATE,FN-MODULE-DATE,None}
This function Returns the date the GnuCOBOL program that is executing the function was compiled, in the form yyyymmdd.

The discussion of the @syntaxref{MODULE-TIME} function includes a sample program that uses this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.60 MODULE-FORMATTED-DATE                                    **
@comment *********************************************************************
@page
@newsubsection{MODULE-FORMATTED-DATE}
@diagram{MODULE-FORMATTED-DATE Function,FN-MODULE-FMTD-DATE,FN-MODULE-FMTD-DATE,None}
This function returns the fully-formatted date and time when the program executing the function was compiled.  The exact format of this returned string value may vary depending on the operating system and GnuCOBOL build type.

The discussion of the @syntaxref{MODULE-TIME} function includes a sample program that uses this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.61 MODULE-ID                                                **
@comment *********************************************************************
@page
@newsubsection{MODULE-ID}
@diagram{MODULE-ID Function,FN-MODULE-ID,FN-MODULE-ID,None}
This function returns the primary entry-point name (i.e. the @code{PROGRAM-ID} or @code{FUNCTION-ID} of the program.  @xref{IDENTIFICATION DIVISION}, for information on those clauses.

The discussion of the @syntaxref{MODULE-TIME} function includes a sample program that uses this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.62 MODULE-PATH                                              **
@comment *********************************************************************
@page
@newsubsection{MODULE-PATH}
@diagram{MODULE-PATH Function,FN-MODULE-PATH,FN-MODULE-PATH,None}
This function returns the full path to the executable version of this GnuCOBOL program.  The filename component of this value will be exactly as typed on the command line, down to the use of upper- and lower-case letters and presence (or absence) of any extension.

The discussion of the @syntaxref{MODULE-TIME} function includes a sample program that uses this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.63 MODULE-SOURCE                                            **
@comment *********************************************************************
@page
@newsubsection{MODULE-SOURCE}
@diagram{MODULE-SOURCE Function,FN-MODULE-SOURCE,FN-MODULE-SOURCE,None}
The filename of the source code of the program (as specified on the @command{cobc} command when the program was compiled) is returned by this function.

The discussion of the @syntaxref{MODULE-TIME} function includes a sample program that uses this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.64 MODULE-TIME                                              **
@comment *********************************************************************
@page
@newsubsection{MODULE-TIME}
@diagram{MODULE-TIME Function,FN-MODULE-TIME,FN-MODULE-TIME,None}
This function returns the time the GnuCOBOL program was compiled, in the form hhmmss.

Since this function has no arguments, no parenthesis should be specified.

The following sample program uses all the MODULE- Functions:

@example
IDENTIFICATION DIVISION.
PROGRAM-ID. DEMOMODULE.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    FUNCTION ALL INTRINSIC.
PROCEDURE DIVISION.
000-Main.
    DISPLAY "MODULE-CALLER-ID      = [" MODULE-CALLER-ID @samp{]}
    DISPLAY "MODULE-DATE           = [" MODULE-DATE @samp{]}
    DISPLAY "MODULE-FORMATTED-DATE = [" MODULE-FORMATTED-DATE @samp{]}
    DISPLAY "MODULE-ID             = [" MODULE-ID @samp{]}
    DISPLAY "MODULE-PATH           = [" MODULE-PATH @samp{]}
    DISPLAY "MODULE-SOURCE         = [" MODULE-SOURCE @samp{]}
    DISPLAY "MODULE-TIME           = [" MODULE-TIME @samp{]}
    STOP RUN
    .
@end example

The program produces this output when executed:

@example
MODULE-CALLER-ID = []
MODULE-DATE = [20180522]
MODULE-FORMATTED-DATE = [May 22 2018 12:43:14]
MODULE-ID = [DEMOMODULE]
MODULE-PATH = [/home/vince/cobolsrc/ACAS/demomodule]
MODULE-SOURCE = [demomodule.cbl]
MODULE-TIME = [124314]
@end example
@comment *********************************************************************
@comment ** 8.1.65 MONETARY-DECIMAL-POINT                                   **
@comment *********************************************************************
@page
@newsubsection{MONETARY-DECIMAL-POINT}
@diagram{MONETARY-DECIMAL-POINT Function,FN-MON-DECIMAL-POINT,FN-MON-DECIMAL-POINT,None}
@code{MONETARY-DECIMAL-POINT} returns the character used to separate the integer portion from the fractional part of a monetary currency value according to the rules currently in effect for the locale under which your program is running.

On UNIX (including OSX, Windows/Cygwin and Windows/MinGW) systems, your locale is established via the
@envvarruntimeref{LANG} environment variable.  On Windows, the Control Panel's Regional and Language Options define the locale.

Using the @syntaxrefalt{DECIMAL-POINT IS COMMA,SPECIAL-NAMES} clause in your program will not affect the value returned by this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.66 MONETARY-THOUSANDS-SEPARATOR                             **
@comment *********************************************************************
@page
@newsubsection{MONETARY-THOUSANDS-SEPARATOR}
@diagram{MONETARY-THOUSANDS-SEPARATOR Function,FN-MON-THOUSANDS-SEP,FN-MON-THOUSANDS-SEP,None}
This function returns the character used to separate the thousands digit groupings of monetary currency values according to the rules currently in effect for the locale under which your program is running.

On UNIX (including OSX, Windows/Cygwin and Windows/MinGW) systems, your locale is established via the
@envvarruntimeref{LANG} environment variable.  On Windows, the Control Panel's Regional and Language Options define the locale.

Using the @syntaxrefalt{DECIMAL-POINT IS COMMA,SPECIAL-NAMES} clause in your program will not affect the value returned by this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.67 NUMERIC-DECIMAL-POINT                                    **
@comment *********************************************************************
@page
@newsubsection{NUMERIC-DECIMAL-POINT}
@diagram{NUMERIC-DECIMAL-POINT Function,FN-NUM-DECIMAL-POINT,FN-NUM-DECIMAL-POINT,None}
This function returns the character used to separate the integer portion of a non-integer numeric item from the fractional part according to the rules currently in effect for the locale under which your program is running.

On UNIX (including OSX, Windows/Cygwin and Windows/MinGW) systems, your locale is established via the
@envvarruntimeref{LANG} environment variable.  On Windows, the Control Panel's Regional and Language Options define the locale.

Using the @syntaxrefalt{DECIMAL-POINT IS COMMA,SPECIAL-NAMES} clause in your program will not affect the value returned by this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.68 NUMERIC-THOUSANDS-SEPARATOR                              **
@comment *********************************************************************
@page
@newsubsection{NUMERIC-THOUSANDS-SEPARATOR}
@diagram{NUMERIC-THOUSANDS-SEPARATOR Function,FN-NUM-THOUSANDS-SEP,FN-NUM-THOUSANDS-SEP,None}
This function returns the character used to separate the thousands digit groupings of numeric values according to the rules currently in effect for the locale under which your program is running.

On UNIX (including OSX, Windows/Cygwin and Windows/MinGW) systems, your locale is established via the
@envvarruntimeref{LANG} environment variable.  On Windows, the Control Panel's Regional and Language Options define the locale.

Using the @syntaxrefalt{DECIMAL-POINT IS COMMA,SPECIAL-NAMES} clause in your program will not affect the value returned by this function.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.69 NUMVAL                                                   **
@comment *********************************************************************
@page
@newsubsection{NUMVAL}
@diagram{NUMVAL Function,FN-NUMVAL,FN-NUMVAL,None}
The @code{NUMVAL} function converts a @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal) to its corresponding numeric value.

The @var{string} must have any of the following formats, where '#' represents a sequence of one or more decimal digits:

@center # @ @ -# @ @ +# @ @ #- @ @ #+ @ @ #CR @ @ #DB

@center #.# @ @ -#.# @ @ +#.# @ @ #.#- @ @ #.#+ @ @ #.#CR @ @ #.#DB

There must be at least one digit character in the string.

Leading and/or trailing spaces are allowed, as are spaces before the first digit.

The character period in @var{argument-1} @var{string}, represents the decimal separator. The character comma in @var{argument-1} represents the grouping separator. When the @code{DECIMAL-POINT IS COMMA} clause is specified, the character comma shall be used in @var{argument-1} to represent the decimal separator and the character period shall be used to represent the grouping separator.

@i{Note}: Locale-based functionality equivalent to @code{NUMVAL} can be obtained by using the @code{NUMVAL-C} function with the @code{LOCALE} keyword. A currency sign is optional in @code{NUMVAL-C}. The locale category @code{LC_MONETARY} will be used because there is no sign convention specified in locale category @code{LC_NUMERIC}.

Returned values:

The returned value is the numeric value represented by @var{string}.

If it contains a @code{CR}, @code{DB}, or the minus sign (@samp{-}), the returned value is negative.

@comment *********************************************************************
@comment ** 8.1.70 NUMVAL-C                                                 **
@comment *********************************************************************
@page
@newsubsection{NUMVAL-C}
@diagram{NUMVAL-C Function,FN-NUMVAL-C,FN-NUMVAL-C,None}
This function converts a @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal) representing a currency value to its corresponding numeric value.

The currency string if any, and any grouping separators preceding the decimal separator are ignored. Optionally, the currency string, sign convention, grouping separator and the decimal separator permitted in the character string may be specified by locale category @code{LC-MONETARY}, or the currency string may be specified by @var{symbol}.

The optional @var{symbol} character represents the currency symbol (a non-space single-character group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal) that may be used as the currency character in @var{string}. Any spaces including leading or trailing are ignored. If no @var{symbol} is specified, the value that would be returned by the @intrinsicref{CURRENCY-SYMBOL} will be used.

If this references the @code{LOCALE} :

Changing the currency symbol via the @code{SPECIAL-NAMES} paragraph's @code{CURRENCY SYMBOL} setting will not affect the value returned by this function.

While @code{NUMVAL-C} will always use the currency symbol that is specified via the @code{SPECIAL-NAMES} paragraph's @code{CURRENCY SYMBOL} (or the system default which is currently always @samp{$}).

@var{string} may have any of the following formats, where '#' represents a sequence of one or more decimal digits and '$' represents the @var{symbol} character:

@center # @ @ -# @ @ +# @ @ #- @ @ #+ @ @ #CR @ @ #DB

@center #.# @ @ -#.# @ @ +#.# @ @ #.#- @ @ #.#+ @ @ #.#CR @ @ #.#DB

@center $# @ @ -$# @ @ +$# @ @ $#- @ @ $#+ @ @ $#CR @ @ $#DB

@center $#.# @ @ -$#.# @ @ +$#.# @ @ $#.#- @ @ $#.#+ @ @ $#.#CR @ @ $#.#DB

There must be at least one digit character in the string.

Leading and/or trailing spaces are allowed, as are spaces before and/or after the currency symbol, sign, CR and DB characters.

If the @code{ANYCASE} keyword is used the matching rules for detecting a currency string in @var{argument-1} are case-insensitive. If the @code{ANYCASE} keyword is not specified, the matching rules are case-sensitive.

If neither symbol nor the @code{LOCALE} keyword is specified, there shall be only one currency string used, either the default currency sign or a currency string specified in the @code{SPECIAL-NAMES} paragraph.

The returned value is the numeric value represented by string.

When the @code{LOCALE} keyword is specified, the returned value is negative if string contains a negative sign.

When the @code{LOCALE} keyword is not specified, the returning value is negative if string contains CR, DB, or a minus sign.
@comment *********************************************************************
@comment ** 8.1.70B NUMVAL-C                                                **
@comment *********************************************************************
@page
@newsubsection{NUMVAL-C-2}
@diagram{NUMVAL-C Function,FN-NUMVAL-C-2,FN-NUMVAL-C-2,None}
This function
returns the numeric value represented by the character string specified by @var{argument-1} and defined as alphanumeric.

@var{argument-2}, the currency string if any, and any grouping separators preceding the decimal separator are ignored. Optionally, the currency string, sign convention, grouping separator and the decimal separator permitted in the character string may be specified by locale category @code{LC-MONETARY}, or the currency string may be specified by @var{argument-2}.

The optional alphanumeric @var{argument-2} character represents the currency symbol (a non-space and at least one single-character item, that may be used as the currency character in @var{argument-1}. Any spaces including leading or trailing are ignored. If no @var{argument-2} is specified, the value that would be returned by the @intrinsicref{CURRENCY-SYMBOL} will be used. @var{argument-2} must not contain any of the digits - through 9, characters @samp{*}, @samp{+}, @samp{-}, @samp{,} or @samp{.}; or the two consecutive letters @code{CR} or @code{DB}, whether upper or lower case or a combination of both.

@var{argument-2} specifies a currency string that may appear in @var{argument-1}.

If the @code{ANYCASE} keyword is specified, the matching rules for detecting a currency string in @var{argument-1} are case-insensitive. If not specified, the matching rules are case-sensitive.

If neither @var{argument-2} nor the @code{LOCALE} keyword is specified, there shall be only one currency string used, either the default currency sign or a currency string specified in the @code{SPECIAL-NAMES} paragraph.

While @code{NUMVAL-C} will always use the currency symbol that is specified via the @code{SPECIAL-NAMES} paragraph's @code{CURRENCY SYMBOL} (or the system default which is currently always '$') @var{argument-1} shall have any of the following formats, where '#' represents a sequence of one or more decimal digits and '$' represents the @var{symbol} character:

@center # @ @ -# @ @ +# @ @ #- @ @ #+ @ @ #CR @ @ #DB

@center #.# @ @ -#.# @ @ +#.# @ @ #.#- @ @ #.#+ @ @ #.#CR @ @ #.#DB

@center $# @ @ -$# @ @ +$# @ @ $#- @ @ $#+ @ @ $#CR @ @ $#DB

@center $#.# @ @ -$#.# @ @ +$#.# @ @ $#.#- @ @ $#.#+ @ @ $#.#CR @ @ $#.#DB

There must be at least one digit character in the string.

Leading and/or trailing spaces are allowed, as are spaces before and/or after the currency symbol, sign, CR and DB characters.

The returned value is the numeric value represented by @var{argument-1}.

When the @code{LOCALE} keyword is specified, the returned value is negative if string contains a negative sign and when not specified, the returning value is negative if string contains CR, DB, or a minus sign.
@comment *********************************************************************
@comment ** 8.1.71 NUMVAL-F                                                 **
@comment *********************************************************************
@page
@newsubsection{NUMVAL-F}
@diagram{NUMVAL-F Function,FN-NUMVAL-F,FN-NUMVAL-F,None}
This function converts a @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal) representing a floating-point value to its corresponding numeric value.

@center # @ @ -# @ @ +# @ @ #E# @ @ -#E# @ @ +#E#

@center #E+# @ @ -#E+# @ @ +#E+# @ @ #E-# @ @ -#E-# @ @ +#E-#

@center #.# @ @ -#.# @ @ +#.# @ @ #.#E# @ @ -#.#E# @ @ +#.#E#

@center #.#E+# @ @ -#.#E+# @ @ +#.#E+# @ @ #.#E-# @ @ -#.#E-# @ @ +#.#E-#

There must be at least one digit character both before and after the @code{E} in the string.

Leading and/or trailing spaces are allowed, as are spaces before and/or after any sign characters.
@comment *********************************************************************
@comment ** 8.1.72 ORD                                                      **
@comment *********************************************************************
@page
@newsubsection{ORD}
@diagram{ORD Function,FN-ORD,FN-ORD,None}
This function returns the ordinal position in the program character set (usually @sc{ASCII}) corresponding to the 1@sup{st} character of @var{char} argument (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal).

For example, assuming the program is using the standard @sc{ASCII} collating sequence, @code{ORD('!')} returns 34 because @samp{!} is the 34th @sc{ASCII} character.  If you are using this function to convert an @sc{ASCII} character to its numeric value, you must subtract one from the result.

The following code is an alternative approach when you just wish to convert an @sc{ASCII} character to its numeric equivalent:

@example
01  Char-Value.
    05 Numeric-Value        USAGE BINARY-CHAR.
@dots{}
    MOVE "character" TO Char-Value
@end example

@code{Numeric-Value} now has the numeric value of @code{character}.
@comment *********************************************************************
@comment ** 8.1.73 ORD-MAX                                                  **
@comment *********************************************************************
@page
@newsubsection{ORD-MAX}
@diagram{ORD-MAX Function,FN-ORD-MAX,FN-ORD-MAX,None}
This function returns the ordinal position in the argument list corresponding to the @var{char-n} whose 1@sup{st} character has the highest position in the program collating sequence (usually @sc{ASCII}).

For example, assuming the program is using the standard @sc{ASCII} collating sequence, @code{ORD-MAX('Z', 'z', '!')} returns 2 because the 2nd character in the argument list (the @sc{ASCII} character @samp{z}) occurs after @samp{Z} and @samp{!} in the program collating sequence.  Each @var{char-n} argument may be a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal.
@comment *********************************************************************
@comment ** 8.1.74 ORD-MIN                                                  **
@comment *********************************************************************
@page
@newsubsection{ORD-MIN}
@diagram{ORD-MIN Function,FN-ORD-MIN,FN-ORD-MIN,None}
This function returns the ordinal position in the argument list corresponding to the @var{char-n} whose 1@sup{st} character has the lowest position in the program collating sequence (usually @sc{ASCII}).

For example, assuming the program is using the standard @sc{ASCII} collating sequence, @code{ORD-MIN('Z', 'z', '!')} returns 3 because the 3rd character in the argument list (the @sc{ASCII} character @samp{!}) occurs before @samp{Z} and @samp{z} in the program collating sequence.  Each @var{char-n} argument may be a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal.
@comment *********************************************************************
@comment ** 8.1.75 PI                                                       **
@comment *********************************************************************
@page
@newsubsection{PI}
@diagram{PI Function,FN-PI,FN-PI,None}
This function returns the mathematical constant @i{PI}.  The maximum precision with which this value may be returned is 3.1415926535897932384626433832795029.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.76 PRESENT-VALUE                                            **
@comment *********************************************************************
@page
@newsubsection{PRESENT-VALUE}
@diagram{PRESENT-VALUE Function,FN-PRESENT-VALUE,FN-PRESENT-VALUE,None}
The @code{PRESENT-VALUE} function returns a value that approximates the present value of a series of future period-end amounts specified by the various @var{value-n} arguments at a discount rate specified by the @var{rate} argument.

All arguments are numeric data items and/or numeric literals.
@iftex

The following equation summarizes how present value is calculated, where @i{N} is the number of @var{value} arguments:
@tex
$$ presentvalue = \sum_{i=1}**N
\left (value_i
\over (1+rate)**i\right) $$
@end tex
@end iftex
@enumerate

@item
Example of function in use :

@verbatim

         >>SOURCE FREE
IDENTIFICATION DIVISION.
PROGRAM-ID. PPresValue.
*> The sample: you pay for a machine 1500 USD
*> You rent the machine at 350 USD per year per 5 years (= 1750).
*> The program calculates (NET)PRESENT VALUE of 1750
*> when the discount rate is 1%, 2% up to 10%.
DATA DIVISION.
WORKING-STORAGE SECTION.
01  PaymentsNum      constant as   5.
01  PaymentsAmount   constant as 350.
01  Expenditure      PIC 999999V99 value 1500.
01  TOTAL-CASH-FLOW  PIC 999999V99 value zero.
01  DiscountRate     PIC S99V99 VALUE 0.00.
77  DiscountRateP    PIC S99V99 VALUE 0.00.
01  filler.
    05 PaymentAmount PIC S9999V99 OCCURS PaymentsNum TIMES VALUE PaymentsAmount.
01  PresValue        PIC  9(6)V99  value zero.
01  NET-PresValue    PIC S9(6)V99  value zero.

PROCEDURE DIVISION.
COMPUTE TOTAL-CASH-FLOW =
    FUNCTION SUM (PaymentAmount(1) PaymentAmount(2) PaymentAmount(3)
                  PaymentAmount(4) PaymentAmount(5))
DISPLAY SPACE
DISPLAY   'Expenditure: ' Expenditure ' Total Cashflow: ' TOTAL-CASH-FLOW
DISPLAY SPACE

PERFORM 10 TIMES
  COMPUTE DiscountRate  = DiscountRate + 0.01
  COMPUTE DiscountRateP = DiscountRate * 100
  COMPUTE PresValue ROUNDED =
      FUNCTION PRESENT-VALUE (DiscountRate PaymentAmount(1) PaymentAmount(2)
                          PaymentAmount(3) PaymentAmount(4) PaymentAmount(5))
  COMPUTE NET-PresValue = - Expenditure + PresValue
  DISPLAY 'DiscountRate: ' DiscountRateP '%   PresValue: ' PresValue
          ' NET-PresValue: ' NET-PresValue
END-PERFORM
ACCEPT omitted
GOBACK.

@end verbatim

@item
This is a case where passing parameters to the intrinsic function PRESENT-VALUE would need the ability to indicate "ALL" and then write the statement as:

@item
FUNCTION PRESENT-VALUE (DiscountRate PaymentAmount(ALL) )

@item
GnuCOBOL does not have this feature (ALL parameter) i.,e has NOT YET been implemented.
@end enumerate
@comment *********************************************************************
@comment ** 8.1.77 RANDOM                                                   **
@comment *********************************************************************
@page
@newsubsection{RANDOM}
@diagram{RANDOM Function,FN-RANDOM,FN-RANDOM,None}
This function returns a pseudo-random non-integer value in the range 0>= to <1 (for example, 0.123456789).

The purpose of the optional @var{seed} argument, is to initialize the chain of pseudo-random numbers that will be returned by the function.  Not only will calls to this function using the same @var{seed} value return the same pseudo-random number, but so will all subsequent executions of the function without a @var{seed}.  This is actually a good thing when you are testing your program because you can rely on always receiving the same sequence of ``random'' numbers if you always start using the same @var{seed}.

The @var{seed} may be any form of literal or data item or arithmetic expression. If @var{seed} is numeric, its numeric value will serve as the seed value.  If @var{seed} is alphanumeric, a value for it will be determined as if it were used as an argument to @syntaxref{NUMVAL}.

Take, for example, the following sample program:
@verbatim
    IDENTIFICATION DIVISION.
    PROGRAM-ID. DEMORANDOM.
    DATA DIVISION.
    WORKING-STORAGE SECTION.
    01  Pseudo-Random-Number        USAGE COMP-1.
    PROCEDURE DIVISION.
    000-Main.
        MOVE FUNCTION RANDOM(1) TO Pseudo-Random-Number
        DISPLAY Pseudo-Random-Number
        PERFORM 4 TIMES
            MOVE FUNCTION RANDOM    TO Pseudo-Random-Number
            DISPLAY Pseudo-Random-Number
        END-PERFORM
        STOP RUN
        .
@end verbatim

Every time this program is executed, it will produce the same output, because the same sequence of pseudo-random numbers will be generated:
@verbatim

0.5441364
0.047651578
0.77186662
0.056523036
0.63045478

@end verbatim

Once your program has been thoroughly tested, you'll want different sequences to be generated each time the program runs.  One possible way to accomplish this is to use a @var{seed} that is likely to be different every time the program is executed, as is likely to be the case if the first @code{MOVE} statement in the previous example were replaced by this:

@verbatim
    MOVE RANDOM(FUNCTION CURRENT-DATE(1:16))
      TO Pseudo-Random-Number
@end verbatim

The first 16 characters returned by the @syntaxref{CURRENT-DATE} function will be a number in the format @code{@var{YYYYMMDDhhmmssnn}}, where @code{@var{YYYYMMDD}} is the current calendar date and @code{@var{hhmmssnn}} is the current time of day to the one one-hundredth of a second.  Since two different executions of the program will never get identical @code{CURRENT-DATE} values (unless they are executed in extremely close time frames to one another), using those first sixteen characters as the @code{RANDOM} seed will guarantee that receiving a duplicate sequence of pseudo-random numbers in two different executions of the program will be @i{highly} unlikely.

If you do not use a seed then the RANDOM function will automatically determine an internal different seed at each execution.

Often you need to generate a random number between two numbers.
Following example shows how to do it.

@verbatim

        >>source free
 IDENTIFICATION DIVISION.
 PROGRAM-ID. RANDOM-RANGE.
*> Generate random number from 25 and 70
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  RANDOM-NUMBER PIC 9999 value zero.
 PROCEDURE DIVISION.
 perform 10 times
     compute  RANDOM-NUMBER = 25 + (70 - 25) * (FUNCTION RANDOM)
     display  RANDOM-NUMBER
 end-perform
 display      space
*> or, to include the upper value 60 as possible choice
 perform 10 times
     compute  RANDOM-NUMBER = 25 + (70 - 25 + 1) * (FUNCTION RANDOM)
     display  RANDOM-NUMBER
 end-perform
 STOP RUN.

@end verbatim

@comment *********************************************************************
@comment ** 8.1.78 RANGE                                                    **
@comment *********************************************************************
@page
@newsubsection{RANGE}
@diagram{RANGE Function,FN-RANGE,FN-RANGE,None}
The @code{RANGE} function returns a value that is equal to the value of the maximum @var{number-n} in the argument list minus the value of the minimum @var{number-n} argument.

All @var{number-n} arguments are numeric data items and/or numeric literals.
@comment *********************************************************************
@comment ** 8.1.79 REM                                                     **
@comment *********************************************************************
@page
@newsubsection{REM}
@diagram{REM Function,FN-REM,FN-REM,None}
This function returns a numeric value that is the remainder of @var{number} divided by @var{divisor}.  Both arguments must be numeric data items or numeric literals.
@comment *********************************************************************
@comment ** 8.1.80 REVERSE                                                  **
@comment *********************************************************************
@page
@newsubsection{REVERSE}
@diagram{REVERSE Function,FN-REVERSE,FN-REVERSE,None}
This function returns the byte-by-byte reversed value of @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal).
@comment *********************************************************************
@comment ** 8.1.81 SECONDS-FROM-FORMATTED-TIME                              **
@comment *********************************************************************
@page
@newsubsection{SECONDS-FROM-FORMATTED-TIME}
@diagram{SECONDS-FROM-FORMATTED-TIME Function,FN-SECS-FROM-FMTD-TM,FN-SECS-FROM-FMTD-TM,None}
This function decodes the string @var{time} --- whose value represents a formatted time --- and returns the total number of seconds that string represents.

The @var{time} string must contain hours, minutes and seconds.  The time argument may be specified as a group item, @code{USAGE DISPLAY} elementary item or an alphanumeric literal.

The @var{format} argument is a string (a group item, @code{USAGE DISPLAY} elementary item or an alphanumeric literal) documenting the format of @var{time} using @code{@var{hh}}, @code{@var{mm}} and @code{@var{ss}} to denote where the respective time information can be found.  Any other characters found in @var{format} represent character positions that will be ignored.  For example, a format of @code{hhmmss} indicates that @var{time} will be treated as a six-digit string value where the first two characters are the number of hours, the next two represent minutes and the last two represent seconds.  A @var{format} of @code{hh:mm:ss}, however, describes @var{time} as an eight-character string where characters 3 and 6 will be ignored.
@comment *********************************************************************
@comment ** 8.1.82 SECONDS-PAST-MIDNIGHT                                    **
@comment *********************************************************************
@page
@newsubsection{SECONDS-PAST-MIDNIGHT}
@diagram{SECONDS-PAST-MIDNIGHT Function,FN-SECS-PAST-MIDNIGHT,FN-SECS-PAST-MIDNIGHT,None}
This function returns the current time of day expressed as the total number of elapsed seconds since midnight.

Since this function has no arguments, no parenthesis should be specified.
@comment *********************************************************************
@comment ** 8.1.83 SIGN                                                     **
@comment *********************************************************************
@page
@newsubsection{SIGN}
@diagram{SIGN Function,FN-SIGN,FN-SIGN,None}
The @code{SIGN} function returns a -1 if the value of @var{number} (a numeric literal or numeric data item) is negative, a zero if the value of @var{number} is exactly zero and a 1 if the value of @var{number} if greater than 0.
@comment *********************************************************************
@comment ** 8.1.84 SIN                                                      **
@comment *********************************************************************
@page
@newsubsection{SIN}
@diagram{SIN Function,FN-SIN,FN-SIN,None}
This function determines and returns the trigonometric sine of @var{angle} (a numeric literal or numeric data item).

The @var{angle} is assumed to be a value expressed in radians.  If you need to determine the sine of an angle measured in degrees, you first need to convert that angle to radians as follows:

@example
COMPUTE @var{radians} = ( @var{degrees} * FUNCTION PI) / 180
@end example
@comment *********************************************************************
@comment ** 8.1.85 SQRT                                                    **
@comment *********************************************************************
@page
@newsubsection{SQRT}
@diagram{SQRT Function,FN-SQRT,FN-SQRT,None}
The @code{SQRT} function returns a numeric value that approximates the square root of @var{number} (a numeric data item or numeric literal with a non-negative value).

The following two statements produce identical results:

@example
01  Result           PIC 9(4).9(10).
@dots{}
    MOVE FUNCTION SQRT(15) TO Result
    COMPUTE Result = 15 ** 0.5
@end example
@comment *********************************************************************
@comment ** 8.1.86 STANDARD-DEVIATION                                       **
@comment *********************************************************************
@page
@newsubsection{STANDARD-DEVIATION}
@diagram{STANDARD-DEVIATION Function,FN-STANDARD-DEVIATION,FN-STANDARD-DEVIATION,None}
This function returns the statistical standard deviation of the list of @var{number-n} arguments (numeric data items or numeric literals).
@comment *********************************************************************
@comment ** 8.1.87 STORED-CHAR-LENGTH                                       **
@comment *********************************************************************
@page
@newsubsection{STORED-CHAR-LENGTH}
@diagram{STORED-CHAR-LENGTH Function,FN-STORED-CHAR-LENGTH,FN-STORED-CHAR-LENGTH,None}
Returns the length --- in bytes --- of the specified @code{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal), minus the total number of trailing spaces, if any.
@comment *********************************************************************
@comment ** 8.1.88 SUBSTITUTE                                               **
@comment *********************************************************************
@page
@newsubsection{SUBSTITUTE}
@diagram{SUBSTITUTE Function,FN-SUBSTITUTE,FN-SUBSTITUTE,None}
This function parses @var{string}, replacing all occurrences of @var{from-n} strings with the corresponding @var{to-n} strings.

The @var{from-n} strings must match sequences in @var{string} exactly with regard to value and case.

A @var{from-n} string does not have to be the same length as its corresponding @var{to-n} string.

All arguments are group items, @code{USAGE DISPLAY} elementary items or alphanumeric literals.

A null @var{to-n} string will be treated as a single space.

When using Variables in place of @var{string} attention to NOT wanting Leading or trailing spaces usage of function TRIM needs to be utilised as failure to do so will result in variables treated with any unwanted spaces leading and/or trailing, i.e.,
@verbatim

move     function SUBSTITUTE      (WS-Dest-File-Path,
                    function TRIM (WS-Inbound-Path),
                    function TRIM (WS-Desc-Path))
                               to WS-Dest-File-Path
@end verbatim
@comment *********************************************************************
@comment ** 8.1.89 SUBSTITUTE-CASE                                          **
@comment *********************************************************************
@page
@newsubsection{SUBSTITUTE-CASE}
@diagram{SUBSTITUTE-CASE Function,FN-SUBSTITUTE-CASE,FN-SUBSTITUTE-CASE,None}
The @code{SUBSTITUTE-CASE} function operates the same as the @syntaxref{SUBSTITUTE} function, except that @var{from-n} string matching is performed without regard to case.

All arguments are group items, @code{USAGE DISPLAY} elementary items or alphanumeric literals.

When using Variables in place of @var{string} attention to NOT wanting Leading or trailing spaces usage of function TRIM needs to be utilised as failure to do so will result in variables treated with any unwanted spaces leading and/or trailing, i.e.,
@verbatim

move     function SUBSTITUTE-CASE (WS-Dest-File-Path,
                    function TRIM (WS-Inbound-Path),
                    function TRIM (WS-Desc-Path))
                               to WS-Dest-File-Path
@end verbatim

@comment *********************************************************************
@comment ** 8.1.90 SUM                                                      **
@comment *********************************************************************
@page
@newsubsection{SUM}
@diagram{SUM Function,FN-SUM,FN-SUM,None}
The @code{SUM} function returns a value that is the sum of @var{number-n} arguments (these may be numeric data items or numeric literals).
@comment *********************************************************************
@comment ** 8.1.91 TAN                                                      **
@comment *********************************************************************
@page
@newsubsection{TAN}
@diagram{TAN Function,FN-TAN,FN-TAN,None}
This function determines and returns the trigonometric tangent of @var{angle} (a numeric literal or numeric data item).

The @var{angle} is assumed to be a value expressed in radians.  If you need to determine the tangent of an angle measured in degrees, you first need to convert that angle to radians as follows:

@example
COMPUTE @var{radians} = ( @var{degrees} * FUNCTION PI) / 180
@end example
@comment *********************************************************************
@comment ** 8.1.92 TEST-DATE-YYYYMMDD                                       **
@comment *********************************************************************
@page
@newsubsection{TEST-DATE-YYYYMMDD}
@diagram{TEST-DATE-YYYYMMDD Function,FN-TEST-DATE-YYYYMMDD,FN-TEST-DATE-YYYYMMDD,None}
This function determines if the supplied @var{date} argument (a numeric integer data item or literal) is a valid date.

A valid date is one of the form yyyymmdd in the range 1601/01/01 to 9999/12/31, with no more than the expected maximum number of days in the month, accounting for leap year.

If the @var{date} is valid, a 0 value is returned.  If it isn't, a value of 1, 2 or 3 is returned signalling the problem lies with the year, month or day, respectively.
@comment *********************************************************************
@comment ** 8.1.93 TEST-DAY-YYYYDDD                                         **
@comment *********************************************************************
@page
@newsubsection{TEST-DAY-YYYYDDD}
@diagram{TEST-DAY-YYYYDDD Function,FN-TEST-DAY-YYYYDDD,FN-TEST-DAY-YYYYDDD,None}
This function determines if the supplied @var{date} (a numeric integer data item or literal) is a valid date.

A valid date is one of the form @code{yyyyddd} in the range 1601001 to 9999365.  Leap year is accounted for in determining the maximum number of days in a year.

If the date is valid, a 0 value is returned.  If it isn't, a value of 1 or 2 is returned signalling the problem lies with the year or day, respectively.
@comment *********************************************************************
@comment ** 8.1.94 TEST-FORMATTED-DATETIME                                  **
@comment *********************************************************************
@page
@newsubsection{TEST-FORMATTED-DATETIME}
@diagram{TEST-FORMATTED-DATETIME Function,FN-TEST-FORMATTED-DATETIME,FN-TEST-FORMATTED-DATETIME,None}
@code{TEST-FORMATTED-DATETIME} tests whether a date literal representing a date, a time or a combined date and time is valid according to the specified format.

@var{argument-1} must a literal of type alphanumeric, UTF-8 or national, that contains a date, time or combined data time format. See Date and Time formats for details.

@var{argument-2} must be a data item of the same type as @var{argument-1}.

Returned value:

If no format or range problems occur during evaluation of @var{argument-2} according to the format in @var{argument-1}, the returned value is zero. Otherwise the returned value is the ordinal character position at which the first error in @var{argument-2} was detected.

Example

Using the following arguments, it will generates a return value of 5, as the fifth character of argument-2 ("4") contains an incorrect value for the first digit of the month representation.

FUNCTION TEST-FORMATTED-DATETIME("YYYYMMDD", "20124523")


@comment *********************************************************************
@comment ** 8.1.95 TEST-NUMVAL                                              **
@comment *********************************************************************
@page
@newsubsection{TEST-NUMVAL}
@diagram{TEST-NUMVAL Function,FN-TEST-NUMVAL,FN-TEST-NUMVAL,None}
The @code{TEST-NUMVAL} function evaluates @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal) for being appropriate for use as the @var{string} argument to a @syntaxref{NUMVAL} function, returning to a integer a zero value if it is appropriate otherwise if one or more characters are in error, the position of the first character in error or the length of the field plus one for other cases such as all spaces.

Note that these errors include but are not limited to: argument (@var{string}) is zero length, contains only spaces or contains valid characters but is incomplete, such as the string @samp{+.}.
@comment *********************************************************************
@comment ** 8.1.96 TEST-NUMVAL-C                                            **
@comment *********************************************************************
@page
@newsubsection{TEST-NUMVAL-C}
@diagram{TEST-NUMVAL-C Function,FN-TEST-NUMVAL-C,FN-TEST-NUMVAL-C,None}
This function evaluates @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal) for being appropriate for use as the @var{string} argument to a @syntaxref{NUMVAL-C} function, returning to a integer a zero value if it is appropriate otherwise if one or more characters are in error, the position of the first character in error or the length of the field plus one for other cases such as all spaces.

Note that these errors include but are not limited to: argument (@var{string}) is zero length, contains only spaces or contains valid characters but is incomplete, such as the string @samp{+.}.

The optional @var{symbol} argument serves the same function --- and has the same default and possible values --- as the corresponding argument of the @code{NUMVAL-C} function.
@comment *********************************************************************
@comment ** 8.1.97 TEST-NUMVAL-F                                            **
@comment *********************************************************************
@page
@newsubsection{TEST-NUMVAL-F}
@diagram{TEST-NUMVAL-F Function,FN-TEST-NUMVAL-F,FN-TEST-NUMVAL-F,None}
This function evaluates @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal) for being appropriate for use as the @var{string} argument to a @syntaxref{NUMVAL-F} function, returning to a integer a zero value if it is appropriate otherwise if one or more characters are in error, the position of the first character in error or the length of the field plus one for other cases such as all spaces.

Note that these errors include but are not limited to: argument (string) is zero length, contains only spaces or contains valid characters but is incomplete, such as the string @samp{+.}.
@comment *********************************************************************
@comment ** 8.1.98 TRIM                                                     **
@comment *********************************************************************
@page
@newsubsection{TRIM}
@diagram{TRIM Function,FN-TRIM,FN-TRIM,None}
This function removes
@syntaxidx{LEADING} or
@syntaxidx{TRAILING} spaces from @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal).

The second argument is specified as a keyword, not a quoted string or identifier.  If no second argument is specified, @i{both} leading and trailing spaces will be removed.  The case (upper, lower or mixed) of this argument is irrelevant.
@comment *********************************************************************
@comment ** 8.1.99 UPPER-CASE                                               **
@comment *********************************************************************
@page
@newsubsection{UPPER-CASE}
@diagram{UPPER-CASE Function,FN-UPPER-CASE,FN-UPPER-CASE,None}
This function returns the value of @var{string} (a group item, @code{USAGE DISPLAY} elementary item or alphanumeric literal), converted entirely to upper case.

What constitutes a ``letter'' (or upper/lower case too, for that manner) may be influenced through the use of a @syntaxrefalt{CHARACTER CLASSIFICATION,OBJECT-COMPUTER}.
@comment *********************************************************************
@comment ** 8.1.100 VARIANCE                                                 **
@comment *********************************************************************
@page
@newsubsection{VARIANCE}
@diagram{VARIANCE Function,FN-VARIANCE,FN-VARIANCE,None}
This function returns the statistical variance of the specified list of @var{number-n} arguments (these may be numeric data items or numeric literals).
@comment *********************************************************************
@comment ** 8.1.101 WHEN-COMPILED                                            **
@comment *********************************************************************
@page
@newsubsection{WHEN-COMPILED}
@diagram{WHEN-COMPILED Function,FN-WHEN-COMPILED,FN-WHEN-COMPILED,None}
The @code{WHEN-COMPILED} intrinsic function, not to be confused with the @syntaxrefalt{WHEN-COMPILED,Special Registers} special register, returns the date and time the program was compiled, in @sc{ASCII}.

Since this function has no arguments, no parenthesis should be specified.

Unlike the @code{WHEN-COMPILED} special register, which has an @sc{ASCII} value of the compilation date/time in the format @code{mm/dd/yyhh.mm.ss}, the @code{WHEN-COMPILED} intrinsic function returns the compilation date/time as an @sc{ASCII} string in the format @code{yyyymmddhhmmssnnooooo}, where @code{yyyymmdd} is the date, @code{hhmmss} is the time, @code{nn} is the hundredths of a second component of the compilation time, if available (or @code{00} if it isn't) and @code{ooooo} is the time zone offset from GMT.

If the @switch{-fintrinsics=WHEN-COMPILED} or @switch{-fintrinsics=ALL} is specified to the compiler or the @syntaxref{REPOSITORY} paragraph specifies either @code{FUNCTION WHEN-COMPILED INTRINSIC} or @code{FUNCTION ALL INTRINSIC}, then references to @code{WHEN-COMPILED} (without a leading @code{FUNCTION} keyword will always reference this intrinsic function and there will be no way to access the @code{WHEN-COMPILED} special register.
@comment *********************************************************************
@comment ** 8.1.102 YEAR-TO-YYYY                                             **
@comment *********************************************************************
@page
@newsubsection{YEAR-TO-YYYY}
@diagram{YEAR-TO-YYYY Function,FN-YEAR-TO-YYYY,FN-YEAR-TO-YYYY,None}
@code{YEAR-TO-YYYY} converts @var{yy} --- a two-digit year --- to a four-digit format (@code{yyyy}).

The optional @var{yy-cutoff} argument is the year cutoff used to delineate centuries; if @var{yy} meets or exceeds this cutoff value, the result will be 19yy; if @var{yy} is less than the cutoff, the result will be 20yy.  The default cutoff value if no second argument is given will be 50.

The optional @var{yy-execution-time} argument (a numeric integer data item or literal)   The default execution time value if no third argument is given will be now equivalent to specifying (FUNCTION NUMVAL (FUNCTION CURRENT-DATE (1:4))).

All arguments must be numeric data items or numeric literals.
@comment *********************************************************************
@comment ** 8.1.103 BOOLEAN-OF-INTEGER                                      **
@comment *********************************************************************
@page
@newsubsection{BOOLEAN-OF-INTEGER}
@diagram{BOOLEAN-OF-INTEGER Function,FN-BOOLEAN-OF-INTEGER,FN-BOOLEAN-OF-INTEGER,NOT-YET-IMPLEMENTED}
@code{BOOLEAN-OF-INTEGER} returns a boolean item of usage bit representing the binary value of @var{argument-1}. @var{argument-2} specifies the length of the boolean data item that is returned.

@var{argument-1} must be a positive integer.

@var{argument-2} must be a positive non-zero integer

Returned value is a boolean item of usage bit that has the same bit configuration as the binary representation of the value of @var{argument-1}, where the rightmost boolean position is the low-order binary digit. The boolean value is zero-filled or truncated on the left, if necessary, in order to return a boolean item whose length is specified by @var{argument-2} in therms of boolean positions.
@comment *********************************************************************
@comment ** 8.1.104 CHAR-NATIONAL                                            **
@comment *********************************************************************
@page
@newsubsection{CHAR-NATIONAL}
@diagram{CHAR-NATIONAL Function,FN-CHAR-NATIONAL,FN-CHAR-NATIONAL,NOT-YET-IMPLEMENTED}
@code{CHAR-NATIONAL} returns a one character value that is a character in the national program collating sequence having the ordinal position equal to the value of the argument.

@var{argument-1} must be a integer and greater than zero and less than or equal to the number of positions in the national program collating sequence.
@comment *********************************************************************
@comment ** 8.1.105 DISPLAY-OF                                               **
@comment *********************************************************************
@page
@newsubsection{DISPLAY-OF}
@diagram{DISPLAY-OF Function,FN-DISPLAY-OF,FN-DISPLAY-OF,NOT-YET-IMPLEMENTED}
@code{DISPLAY-OF} returns a character string containing the alphabetic coded character set representation of the national characters in the argument.

@var{argument-1} must be of class national.

@var{argument-2} must be a of class alphabetic or alphanumeric and is one character position in length. It specifies an alphanumeric substitution character for use in conversion of national characters for which there is no corresponding alphanumeric character.

A character string is returned with each national character of @var{argument-1} converted to its corresponding alphanumeric character representation, if any.

If @var{argument-2} is specified, the alphanumeric substitution character is returned for each national character in @var{argument-1} that has no corresponding alphanumeric character representation.

If @var{argument-2} is un-specified, and @var{argument-1} contains a national character for which there is no corresponding alphanumeric character representation, an substitution character is used as the corresponding alphanumeric character and the EC-DATA-CONVERSION exception condition is set.

The length of the returned value is the number of character positions of usage display required to hold the converted argument and depends on the number of characters contained in @var{argument-1}.
@comment *********************************************************************
@comment ** 8.1.106 EXCEPTION-FILE-N                                        **
@comment *********************************************************************
@page
@newsubsection{EXCEPTION-FILE-N}
@diagram{EXCEPTION-FILE-N Function,FN-EXCEPTION-FILE-N,FN-EXCEPTION-FILE-N,NOT-YET-IMPLEMENTED}
@code{EXCEPTION-FILE-N} returns a national character string that is the I/O status value and file-name of the file connector, if any, associated with the last exception status.

The value returned has a length that is based on its contents and the concents are as follows:

If the last exception status is not an @code{EC-I-O} exception condition, the returned value is two national zeros.

The returned value is two national spaces when the last exception status indicates an @code{EC-I-O} exception condition that originates from one of the following statements:

@itemize @bullet
@item
a @code{RAISE} statement.

@item
an @code{EXIT} or a @code{GOBACK} statement with a @code{RAISING} phrase that specifies an @code{EC-I-O} exception-name.
@end itemize

@noindent
Otherwise the returned value is a character string that is as long as is needed to contain the I-O status value and the filename. The first two characters are the I-O status value in national characters. The succeeding characters contain the file-name exactly as specified in the @code{SELECT} clause converted at runtime to the runtime national character set.

The documentation of the @subpgmref{CBL_ERROR_PROC} built-in subroutine illustrates the use of this function.
@comment *********************************************************************
@comment ** 8.1.107 EXCEPTION-LOCATION-N                                    **
@comment *********************************************************************
@page
@newsubsection{EXCEPTION-LOCATION-N}
@diagram{EXCEPTION-LOCATION-N Function,FN-EXCEPTION-LOCATION-N,FN-EXCEPTION-LOCATION-N,NOT-YET-IMPLEMENTED}
@code{EXCEPTION-LOCATION-N} returns an national character string containing exception information from the most-recently failing statement.  The information is returned to a 1023 character string in one of the following formats, depending on the nature of the failure:
@itemize @bullet

@item
primary-entry-point-name; paragraph OF section; statement-number

@item
primary-entry-point-name; section; statement-number

@item
primary-entry-point-name; paragraph; statement-number

@item
primary-entry-point-name; statement-number
@end itemize

Since this function has no arguments, no parenthesis should be specified.

The program must be compiled with the
@switchidx{-debug},
@switchidx{-ftraceall} or
@switchidx{-g} for this function to return any meaningful information.

The documentation of the @subpgmref{CBL_ERROR_PROC} built-in subroutine illustrates the use of this function.
@comment *********************************************************************
@comment ** 8.1.108 INTEGER-OF-BOOLEAN                                      **
@comment *********************************************************************
@page
@newsubsection{INTEGER-OF-BOOLEAN}
@diagram{INTEGER-OF-BOOLEAN Function,FN-INTEGER-OF-BOOLEAN,FN-INTEGER-OF-BOOLEAN,NOT-YET-IMPLEMENTED}
@code{INTEGER-OF-BOOLEAN} returns the numeric value of the boolean string in @var{argument-1} which is class boolean.

Returned value as @var{argument-1} is assigned to a temporary boolean data item of usage bit described with the same number
of boolean positions.

The unsigned binary value represented by the same bit configuration as the bit configuration of that
temporary boolean data item is determined.

@i{Note}: Binary representation is a mathematical concept. It is not required that this representation be the same as a
COBOL representation.
@comment *********************************************************************
@comment ** 8.1.109 NATIONAL-OF                                             **
@comment *********************************************************************
@page
@newsubsection{NATIONAL-OF}
@diagram{NATIONAL-OF Function,FN-NATIONAL-OF,FN-NATIONAL-OF,NOT-YET-IMPLEMENTED}
@code{NATIONAL-OF} returns a character string containing the national character representation of the characters in the argument which must be of class boolean.

A character string is returned with each alphanumeric character in @var{argument-1} converted to its corresponding national coded character set representation.

If @var{argument-2} is specified, each character in @var{argument-1} that has no corresponding national representation is converted to the substitution character specified by @var{argument-2}.

If @var{argument-2} is unspecified and @var{argument-1} contains an alphanumeric character for which there is no corresponding national character representation, a substitution character is used as the corresponding national character and the @code{EC-DATA-CONVERSION} exception condition is set to exist.

The length of the returned value is the number of character positions of usage national required to hold the converted argument and depends on the number of characters contained in @var{argument-1}.
@comment *********************************************************************
@comment ** 8.1.110 STANDARD-COMPARE                                        **
@comment *********************************************************************
@page
@newsubsection{STANDARD-COMPARE}
@diagram{STANDARD-COMPARE Function,FN-STANDARD-COMPARE,FN-STANDARD-COMPARE,NOT-YET-IMPLEMENTED}
@code{STANDARD-COMPARE}  returns a character indicating the result of comparing @var{argument-1} as a alphanumeric and @var{argument-2} using a cultural ordering table.

@enumerate
@item
@var{argument-1} shall be of class alphabetic, alphanumeric, or national.

@item
@var{argument-2} shall be of class alphabetic, alphanumeric, or national.

@item
@var{argument-1} and @var{argument-2} may be of different classes.

@item
Neither @var{argument-1} nor @var{argument-2} shall be a zero-length literal.

@item
@var{ordering-name-1}, if specified, shall be associated with a cultural ordering table in the @code{ORDER TABLE} clause of the @code{SPECIAL-NAMES} paragraph. @var{ordering-name-1} identifies the ordering table to be used for the comparison. If @var{ordering-name-1} is not specified, the default ordering table `ISO14651_2010_TABLE1' described in Appendix A of ISO/IEC 14651:2011 shall be used.

@item
@var{argument-4}, if specified, shall be a positive nonzero integer.
@end enumerate

@noindent
Returned values:

@enumerate
@item
If @var{argument-4} is unspecified, the highest level defined in the ordering table is used for the comparison.

@item
If the cultural ordering table is not available on the processor, or the specified ordering level is not available, or the level number specified by @var{argument-4} is not defined in the ordering table, the @code{EC-ORDER-NOT-SUPPORTED} exception condition is set.

@item
If the arguments are of different classes, and one is national, the other argument is converted to class national for purposes of comparison.

@item
For purposes of comparison, trailing spaces are truncated from the operands except that an operand consisting of all spaces is truncated to a single space.

@item
@var{argument-1} and @var{argument-2} are compared in accordance with the ordering table and ordering level being used.

@i{Note}: This comparison is culturally sensitive and the default ordering table is acceptable for most cultures. It is not
necessarily a character-by-character comparison and not necessarily a case-sensitive comparison. In order to use this
function, users should understand the types of comparisons specified by ISO/IEC 14651:2D11 and the ordering tables in
use for their installation.

@page
@item
The returned value is:

@table @samp
@item =
the arguments compare equal,

@item -=.:
@var{argument-1} is less than @var{argument-2},

@item :>
@var{argument-1} is greater than @var{argument-2}.
@end table

@item
The length of the returned value is 1.
@end enumerate

@comment *********************************************************************
@comment ** 8.2 Built-In System Subroutines                                 **
@comment *********************************************************************
@page
@newsection{Built-In System Subroutines}
There are a number of built-in system subroutines included with GnuCOBOL.

Generally, these routines are intended to match those available in Micro Focus COBOL, ACUCOBOL and directly for GnuCOBOL.

It is recommended to change the CBL_OC routines to CBL_GC for forward compatibility as at some point they will be removed as they are a hangover from Open Cobol.

Prefix explanation:

@table @code
@item C$
--> @code{ACU}

@item CBL_
--> @code{MF}

@item CBL_GC_
(For backwards compatibility some routines are also available as @code{CBL_OC_}
as well): but these wonderful extensions are @i{only} available with GnuCOBOL.
@end table

These routines, all executed via their @i{upper-case names} via the @statementref{CALL}, are capable of performing the following functions:

@itemize @bullet
@item
Changing the current directory

@item
Copying files

@item
Creating a directory

@item
Creating, Opening, Closing, Reading and Writing byte-stream files

@item
Deleting directories (folders)

@item
Deleting files

@item
Determining how many arguments were passed to a subroutine

@item
Getting file information (size and last-modification date/time)

@item
Getting the length (in bytes) of an argument passed to a subroutine

@item
Justifying a field left-, right- or center-aligned

@item
Moving files (a destructive ``copy'')

@item
Putting the program ``to sleep'', specifying the sleep time in seconds

@item
Putting the program ``to sleep'', specifying the sleep time in nanoseconds; @i{Caveat}: although you'll express the time in nanoseconds, Windows systems will only be able to sleep at a millisecond granularity

@item
Retrieving information about the currently-executing program

@item
Submitting a command to the shell environment appropriate for the version of GnuCOBOL you are using for execution
@end itemize

Early versions of Micro Focus COBOL allowed programmers to access various runtime library routines by using a single two-digit hexadecimal number as the entry-point name.  These were known as call-by-number routines.  Over time, Micro Focus COBOL evolved, replacing most of the call-by-number routines with ones accessible using a more conventional call-by-name technique.

Most of the call-by-number routines have evolved into even more powerful call-by-name routines, many of which are supported by GnuCOBOL.

Some of the original call-by-number routines never evolved call-by-name equivalents; GnuCOBOL supports some of these routines. See all currently used in Appendix's C and D. (Items marked as **).

The following sections describe the various built-in subroutines.  @i{All subroutine arguments are mandatory except where explicitly noted to the contrary}.  Any subroutine returning a value to the
@registerref{RETURN-CODE} could utilize the @code{RETURNING} clause on the
@statement{CALL} to return the result back to the full-word binary data item of your choice.
@menu
* C$CALLEDBY.
* C$CHDIR.
* C$COPY.
* C$DELETE.
* C$FILEINFO.
* C$GETPID.
* C$JUSTIFY.
* C$MAKEDIR.
* C$NARG.
* C$PARAMSIZE.
* C$PRINTABLE.
* C$SLEEP.
* C$TOLOWER.
* C$TOUPPER.
* CBL_ALARM_SOUND.**
* CBL_AND.
* CBL_BELL_SOUND.**
* CBL_CHANGE_DIR.
* CBL_CHECK_FILE_EXIST.
* CBL_CLOSE_FILE.
* CBL_COPY_FILE.
* CBL_CREATE_DIR.
* CBL_CREATE_FILE.
* CBL_DELETE_DIR.
* CBL_DELETE_FILE.
* CBL_EQ.
* CBL_ERROR_PROC.
* CBL_EXIT_PROC.
* CBL_FLUSH_FILE.
* CBL_GC_FORK.
* CBL_GC_GETOPT.
* CBL_GC_HOSTED.
* CBL_GC_NANOSLEEP.
* CBL_GC_PRINTABLE.
* CBL_GC_SCR_DUMP.
* CBL_GC_SCR_RESTORE.
* CBL_GC_SET_SCR_SIZE.
* CBL_GC_WAITPID.
* CBL_GET_CSR_POS.
* CBL_GET_CURRENT_DIR.
* CBL_GET_SCR_SIZE.
* CBL_IMP.
* CBL_NIMP.
* CBL_NOR.
* CBL_NOT.
* CBL_OC_GETOPT.
* CBL_OC_HOSTED.
* CBL_OC_NANOSLEEP.
* CBL_OPEN_FILE.
* CBL_OR.
* CBL_READ_FILE.
* CBL_READ_KBD_CHAR.
* CBL_RENAME_FILE.
* CBL_RUNTIME_ERROR.**
* CBL_SET_CSR_POS.
* CBL_TOLOWER.
* CBL_TOUPPER.
* CBL_WRITE_FILE.
* CBL_XOR.
* EXTFH.
* SYSTEM.
* X"91".
* X"E4".
* X"E5".
* X"F4".
* X"F5".
@end menu
@page
@comment *********************************************************************
@comment ** 8.2.1 C$CALLEDBY                                                **
@comment *********************************************************************
@newsubsection{C$CALLEDBY}
@diagram{C$CALLEDBY Built-In Subroutine,SS-C$CALLEDBY,SS-C$CALLEDBY,None}
This routine returns the name of the program that called the currently-executing program.  The program name will be returned, left-justified and space filled, in @var{prog-name-area} argument, which should be a @code{PIC X} elementary item or a group item.  If @var{prog-name-area} is too small to receive the entire program name, the program name value will be truncated (on the right) to fit.

The
@registerref{RETURN-CODE} will be set to one of the following values:
@multitable @columnfractions 0.05 0.95
@item -1
@tab An error occurred.  The @var{prog-name-area} contents will be unchanged.
@item 0
@tab The program calling @code{C$CALLEDBY} was not called by any other program (in other words, it is a main program).  The @var{prog-name-area} contents will be set entirely to spaces.
@item 1
@tab The program calling @code{C$CALLEDBY} was indeed called by another program, and that program's name has been saved in @var{prog-name-area}.
@end multitable
@comment *********************************************************************
@comment ** 8.2.2 C$CHDIR                                                   **
@comment *********************************************************************
@page
@newsubsection{C$CHDIR}
@diagram{C$CHDIR Built-In Subroutine,SS-C$CHDIR,SS-C$CHDIR,None}
This routine makes @var{directory-path} (an alphanumeric literal or identifier) the current directory.

The return code of the operation is returned both in the @var{result} argument (any non-edited numeric identifier) as well as in the
@registerref{RETURN-CODE}.   The return code of the operation will be either 0=Success or 128=failure.

The directory change remains in effect until the program terminates (in which the original current directory at the time the program was started will be automatically restored) or until another @code{C$CHDIR} or a @subpgmref{CBL_CHANGE_DIR} is executed.
@comment *********************************************************************
@comment ** 8.2.3 C$COPY                                                    **
@comment *********************************************************************
@page
@newsubsection{C$COPY}
@diagram{C$COPY Built-In Subroutine,SS-C$COPY,SS-C$COPY,None}
Use this subroutine to copy file @var{src-file-path} to @var{dest-file-path} as if it were done via the @command{cp} (Unix/OSX) or @code{COPY} (Windows) command.

Both file path arguments may be alphanumeric literals or identifiers.

The third argument is required, but is unused.

If the attempt to copy the file fails (for example, it or the destination directory doesn't exist), the
@registerref{RETURN-CODE} will be set to 128; on successful completion it will be set to 0.
@comment *********************************************************************
@comment ** 8.2.4 C$DELETE                                                  **
@comment *********************************************************************
@page
@newsubsection{C$DELETE}
@diagram{C$DELETE Built-In Subroutine,SS-C$DELETE,SS-C$DELETE,None}
This routine deletes the file specified by the @var{file-path} argument (an alphanumeric literal or identifier) just as if that were done using the @command{rm} (Unix/OSX) or @command{ERASE} (Windows) command.

The second argument is required, but is unused.

If the attempt to delete the file fails (for example, it doesn't exist), the
@registerref{RETURN-CODE} will be set to 128; on successful completion it will be set to 0.
@comment *********************************************************************
@comment ** 8.2.5 C$FILEINFO                                                **
@comment *********************************************************************
@page
@newsubsection{C$FILEINFO}
@diagram{C$FILEINFO Built-In Subroutine,SS-C$FILEINFO,SS-C$FILEINFO,None}
With this routine you may retrieve the size of the file specified as the @var{file-path} argument (an alphanumeric literal or identifier) and the date/time that file was last modified.  File size information may not be available in the particular GnuCOBOL build / Operating System combination you are using and may therefore always be returned as zero.  The information is returned to the @var{file-info} argument, which is defined as the following 16-byte area:

@example
01  File-Info.
    05 File-Size-In-Bytes  PIC 9(18) COMP.
    05 Mod-YYYYMMDD        PIC 9(8)  COMP. *> Modification Date
    05 Mod-HHMMSS00        PIC 9(8)  COMP. *> Modification Time
@end example

The last two decimal digits in the modification time will always be 00.

If the subroutine is successful, a value of 0 will be returned in the
@registerref{RETURN-CODE}.  Failure to retrieve the needed statistics on the file will cause a
@register{RETURN-CODE} value of 35 to be passed back.  Supplying less than two arguments will generate a 128
@register{RETURN-CODE} value.
@comment *********************************************************************
@comment ** 8.2.6 C$GETPID}                                                 **
@comment *********************************************************************
@page
@newsubsection{C$GETPID}
@diagram{C$GETPID Built-In Subroutine,SS-C$GETPID,SS-C$GETPID,None}
Use this subroutine to return the PID (process ID) of the executing GnuCOBOL program.  The PID value is returned into the
@registerref{RETURN-CODE}.

There are no arguments to this routine.
@comment *********************************************************************
@comment ** 8.2.7 C$JUSTIFY                                                 **
@comment *********************************************************************
@page
@newsubsection{C$JUSTIFY}
@diagram{C$JUSTIFY Built-In Subroutine,SS-C$JUSTIFY,SS-C$JUSTIFY,None}
Use @code{C$JUSTIFY} to left, right or center-justify an alphabetic, alphanumeric or numeric edited data-item.  The optional @var{justification-type} argument indicates the type of the justification to be performed.  Its value is interpreted as follows:
@table @samp
@item C
the value will be centered

@item R
the value will be right-justified, space-filled to the left

@item L
the value will be left-justified, space-filled to the right
@end table

@noindent
If it begins with anything else, or is absent, it will be treated as if it is present and begins with a capital @samp{R}
@comment *********************************************************************
@comment ** 8.2.8 C$MAKEDIR                                                 **
@comment *********************************************************************
@page
@newsubsection{C$MAKEDIR}
@diagram{C$MAKEDIR Built-In Subroutine,SS-C$MAKEDIR,SS-C$MAKEDIR,None}
With this routine you may create a new directory --- the name of which is supplied as the @var{dir-path} argument (an alphanumeric literal or identifier).

Only the lowest-level directory (last) in the specified path can be created --- all others must already exist.  This subroutine will @i{not} behave as a @code{mkdir -p} (Unix) or @code{mkdir /p} (Windows).

The @registerref{RETURN-CODE} will be set to the return code of the operation; the value will be either 0=Success or 128=failure.
@comment *********************************************************************
@comment ** 8.2.9 C$NARG                                                    **
@comment *********************************************************************
@page
@newsubsection{C$NARG}
@diagram{C$NARG Built-In Subroutine,SS-C$NARG,SS-C$NARG,None}
This subroutine returns the number of arguments passed to the program that calls it back to in the numeric field @var{arg-count-result}.  When called from within a user-defined function, a value of one (1) is returned if any arguments were passed to the function or a zero (0) otherwise.

When called from a main program, the returned value will always be 0.
@comment *********************************************************************
@comment ** 8.2.10 C$PARAMSIZE                                              **
@comment *********************************************************************
@page
@newsubsection{C$PARAMSIZE}
@diagram{C$PARAMSIZE Built-In Subroutine,SS-C$PARAMSIZE,SS-C$PARAMSIZE,None}
This subroutine returns the size (in bytes) of the subroutine argument supplied using the @var{argument-number} parameter (a numeric literal or data item).

The size is returned in the
@registerref{RETURN-CODE}.

If the specified argument does not exist, or an invalid argument number is specified, a value of 0 is returned.
@comment *********************************************************************
@comment ** 8.2.11 C$PRINTABLE                                              **
@comment *********************************************************************
@page
@newsubsection{C$PRINTABLE}
@diagram{C$PRINTABLE Built-In Subroutine,SS-C$PRINTABLE,SS-C$PRINTABLE,None}
The @code{C$PRINTABLE} subroutine converts the contents of the data-item specified as the first argument to printable characters.  Those characters that are deemed printable (as defined by the character set used by @var{data-item}) will remain unchanged, while those that are NOT printable will be converted to the character specified as the second argument.

If no @var{char} argument is provided, a period (@samp{.}) will be used.

@i{Note}: CBL_GC_PRINTABLE replaces this although it is currently still supported for legacy reasons.
@comment *********************************************************************
@comment ** 8.2.12 C$SLEEP                                                  **
@comment *********************************************************************
@page
@newsubsection{C$SLEEP}
@diagram{C$SLEEP Built-In Subroutine,SS-C$SLEEP,SS-C$SLEEP,None}
@code{C$SLEEP} puts the program to sleep for the specified number of seconds and/or fractions of a second.  The @var{seconds-to-sleep} argument may be a numeric literal or data item.

Sleep times less than 1 will be interpreted as 0, subject to the speed of the CPU and the O/S (Operating System) used, as well as the timing of the generated C code, which will immediately returns control to the calling program without any sleep delay.

When using a variable argument defined as 9(n)v9(m) where n is maximum seconds in 7 days, i.e., (60 x 60 x 24 x 7) = 604,800 (seconds)  and m is at a point too fast for the CPU and O/S. In practice m should be 2 for a hundredth of a second but actual testing against the target CPU would be needed.

The maximum time can be adjusted by the define MAX_SLEEP_TIME during compilation of the compiler [and no I do not know where it is in the codebase] e.g.:
@verbatim

/* maximum sleep time in seconds, currently 7 days */
#define MAX_SLEEP_TIME 3600*24*7

Extract from a working program :-

This routine completes a process on newly arrived files at 30 minutes past each hour
When complete sleeps for 60 minutes - time past nn:30:..

*>  In WS ---
*> Computed last finished, based on Sleep secs
*>    changes depend on UPDATE run & finished time.
*>
 01  WS-Cycle-Process-Data.
     03  WS-Sleep-Minutes    pic 9(5)        value 60.   *>Default 60 = 1 hour
     03  WS-Sleep-Seconds    pic 9(5)        value zeros.
     03  WS-Cycle-Start      pic 99          value 30.  *> time to run past the hour
     03  WS-Cycle-Secs       pic s9(6)       value zeros.
     03  WS-Tmp-Secs1        pic s9(6)       value zero.
     03  WS-Rerun-Cycles-No  pic s999        value -1.
     03  WS-Tmp-Sleep        pic 9(6)        value zero.
*>
 01  Current-Date-And-Time.
     03  CDT-DateTime.                        *> 16
         05  CDT-Year        pic 9(4).
         05  CDT-Month       pic 9(2). *> 01-12
         05  CDT-Day         pic 9(2). *> 01-31
         05  CDT-Hour        pic 9(2). *> 00-23
         05  CDT-Minutes     pic 9(2). *> 00-59
         05  CDT-Seconds     pic 9(2). *> 00-59
         05  CDT-Huns-Of-Secs pic 9(2). *> 00-99
     03  filler redefines CDT-DateTime.
         05  CDT-DDT         pic 9(8).
         05  filler          pic x(8).
     03  filler.
         05 CDT-GMT-Diff-HH  pic S9(2)  sign leading separate.
         05 CDT-GMT-Diff-MMM pic 9(2). *> 00 or 30

In PD ---

*>
*> Now if set to sleep do so,
*>  for normal processing multi (24) times per day
*>
*> First use minutes & at end convert to secs
*>
              move     FUNCTION Current-Date to Current-Date-And-Time
              compute  WS-Tmp-Secs1 = WS-Cycle-Secs - ((CDT-Minutes * 60) + CDT-Seconds)
              if       WS-Tmp-Secs1 is negative
                   or  WS-Tmp-Secs1 = zero
                       add       WS-Sleep-Seconds to WS-Tmp-Secs1
              end-if
              move     WS-Tmp-Secs1 to WS-Tmp-Sleep
*>
              move     spaces to Log-Msg
              string   "Time Now "
                       CDT-Hour
                       ":"
                       CDT-Minutes
                       ":"
                       CDT-Seconds
                       space
                       "Sleep time "
                       WS-Tmp-Sleep
                                     into Log-Msg
              display  FUNCTION TRIM (Log-Msg) at 1601 with erase eol
  *> Code skipped
*>
*> Allow ESCape to terminate after NEXT update cycle but time will be out 1 sec
*>
              accept   Accept-Reply at line WS-Lines col 42 TIME-OUT 1
              if       Cob-Crt-Status = Cob-Scr-Esc
                       go to AA040-EOJ
              end-if
              call     "C$SLEEP" using WS-Tmp-Sleep
              go to    AA032-Test-Update
     end-if

@end verbatim

@comment *********************************************************************
@comment ** 8.2.13 C$TOLOWER                                                **
@comment *********************************************************************
@page
@newsubsection{C$TOLOWER}
@diagram{C$TOLOWER Built-In Subroutine,SS-C$TOLOWER,SS-C$TOLOWER,None}
This routine will converts the @var{convert-length} (a numeric literal or data item) leading characters of @var{data-item} (an alphanumeric identifier) to lower-case.

The @var{convert-length} argument must be specified @syntaxrefalt{BY VALUE,CALL}.
Any characters in @var{data-item} after the @var{convert-length} point will remain unchanged.

If @var{convert-length} is negative or zero, no conversion will be performed.
@comment *********************************************************************
@comment ** 8.2.14 C$TOUPPER                                                **
@comment *********************************************************************
@page
@newsubsection{C$TOUPPER}
@diagram{C$TOUPPER Built-In Subroutine,SS-C$TOUPPER,SS-C$TOUPPER,None}
This routine will converts the @var{convert-length} (a numeric literal or data item) leading characters of @var{data-item} (an alphanumeric identifier) to upper-case.

The @var{convert-length} argument must be specified @syntaxrefalt{BY VALUE,CALL}.
Any characters in @var{data-item} after the @var{convert-length} point will remain unchanged.

If @var{convert-length} is negative or zero, no conversion will be performed.
@comment *********************************************************************
@comment ** 8.2.14B CBL_ALARM_SOUND                                         **
@comment *********************************************************************
@page
@newsubsection{CBL_ALARM_SOUND}
@diagram{CBL_ALARM_SOUND Built-In Subroutine,SS-CBL_ALARM_SOUND,SS-CBL_ALARM_SOUND,None}
This routine will create a noise (a beep) using the internal speaker if present. [ Place Holder ].

@comment *********************************************************************
@comment ** 8.2.15 CBL_AND                                                  **
@comment *********************************************************************
@page
@newsubsection{CBL_AND}
@diagram{CBL_AND Built-In Subroutine,SS-CBL_AND,SS-CBL_AND,None}
@multitable @columnfractions 0.3 0.7
@item
@verbatim
 Old    Old    New
Arg 1  Arg 2  Arg 2
 Bit    Bit    Bit
=====  =====  =====
  0      0      0
  0      1      0
  1      0      0
  1      1      1
@end verbatim
@tab This subroutine performs a bit-by-bit logical @code{AND} operation between the left-most 8*@var{byte-length} corresponding bits of @var{item-1} and @var{item-2}, storing the resulting bit string into @var{item-2}.  The truth table shown to the left documents the @code{AND} process.
 @* @* The @var{item-1} argument may be an alphanumeric literal or a data item and @var{item-2} must be a data item.  The length of both @var{item-1} and @var{item-2} must be at least 8*@var{byte-length}.
@end multitable

The @var{byte-length} argument may be a numeric literal or data item, and must be specified using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-2} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.

@comment *********************************************************************
@comment ** 8.2.14B CBL_BELL_SOUND                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_BELL_SOUND}
@diagram{CBL_BELL_SOUND Built-In Subroutine,SS-CBL_BELL_SOUND,SS-CBL_BELL_SOUND,None}
This routine will create a noise (a beep) using the internal speaker if present. [ Place Holder ].
Works the same as function CBL_ALARM_SOUND, so there.

@comment *********************************************************************
@comment ** 8.2.16 CBL_CHANGE_DIR                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_CHANGE_DIR}
@diagram{CBL_CHANGE_DIR Built-In Subroutine,SS-CBL_CHANGE_DIR,SS-CBL_CHANGE_DIR,None}
This routine makes @var{directory-path} (an alphanumeric literal or identifier) the current directory.

The return code of the operation, which will be either 0=Success or 128=failure, is returned in the
@registerref{RETURN-CODE}.

The directory change remains in effect until the program terminates (in which the original current directory at the time the program was started will be automatically restored) or until another @code{CBL_CHANGE_DIR} or a @subpgmref{C$CHDIR} is executed.
@comment *********************************************************************
@comment ** 8.2.17 CBL_CHECK_FILE_EXIST                                     **
@comment *********************************************************************
@page
@newsubsection{CBL_CHECK_FILE_EXIST}
@diagram{CBL_CHECK_FILE_EXIST Built-In Subroutine,SS-CBL_CHK_FILE_EX,SS-CBL_CHK_FILE_EX,None}
With this routine you may retrieve the size of the file specified as the @var{file-path} argument (an alphanumeric literal or identifier) and the date/time that file was last modified.  File size information may not be available in the particular GnuCOBOL build / Operating System combination you are using and may therefore always be returned as zero.

The information is returned to the @var{file-info} argument, which is defined as the following 16-byte area:

@example
01  file-info.
    05 File-Size-In-Bytes  PIC 9(18)  COMP.
    05 Mod-DD              PIC 9(2)   COMP.  *> Modification Date
    05 Mod-MO              PIC 9(2)   COMP.
    05 Mod-YYYY            PIC 9(4)   COMP.
    05 Mod-HH              PIC 9(2)   COMP.  *> Modification Time
    05 Mod-MM              PIC 9(2)   COMP.
    05 Mod-SS              PIC 9(2)   COMP.
    05 FILLER              PIC 9(2)   COMP.  *> Always 00
@end example

If the subroutine is successful, a value of 0 will be returned in the
@registerref{RETURN-CODE}.  Failure to retrieve the needed statistics on the file will cause a
@register{RETURN-CODE} value of 35 to be passed back.  Supplying less than two arguments will generate a 128
@register{RETURN-CODE} value.
@comment *********************************************************************
@comment ** 8.2.18 CBL_CLOSE_FILE                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_CLOSE_FILE}
@diagram{CBL_CLOSE_FILE Built-In Subroutine,SS-CBL_CLOSE_FILE,SS-CBL_CLOSE_FILE,None}
The @code{CBL_CLOSE_FILE} subroutine closes a byte stream file previously opened by either the @subpgmref{CBL_OPEN_FILE} or @subpgmref{CBL_CREATE_FILE} subroutines.

If the file defined by the @var{file-handle} argument (a @code{PIC X(4) USAGE COMP-X} data item) was opened for output, an implicit @subpgmref{CBL_FLUSH_FILE} will be performed before the file is closed.

If the subroutine is successful, a value of 0 will be returned in the
@registerref{RETURN-CODE}.  Failure will cause a
@register{RETURN-CODE} value of -1 to be passed back.

An example of the use of OPEN, CLOSE, READ etc., can be found in Contribs program printcbl.cbl which is basically also in cobxref.cbl as program 3.
@comment *********************************************************************
@comment ** 8.2.19 CBL_COPY_FILE                                            **
@comment *********************************************************************
@page
@newsubsection{CBL_COPY_FILE}
@diagram{CBL_COPY_FILE Built-In Subroutine,SS-CBL_COPY_FILE,SS-CBL_COPY_FILE,None}
Use this subroutine to copy file @var{src-file-path} to @var{dest-file-path} as if it were done via the @command{cp} (Unix/OSX) or @code{COPY} (Windows) command.

Both arguments may be alphanumeric literals or identifiers.

If the attempt to copy the file fails (for example, it or the destination directory doesn't exist), the
@registerref{RETURN-CODE} will be set to 128; on successful completion it will be set to 0.
@comment *********************************************************************
@comment ** 8.2.20 CBL_CREATE_DIR                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_CREATE_DIR}
@diagram{CBL_CREATE_DIR Built-In Subroutine,SS-CBL_CREATE_DIR,SS-CBL_CREATE_DIR,None}
With this routine you may create a new directory --- the name of which is supplied as the @var{dir-path} argument (an alphanumeric literal or identifier).

Only the lowest-level directory (last) in the specified path can be created --- all others must already exist.  This subroutine will @i{not} behave as a @code{mkdir -p} (Unix) or @code{mkdir /p} (Windows).

The
@registerref{RETURN-CODE} will be set to the return code of the operation; the value will be either 0=Success or 128=failure.
@comment *********************************************************************
@comment ** 8.2.21 CBL_CREATE_FILE                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_CREATE_FILE}
@diagram{CBL_CREATE_FILE Built-In Subroutine,SS-CBL_CREATE_FILE,SS-CBL_CREATE_FILE,None}
The @code{CBL_CREATE_FILE} subroutine creates the new file specified using the file-path argument and opens it for output as a byte-stream file usable by @subpgmref{CBL_WRITE_FILE}.

Arguments 2, 3 and 4 should be coded as the constant values shown.  @code{CBL_CREATE_FILE} is actually a special-case of the @subpgmref{CBL_OPEN_FILE} routine --- see that routine for a description of the meanings of arguments 2, 3 and 4.

A @var{file-handle} (@code{PIC X(4) USAGE COMP-X)} will be returned, for use on any subsequent @subpgmref{CBL_WRITE_FILE} or @subpgmref{CBL_CLOSE_FILE} calls.

The success or failure of the subroutine will be reported back in the
@registerref{RETURN-CODE}, with a value of -1 indicating an invalid argument and a value of 0 indicating success.
@comment *********************************************************************
@comment ** 8.2.22 CBL_DELETE_DIR                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_DELETE_DIR}
@diagram{CBL_DELETE_DIR Built-In Subroutine,SS-CBL_DELETE_DIR,SS-CBL_DELETE_DIR,None}
This subroutine deletes an empty directory.

The only argument --- @var{dir-path} (an alphanumeric literal or identifier) --- is the name of the directory to be deleted.

Only the lowest-level directory (last) in the specified path will be deleted, and that directory must be empty to be deleted.

The @registerref{RETURN-CODE} will be set to the return code of the operation; the value will be either 0=Success or 128=failure.
@comment *********************************************************************
@comment ** 8.2.23 CBL_DELETE_FILE                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_DELETE_FILE}
@diagram{CBL_DELETE_FILE Built-In Subroutine,SS-CBL_DELETE_FILE,SS-CBL_DELETE_FILE,None}
This routine deletes the file specified by the @var{file-path} argument (an alphanumeric literal or identifier) just as if that were done using the @command{rm} (Unix/OSX) or @code{ERASE} (Windows) command.

If the attempt to delete the file fails (for example, it doesn't exist), the
@registerref{RETURN-CODE} will be set to 128; on successful completion it will be set to 0.
@comment *********************************************************************
@comment ** 8.2.24 CBL_EQ                                                   **
@comment *********************************************************************
@page
@newsubsection{CBL_EQ}
@diagram{CBL_EQ Built-In Subroutine,SS-CBL_EQ,SS-CBL_EQ,None}
@multitable @columnfractions 0.3 0.7
@item
@verbatim
 Old    Old    New
Arg 1  Arg 2  Arg 2
 Bit    Bit    Bit
=====  =====  =====
  0      0      1
  0      1      0
  1      0      0
  1      1      1
@end verbatim
@tab This subroutine performs a bit-by-bit comparison between the left-most 8*@var{byte-length} corresponding bits of @var{item-1} and @var{item-2}, storing the resulting bit string into @var{item-2}.  The truth table shown to the left documents the EQ process.
 @* @*
 The @var{item-1} argument may be an alphanumeric literal or a data item and @var{item-2} must be a data item.  The length of both @var{item-1} and @var{item-2} must be at least 8*@var{byte-length}.
@end multitable

The @var{byte-length} argument may be a numeric literal or data item, and must be specified using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-2} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.
@comment *********************************************************************
@comment ** 8.2.25 CBL_ERROR_PROC                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_ERROR_PROC}
@diagram{CBL_ERROR_PROC Built-In Subroutine,SS-CBL_ERROR_PROC,SS-CBL_ERROR_PROC,None}
This routine registers a general error-handling routine.

The @var{function} argument must be a numeric literal or a 32-bit binary data item (@code{USAGE BINARY-LONG}, for example) with a value of 0 or 1.  A value of 0 means that you will be registering (``installing'') an error procedure while a value of 1 indicates you're de-registering (``uninstalling'') a previously-installed error procedure.

The @var{program-pointer} must be a data item with a @syntaxref{USAGE} of @code{PROGRAM-POINTER} containing the address of your error procedure.  This item should be given a value using the @statementref{SET Program-Pointer}.  If the error procedure is written in GnuCOBOL, it must be a subroutine, not a user-defined function.

A success (0) or failure (non-0) result will be passed back in the
@registerref{RETURN-CODE}.

A custom error procedure will trigger when a runtime error condition is encountered.  An error procedure may be registered by a main program or a subprogram, but regardless of from where it was registered, it applies to the overall program compilation group  and will trigger when a runtime error occurs anywhere in the executable program.  If the error procedure was defined by a subprogram, that program must be loaded at the time the error procedure is executed.

An error procedure may be used to take whatever actions might be warranted to display additional information or to gracefully close down work in progress, but it cannot @i{prevent} the termination of program execution; should the error procedure not issue its own @code{STOP RUN}, control will return back to the standard error routine when the error procedure exits.

The code within the handler will be executed and --- once the handler issues a @code{return}, if it was written in C, or an @statementrefalt{EXIT PROGRAM,EXIT} or @statement{GOBACK}, if it was written in GnuCOBOL, the system-standard error handling routine will be executed.

Only one user-defined error procedure may be in effect at any time.

The following is a sample GnuCOBOL program that registers an error procedure.  The output of that program is shown as well.  As as you can see, the error handler's messages appear followed by the standard GnuCOBOL message.

@example
1.     IDENTIFICATION DIVISION.
2.     PROGRAM-ID. DemoERRPROC.
3.     ENVIRONMENT DIVISION.
4.     DATA DIVISION.
5.     WORKING-STORAGE SECTION.
6.     01  Err-Proc-Address            USAGE PROGRAM-POINTER.
7.     PROCEDURE DIVISION.
8.     S1.
9.         DISPLAY 'Program is starting'
10.        SET Err-Proc-Address TO ENTRY 'ErrProc'
11.        CALL 'CBL_ERROR_PROC' USING 0, Err-Proc-Address
12.        CALL 'Tilt' *> THIS DOESN'T EXIST!!!!
13.        DISPLAY 'Program is stopping'
14.        STOP RUN
15.        .
16.    END PROGRAM DemoERRPROC.
17.
18.    IDENTIFICATION DIVISION.
19.    PROGRAM-ID. ErrProc.
20.    PROCEDURE DIVISION.
21.    000-Main.
22.        DISPLAY 'Error: ' FUNCTION EXCEPTION-LOCATION
23.        DISPLAY '       ' FUNCTION EXCEPTION-STATEMENT
24.        DISPLAY '       ' FUNCTION EXCEPTION-FILE
25.        DISPLAY '       ' FUNCTION EXCEPTION-STATUS
26.        DISPLAY '*** Returning to Standard Error Routine ***'
27.        EXIT PROGRAM
28.        .
29.    END PROGRAM ErrProc.
@end example

When executed, this sample program generates the following console output.

@example
E:\Programs\Demos>demoerrproc
Program is starting
Error: DemoERRPROC; S1; 12
       CALL
       00
       EC-PROGRAM-NOT-FOUND
*** Returning to Standard Error Routine ***
DEMOERRPROC.cbl: 27: libcob: Cannot find module 'Tilt'

E:\Programs\Demos>

@end example
@comment *********************************************************************
@comment ** 8.2.26 CBL_EXIT_PROC                                            **
@comment *********************************************************************
@page
@newsubsection{CBL_EXIT_PROC}
@diagram{CBL_EXIT_PROC Built-In Subroutine,SS-CBL_EXIT_PROC,SS-CBL_EXIT_PROC,None}
This routine registers a general exit-handling routine.

The @var{function} argument must be a numeric literal or a 32-bit binary data item (@code{USAGE BINARY-LONG}, for example) with a value of 0 or 1.  A value of 0 means that you will be registering (``installing'') an exit procedure while a value of 1 indicates you're deregistering (``uninstalling'') a previously-installed exit procedure.

The @var{program-pointer} must be a data item with a @syntaxref{USAGE} of @code{PROGRAM-POINTER} containing the address of your exit procedure.

A success (0) or failure (non-0) result will be passed back in the
@registerref{RETURN-CODE}.

An exit procedure, once registered, will trigger whenever a @statementrefalt{STOP RUN,STOP} or a @statementref{GOBACK} is executed anywhere in the program.  The exit procedure may execute whatever code is desired to undertake an orderly shut down of the program.  Once the exit procedure terminates by executing an @statementrefalt{EXIT PROGRAM,EXIT} or a @statement{GOBACK}, the system-standard program termination routine will be executed.

Only one user-defined exit procedure may be in effect at any time.

The following is a sample GnuCOBOL program that registers an exit procedure.  The output of that program is shown as well.

@example
IDENTIFICATION DIVISION.
PROGRAM-ID. demoexitproc.
DATA DIVISION.
WORKING-STORAGE SECTION.
01  Exit-Proc-Address           USAGE PROGRAM-POINTER.
PROCEDURE DIVISION.
000-Register-Exit-Proc.
    SET Exit-Proc-Address TO ENTRY "ExitProc"
    CALL "CBL_EXIT_PROC" USING 0, Exit-Proc-Address
    IF RETURN-CODE NOT = 0
        DISPLAY 'Error: Could not register Exit Procedure'
    END-IF
    .
099-Now-Test-Exit-Proc.
    DISPLAY
        'Executing a STOP RUN...'
    END-DISPLAY
    GOBACK.
END PROGRAM demoexitproc.

IDENTIFICATION DIVISION.
PROGRAM-ID. ExitProc.
DATA DIVISION.
WORKING-STORAGE SECTION.
01  Display-Date                PIC XXXX/XX/XX.
01  Display-Time                PIC XX/XX/XX.
01  Now                         PIC X(8).
01  Today                       PIC X(8).
PROCEDURE DIVISION.
000-Main.
    DISPLAY '*** STOP RUN has been executed ***'
    ACCEPT Today FROM DATE YYYYMMDD
    ACCEPT Now   FROM TIME
    MOVE Today TO Display-Date
    MOVE Now   TO Display-Time
    INSPECT Display-Time REPLACING ALL '/' BY ':'
    DISPLAY '***    ' Display-Date '  ' Display-Time '    ***'
    GOBACK.
END PROGRAM ExitProc.

@end example
@comment *********************************************************************
@comment ** 8.2.27 CBL_FLUSH_FILE                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_FLUSH_FILE}
@diagram{CBL_FLUSH_FILE Built-In Subroutine,SS-CBL_FLUSH_FILE,SS-CBL_FLUSH_FILE,None}
In Micro Focus COBOL, calling this subroutine flushes any as-yet unwritten buffers for the (output) file whose file-handle is specified as the argument to disk.

This routine is non-functional in GnuCOBOL.  It exists only to provide compatibility for applications that may have been developed for Micro Focus COBOL.
@comment *********************************************************************
@comment ** 8.2.28 CBL_GC_FORK                                             **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_FORK}
@diagram{CBL_GC_FORK Built-In Subroute,SS-CBL_GC_FORK,SS-CBL_GC_FORK,None}
CBL_GC_FORK allows you to fork the current COBOL process to a new one.

The current content of the process's storage (including LOCAL-STORAGE) will be identical, any file handles get invalid in the new process, positions and file and record locks are only available to the original process.

This system routine is not available on Windows (exception: GCC on Cygwin).

Parameters: none

Returns: @code{pid} (the child process gets '0' returned, the calling process gets the @code{pid} of the created child).

Negative values are returned for system dependant error codes and -1 if the function is not available on the current system.

@code{CBL_GC_FORK} allows you to fork the current COBOL process to a new one. The
current content of the process' storage (including @code{LOCAL-STORAGE}) will be
identical, any file handles get invalid in the new process, positions and
file / record locks are only available to the original process.
This system routine is not available on Windows (exception: @command{gcc} on Cygwin).
Parameters: none Returns: @code{pid} (the child process gets 0 returned, the calling
process gets the @code{pid} of the created children). Negative values are returned for
system dependant error codes and -1 if the function is not available on the
current system.

@example
 IDENTIFICATION DIVISION.
 PROGRAM-ID. prog.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  CHILD-PID      PIC S9(9) BINARY.
 01  WAIT-STS       PIC S9(9) BINARY.
 PROCEDURE DIVISION.
     CALL     "CBL_GC_FORK" RETURNING CHILD-PID END-CALL
     EVALUATE TRUE
              WHEN CHILD-PID = ZERO
                   PERFORM CHILD-CODE
              WHEN CHILD-PID > ZERO
                   PERFORM PARENT-CODE
              WHEN CHILD-PID = -1
                   DISPLAY 'CBL_GC_FORK is not available on the current'
                   ' system!'
                   PERFORM CHILD-CODE
                   MOVE 0 TO CHILD-PID
                   PERFORM PARENT-CODE
              WHEN OTHER
                   MULTIPLY -1 BY CHILD-PID END-MULTIPLY
                   DISPLAY 'CBL_GC_FORK returned system error: ' CHILD-PID
     END-EVALUATE
     STOP     RUN.
 CHILD-CODE.
     CALL     "C$SLEEP" USING 1 END-CALL
     DISPLAY  "Hello, I am the child"
     MOVE     2 TO RETURN-CODE.
 PARENT-CODE.
     DISPLAY  "Hello, I am the parent"
     CALL     "CBL_GC_WAITPID" USING CHILD-PID RETURNING WAIT-STS
     MOVE     0 TO RETURN-CODE
     EVALUATE TRUE
              WHEN WAIT-STS >= 0
                   DISPLAY 'Child ended with status: ' WAIT-STS
              WHEN WAIT-STS = -1
                   DISPLAY 'CBL_GC_WAITPID is not available on the '
                   'current system!'
              WHEN WAIT-STS < -1
                   MULTIPLY -1 BY WAIT-STS END-MULTIPLY
                   DISPLAY 'CBL_GC_WAITPID returned system error: ' WAIT-STS
     END-EVALUATE.

@end example
@comment *********************************************************************
@comment ** 8.2.29 CBL_GC_GETOPT                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_GETOPT}
@diagram{CBL_GC_GETOPT Built-In Subroutine,SS-CBL_GC_GETOPT,SS-CBL_GC_GETOPT,None}
@code{CBL_GC_GETOPT} adapts the well-known option parser, @code{getopt}, to GnuCOBOL.

The usage of this system routine is described by the following example.

@example
 IDENTIFICATION DIVISION.
 PROGRAM-ID. PROG.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 78  SHORTOPTIONS VALUE "jkl".
 01  LONGOPTIONS.
     05 OPTIONRECORD OCCURS 2 TIMES.
        10  OPTIONNAME   PIC X(25).
        10  HAS-VALUE    PIC 9.
        10  VALPOINT     POINTER VALUE NULL.
        10  RETURN-VALUE PIC X(4).
 01  LONGIND             PIC 99.
 01  LONG-ONLY           PIC 9 VALUE 1.
 01  RETURN-CHAR         PIC X(4).
 01  OPT-VAL             PIC X(10).
 01  COUNTER             PIC 9 VALUE 0.
@end example

We first need to define the necessary fields for @code{getopt}'s @code{shortoptions}, @code{longoptions}, longoption index (@code{longind}), long-only-option (@code{long-only})
and also the fields for return values @code{return-char} and @code{opt-val} (arbitrary
size with trimming, see return codes).

The @code{shortoptions} are written down as an alphanumeric field (i.e., a string
with arbitrary size) as follows:

@example
"ab:c::d"
@end example

This means we want @code{getopt} to look for short options named @samp{a}, @samp{b}, @samp{c} or @samp{d}, require an option value for @samp{b}, and accept an optional one for @samp{c}.

The @code{longoptions} are defined as a table of records with @code{oname}, @code{has-value}, @code{valpoint} and @code{val}.@footnote{Say what? the discussion and code seem to have diverged.}

@code{oname} defines the name of a longoption.
@code{has-value} defines if an option value is demanded (@code{has-val = 1}), optional
(@code{has-val = 2}) or not required (@code{has-val = 0}).

@code{valpoint} is a pointer used to specify an address to save @code{getopt's} return
value to. The pointer is optional. If it is @code{NULL}, @code{getopt} returns a value
as usual. If you use the pointer it has to point to a @code{PIC X(4)} field.
The field val is a @code{PIC X(4)} character which is returned if the longoption
was recognized.

The longoption structure is immutable! You can only vary the number of
records.

Now we have the tools to run @code{CBL_GC_GETOPT} within the procedure division.

@example
PROCEDURE DIVISION.
     MOVE     "version" to OPTIONNAME (1).
     MOVE     0 TO HAS-VALUE (1).
     MOVE     @samp{V} TO RETURN-VALUE (1).
     MOVE     "verbose" TO OPTIONNAME (2).
     MOVE     0 TO HAS-VALUE (2).
     MOVE     @samp{V} TO RETURN-VALUE (2).
     PERFORM  WITH TEST AFTER UNTIL RETURN-CODE = -1
              CALL 'CBL_GC_GETOPT' USING
                  BY REFERENCE SHORTOPTIONS LONGOPTIONS LONGIND
                  BY VALUE LONG-ONLY
                  BY REFERENCE RETURN-CHAR OPT-VAL
              END-CALL
              DISPLAY RETURN-CHAR END-DISPLAY
              DISPLAY OPT-VAL END-DISPLAY
     END-PERFORM
     STOP RUN.
@end example

The example shows how we initialize all parameters and call the routine until
@code{CBL_GC_GETOPT} runs out of options and returns -1.

@noindent
@code{return-char} might contain the following
regular character if an option was recognized:

@table @code
@item ?
undefined or ambiguous option

@item 1
non-option (only if first byte of so is @samp{-})

@item 0
@code{valpoint != NULL} and we are writing the return value to the specified address

@item -1
no more options (or reach the first non-option if first byte of @code{shortoptions} is @samp{+})
@end table

@noindent
The return-codes of @code{CBL_GC_GETOPT} are:

@table @code
@item 1
a non-option (only if first byte of so is @samp{-})

@item 0
@code{valpoint != NULL} and we are writing the return value to the specified address

@item -1
no more options (or reach the first non-option if first byte of @code{shortoptions} is @samp{+})

@item 2
truncated option value in @code{opt-val} (because @code{opt-val} was too small)

@item 3
a regular answer from @code{getopt}
@end table
@comment *********************************************************************
@comment ** 8.2.30 CBL_GC_HOSTED                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_HOSTED}
@diagram{CBL_GC_HOSTED Built-In Subroutine,SS-CBL_GC_HOSTED,SS-CBL_GC_HOSTED,None}

@code{CBL_GC_HOSTED} provides access to the following C hosted variables:
@table @code
@item argc
@code{binary-long by value}

@item argv
@code{pointer to char **}

@item stdin, stdout, stderr
@code{pointer}

@item errno
giving address of @code{errno} in pointer to @code{binary-long}, use @code{based} for more
@end table

Direct access and conditional access to the following variables:

@table @code
@item tzname
@code{pointer to pointer to array of two char pointer}s

@item timezone
C @code{long}, will be seconds west of UTC

@item daylight
C @code{int}, will be 1 during daylight savings
@end table

The system will need @code{HAVE TIMEZONE} defined for these to return anything meaningful.  Attempts made when they are not available will return 1 from @code{CBL GC HOSTED}.

It returns 0 when match, 1 on failure, case matters as does length, "arg"
won't match.

The usage of this system routine is described by the following example.

@example
IDENTIFICATION DIVISION.
 PROGRAM-ID. HOSTED.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  Argc        BINARY-LONG.
 01  Argv        POINTER.
 01  Stdin       POINTER.
 01  Stdout      POINTER.
 01  Stderr      POINTER.
 01  Errno       POINTER.
 01  Err         BINARY-LONG BASED.
 01  Domain      FLOAT-LONG VALUE 3.0.
 01  Tzname      POINTER.
 01  Tznames     POINTER BASED.
     05  Tzs     POINTER OCCURS 2.
 01  Timezone    BINARY-LONG.
 01  Daylight    BINARY-SHORT.
*>
 PROCEDURE DIVISION.
     call     "CBL_GC_HOSTED" using stdin "stdin"
     display  "stdin : " stdin
     call     "feof" using by value stdin
     display  "feof stdin : " return-code
     call     "CBL_GC_HOSTED" using stdout "stdout"
     display  "stdout : " stdout
     call     "fprintf" using by value stdout by content "Hello" & x"0a"
     call     "CBL_GC_HOSTED" using stderr "stderr"
     display  "stderr : " stderr
     call     "fprintf" using by value stderr by content "on err" & x"0a"
     call     "CBL_GC_HOSTED" using argc "argc"
     display  "argc : " argc
     call     "CBL_GC_HOSTED" using argv "argv"
     display  "argv : " argv
     call     "args" using by value argc argv
     call     "CBL_GC_HOSTED" using errno "errno"
     display  "&errno : " errno
     set      address of err to errno
     display  "errno : " err
     call     "acos" using by value domain
     display  "errno after acos(3.0): " err ", EDOM is 33"
     call     "CBL_GC_HOSTED" using argc "arg"
     display  "'arg' lookup : " return-code
     call     "CBL_GC_HOSTED" using null "argc"
     display  "null with argc : " return-code
     display  "argc is still : " argc
*> the following only returns zero if the system has HAVE_TIMEZONE set
     call     "CBL_GC_HOSTED" using daylight "daylight "
     display  "'timezone' lookup : " return-code
     if       return-code not = 0
              display "system doesn't has timezone"
     else
              display "timezone is : " timezone
              call "CBL_GC_HOSTED" using daylight "daylight "
              display "'daylight' lookup : " return-code
              display "daylight is : " daylight
              set environment "TZ" to "PST8PDT"
              call static "tzset" returning omitted on exception
                        continue end-call
              call "CBL_GC_HOSTED" using tzname "tzname"
              display "'tzname' lookup : " return-code
*> tzs(1) will point to z"PST" and tzs(2) to z"PDT"
              if   return-code equal 0 and tzname not equal null then
                   set address of tznames to tzname
                   if   tzs(1) not equal null then
                        display "tzs #1 : " tzs(1)
                   end-if
                   if   tzs(2) not equal null then
                        display "tzs #2 : " tzs(2)
                   end-if
              end-if
     end-if
     goback.
 end program hosted.
@end example

Note that the legacy name of this routine that starts with @code{CBL_OC} is deprecated, as is @code{NANOSLEEP} but will still work. It is recommended that all library routines names starting with @code{CBL_OC} are replaced with @code{CBL_GC} to minimise issues.
@comment *********************************************************************
@comment ** 8.2.31 CBL_GC_NANOSLEEP                                        **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_NANOSLEEP}
@diagram{CBL_GC_NANOSLEEP Built-In Subroutine,SS-CBL_GC_NANOSLEEP,SS-CBL_GC_NANOSLEEP,None}
This subroutine puts the program to sleep for the specified number of nanoseconds.

The effective granularity of @var{nanoseconds-to-sleep} values will depend upon the granularity of the system clock your computer is using and the timing granularity of the operating system that computer is running.

For example, you will not expect to see any difference between values of 1, 100, 500 or 1000, but you should see a difference between values such as 250000000 and 500000000.

The @var{nanoseconds-to-sleep} argument is a numeric literal or data item.

There are one @i{billion} nanoseconds in a second, so if you wanted to put the program to sleep for 1/4 second you'd use a @var{nanoseconds-to-sleep} value of 250000000.

Note that the legacy name of this routine starts with ``CBL_OC'' is deprecated, as is @code{HOSTED}, but will still work. It is recommended that all library routines names starting with ``CBL_OC'' are replaced with ``CBL_GC'' to minimise issues.
@comment *********************************************************************
@comment ** 8.2.32 CBL_GC_PRINTABLE                                        **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_PRINTABLE}
@diagram{CBL_GC_PRINTABLE Built-In Subroutine,SS-CBL_GC_PRINTABLE,SS-CBL_GC_PRINTABLE,None}
The @code{CBL_GC_PRINTABLE} subroutine converts the contents of the data-item specified as the first argument to printable characters.

Those characters that are deemed printable (as defined by the character set used by @var{data-item}) will remain unchanged, while those that are @i{not} printable will be converted to the character specified as the second argument.

If no @var{char} argument is provided, a period (@samp{.}) will be used.

@comment *********************************************************************
@comment ** 8.2.xx CBL_GC_SCR_DUMP                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_SCR_DUMP}
@diagram{CBL_GC_SCR_DUMP Built-In Subroutine,SS-CBL_GC_SCR_DUMP,SS-CBL_GC_SCR_DUMP,None}
Use this subroutine to writes the current contents of the screen to the file named by file-name.
This function prepares the file that will be used with the CBL_GC_SCR_RESTORE function.

The following is a sample GnuCOBOL program that shows how to use the DUMP and RESTORE routines.

@example
        >>SOURCE FORMAT IS FREE
REPLACE ==:BCOL:== BY ==with BACKGROUND-COLOR==
        ==:FCOL:== BY ==FOREGROUND-COLOR==.
IDENTIFICATION DIVISION.
program-id. SCRDUMPRESTORE.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 Black constant as 00.
01 Green constant as 02.
01 wBco        pic 9(02) value Green.
01 wFco        pic 9(02) value Black.
01 wLin        pic 99 value 05.
01 wCol        pic 99 value 10.
01 wScreenName PIC X(256) value space.
01 wScrOk      BINARY-LONG value zero.
01 wScrOk9     pic 99.
01 .
   03 Bmess pic x(30) occurs 20 value space.

PROCEDURE DIVISION.
   *> D I S P L A Y 1st S C R E E N
   move Green to wBco move Black to wFco
   move '111111111111111111111111111111' to Bmess(1)
   move '>>>>>>>>>> MESSAGE 1 <<<<<<<<<' to Bmess(2)
   move '111111111111111111111111111111' to Bmess(3)
   move '111111111111111111111111111111' to Bmess(4)
   move '111111111111111111111111111111' to Bmess(5)
   move '111111111111111111111111111111' to Bmess(6)
   move '------------------------------' to Bmess(7)
   perform DisplayMessage thru DisplayMessageEx
   display 'PRESS ENTER TO DUMP 1st SCREEN ' at line 01 col 01 :BCOL: 07 :FCOL: black
   accept omitted
   *> save 1st screen
   move 'DUMPSCREEN.TMP' & x'00' to wScreenName
   call 'CBL_GC_SCR_DUMP' using by reference wScreenName returning wScrOk end-call
   display '1st SCREEN DUMPED - RETURN CODE IS: ' at line 01 col 01 :BCOL: 07 :FCOL: black
   move wScrOk to wScrOk9
   display wScrOk9 at line 01 col 41 :BCOL: 07 :FCOL: black
   accept omitted
   display 'PRESS ENTER TO DISPLAY 2nd SCREEN          ' at line 01 col 01 :BCOL: 07 :FCOL: black
   accept omitted
   *> D I S P L A Y 2nd S C R E E N
   DISPLAY ' ' AT 0101 WITH ERASE EOS
   move 12 to wLin move 20 to wCol
   move 04 to wBco move Black to wFco
   move '+----------------------------+' to Bmess(1)
   move '|2222222222222222222222222222|' to Bmess(2)
   move '|2222222222222222222222222222|' to Bmess(3)
   move '| MESSAGE 2 |' to Bmess(4)
   move '|2222222222222222222222222222|' to Bmess(5)
   move '|2222222222222222222222222222|' to Bmess(6)
   move '+----------------------------+' to Bmess(7)
   perform DisplayMessage thru DisplayMessageEx
   display 'PRESS ENTER TO RESTORE 1st SCREEN          ' at line 01 col 01 :BCOL: 07 :FCOL: black
   accept omitted
   *> restore 1st screen
   call 'CBL_GC_SCR_RESTORE' using by reference wScreenName returning wScrOk end-call
   CALL 'CBL_DELETE_FILE' USING wScreenName
   display '1st SCREEN RESTORED - RETURN CODE IS: ' at line 01 col 01 :BCOL: 07 :FCOL: black
   move wScrOk to wScrOk9
   display wScrOk9 at line 01 col 41 :BCOL: 07 :FCOL: black
   accept omitted
   STOP RUN.

DisplayMessage.
   display Bmess(1) at line wLin + 1 col wCol :BCOL: wBco :FCOL: wFco
   display Bmess(2) at line wLin + 2 col wCol :BCOL: wBco :FCOL: wFco
   display Bmess(3) at line wLin + 3 col wCol :BCOL: wBco :FCOL: wFco
   display Bmess(4) at line wLin + 4 col wCol :BCOL: wBco :FCOL: wFco
   display Bmess(5) at line wLin + 5 col wCol :BCOL: wBco :FCOL: wFco
   display Bmess(6) at line wLin + 6 col wCol :BCOL: wBco :FCOL: wFco
   display Bmess(7) at line wLin + 7 col wCol :BCOL: wBco :FCOL: wFco
   continue.
DisplayMessageEx. exit.
@end example

@comment *********************************************************************
@comment ** 8.2.xx CBL_GC_SCR_RESTORE                                       **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_SCR_RESTORE}
@diagram{CBL_GC_SCR_RESTORE Built-In Subroutine,SS-CBL_GC_SCR_RESTORE,SS-CBL_GC_SCR_RESTORE,None}

Use this subroutine to restore the screen to the way it looked in the dump file which must have been created using the CBL_GC_SCR_DUMP function.

@comment *********************************************************************
@comment ** 8.2.32B CBL_GC_SET_SCR_SIZE                                     **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_SET_SCR_SIZE}
@diagram{CBL_GC_SET_SCR_SIZE Built-In Subroutine,SS-CBL_GC_SET_SCR_SIZE,SS-CBL_GC_SET_SCR_SIZE,None}
Use this subroutine to set the current console screen size.

When the system is running in a windowed environment, this will be the sizing of the console window in which the program is executing.  When the system is not running a windowing environment, the physical console screen attributes will be set.  In environments such as a Windows console window, where the logical size of the window may far exceed that of the physical console window, the size set will be that for the physical console window.

The size data must be in binary form or any other numeric forms to be accepted.

The following are possibly typical @var{no-of-lines} and @var{no-of-columns} definitions:

@example
01  NO-OF-LINES             USAGE BINARY-CHAR UNSIGNED.
01  NO-OF-COLUMNS           USAGE BINARY-CHAR UNSIGNED.
@end example

This system call will only work if the terminal program used is compatible for such operations and not all are.
@comment *********************************************************************
@comment ** 8.2.33 CBL_GC_WAITPID                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_GC_WAITPID}
@diagram{CBL_GC_WAITPID Built-In Subroutine,SS-CBL_GC_WAITPID,SS-CBL_GC_WAITPID,None}

@code{CBL_GC_WAITPID} allows you to wait until another system process ended.

Additionally you can check the process's return code.

Parameters: none

Returns: function-status / child-status

Negative values are returned for system dependant error codes and -1 if the function is not available on the current system.

@example
CALL     "CBL_GC_WAITPID" USING CHILD-PID RETURNING WAIT-STS
MOVE     0 TO RETURN-CODE
DISPLAY  'CBL_GC_WAITPID ended with status: ' WAIT-STS
@end example
@comment *********************************************************************
@comment ** 8.2.34 CBL_GET_CSR_POS                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_GET_CSR_POS}
@diagram{CBL_GET_CSR_POS Built-In Subroutine,SS-CBL_GET_CSR_POS,SS-CBL_GET_CSR_POS,None}
This subroutine will retrieve the current cursor location on the screen, returning a 2-byte value into the supplied @var{cursor-locn-buffer}.  The first byte of @var{cursor-locn-buffer} will receive the current line (row) location while the second receives the current column location.

The returned location data will be in binary form, and will be based upon starting values of 0, meaning that if the cursor is located at line 15, column 12 at the time this routine is called, a value of (14,11) will be returned.

The following is a typical @var{cursor-locn-buffer} definition:

@example
01  CURSOR-LOCN-BUFFER.
    05 CURSOR-LINE          USAGE BINARY-CHAR UNSIGNED.
    05 CURSOR-COLUMN        USAGE BINARY-CHAR UNSIGNED.
@end example

Values of 1 (Line) and 1 (column) will be returned if GnuCOBOL was not generated to include screen I/O.
@comment *********************************************************************
@comment ** 8.2.35 CBL_GET_CURRENT_DIR                                      **
@comment *********************************************************************
@page
@newsubsection{CBL_GET_CURRENT_DIR}
@diagram{CBL_GET_CURRENT_DIR Built-In Subroutine,SS-CBL_GET_CURR_DIR,SS-CBL_GET_CURR_DIR,None}
This retrieves the fully-qualified pathname of the current directory, saving up to @var{length} characters of that name into @var{buffer}.

The first argument is unused, but must be specified.  It must be specified @syntaxrefalt{BY VALUE,CALL}.

The @var{length} argument must be specified @code{BY VALUE}.
The @var{buffer} argument must be specified @code{BY REFERENCE}.

The value specified for the @var{length} argument (a numeric literal or data item) should not exceed the actual length of @var{buffer} argument.

If the value specified for the @var{length} argument is LESS THAN the actual length of @var{buffer} argument, the current directory path will be left-justified and space filled within the first @var{length} bytes of @var{buffer} --- any bytes in @var{buffer} after that point will be unchanged.

If the routine is successful, a value of 0 will be returned to the
@registerref{RETURN-CODE}.  If the routine failed because of a problem with an argument (such as a negative or 0 length), a value of 128 will result.  Finally, if the 1@sup{st} argument value is anything but zero, the routine will fail with a 129 value.
@comment *********************************************************************
@comment ** 8.2.36 CBL_GET_SCR_SIZE                                         **
@comment *********************************************************************
@page
@newsubsection{CBL_GET_SCR_SIZE}
@diagram{CBL_GET_SCR_SIZE Built-In Subroutine,SS-CBL_GET_SCR_SIZE,SS-CBL_GET_SCR_SIZE,None}
Use this subroutine to retrieve the current console screen size.

When the system is running in a windowed environment, this will be the sizing of the console window in which the program is executing.  When the system is not running a windowing environment, the physical console screen attributes will be returned.  In environments such as a Windows console window, where the logical size of the window may far exceed that of the physical console window, the size returned will be that of the physical console window.  Two one-byte values will be returned --- the first will be the current number of lines (rows) while the second will be the number of columns.

The returned size data will be in binary form.

The following are typical @var{no-of-lines} and @var{no-of-columns} definitions:

@example
01  NO-OF-LINES             USAGE BINARY-CHAR UNSIGNED.
01  NO-OF-COLUMNS           USAGE BINARY-CHAR UNSIGNED.
@end example

GnuCOBOL run-time screen management must have been initialized prior to CALLing this routine in order to receive meaningful values.  This means that a @statementref{DISPLAY data-item} or a @statementref{ACCEPT data-item} must have been executed prior to executing the @statement{CALL}.

Zero values will be returned if the screen has not been initialized and values of 24 (lines) and 80 (columns) will be returned if GnuCOBOL was not generated to include screen I/O.

Maximum values for BINARY-CHAR is 255 and any excess to this will be wrong so if lines or columns exceed 255, results will not be valid.
@comment *********************************************************************
@comment ** 8.2.37 CBL_IMP                                                  **
@comment *********************************************************************
@page
@newsubsection{CBL_IMP}
@diagram{CBL_IMP Built-In Subroutine,SS-CBL_IMP,SS-CBL_IMP,None}
@multitable @columnfractions 0.3 0.7
@item
@verbatim
 Old    Old    New
Arg 1  Arg 2  Arg 2
 Bit    Bit    Bit
=====  =====  =====
  0      0      1
  0      1      1
  1      0      0
  1      1      1
@end verbatim
@tab This subroutine performs a bit-by-bit logical @i{implies} process between the left-most 8*@var{byte-length} corresponding bits of @var{item-1} and @var{item-2}, storing the resulting bit string into @var{item-2}.  The truth table shown to the left documents the @code{IMP} process.
 @* @* The @var{item-1} argument may be an alphanumeric literal or a data item and @var{item-2} must be a data item.  The length of both @var{item-1} and @var{item-2} must be at least 8*@var{byte-length}.
@end multitable

The @var{byte-length} argument may be a numeric literal or data item, and must be specified using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-2} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.
@comment *********************************************************************
@comment ** 8.2.38 CBL_NIMP                                                 **
@comment *********************************************************************
@page
@newsubsection{CBL_NIMP}
@diagram{CBL_NIMP Built-In Subroutine,SS-CBL_NIMP,SS-CBL_NIMP,None}
@multitable @columnfractions 0.3 0.7
@item
@verbatim
 Old    Old    New
Arg 1  Arg 2  Arg 2
 Bit    Bit    Bit
=====  =====  =====
  0      0      0
  0      1      0
  1      0      1
  1      1      0
@end verbatim
@tab This subroutine performs the @i{negation} of a bit-by-bit logical @i{implies} process between the left-most 8*@var{byte-length} corresponding bits of @var{item-1} and @var{item-2}, storing the resulting bit string into @var{item-2}.  The truth table shown to the left documents the @code{NIMP} process.
 @* @* The @var{item-1} argument may be an alphanumeric literal or a data item and @var{item-2} must be a data item.  The length of both @var{item-1} and @var{item-2} must be at least 8*@var{byte-length}.
@end multitable

The @var{byte-length} argument may be a numeric literal or data item, and must be specified using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-2} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.
@comment *********************************************************************
@comment ** 8.2.39 CBL_NOR                                                  **
@comment *********************************************************************
@page
@newsubsection{CBL_NOR}
@diagram{CBL_NOR Built-In Subroutine,SS-CBL_NOR,SS-CBL_NOR,None}
@multitable @columnfractions 0.3 0.7
@item
@verbatim
 Old    Old    New
Arg 1  Arg 2  Arg 2
 Bit    Bit    Bit
=====  =====  =====
  0      0      1
  0      1      0
  1      0      0
  1      1      0
@end verbatim
@tab This subroutine performs the negation of a bit-by-bit logical @i{or'} process between the left-most 8*@var{byte-length} corresponding bits of @var{item-1} and @var{item-2}, storing the resulting bit string into @var{item-2}.  The truth table shown to the left documents the @code{NOR} process.
 @* @* The @var{item-1} argument may be an alphanumeric literal or a data item and @var{item-2} must be a data item.  The length of both @var{item-1} and @var{item-2} must be at least 8*@var{byte-length}.
@end multitable

The @var{byte-length} argument may be a numeric literal or data item, and must be specified using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-2} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.
@comment *********************************************************************
@comment ** 8.2.40 CBL_NOT                                                  **
@comment *********************************************************************
@page
@newsubsection{CBL_NOT}
@diagram{CBL_NOT Built-In Subroutine,SS-CBL_NOT,SS-CBL_NOT,None}
This subroutine ``flips'' the left-most 8*@var{byte-length} bits of @var{item-1}, changing 0 bits to 1, and 1 bits to 0.  The changes are made directly in @var{item-1}.

The @var{item-1} argument must be a data item.  The length of @var{item-1} must be at least 8*@var{byte-length}.

The @var{byte-length} argument may be a numeric literal or data item, and must be passed using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-1} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.
@comment *********************************************************************
@comment ** 8.2.40B CBL_OC_GETOPT                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_OC_GETOPT}
@diagram{CBL_GC_GETOPT Built-In Subroutine,SS-CBL_GC_GETOPT,SS-CBL_GC_GETOPT,None}
Use function CBL_GC_GETOPT instead as redundant and will be removed.

@comment *********************************************************************
@comment ** 8.2.40C CBL_OC_HOSTED                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_OC_HOSTED}
@diagram{CBL_GC_HOSTED Built-In Subroutine,SS-CBL_GC_HOSTED,SS-CBL_GC_HOSTED,None}
Use function CBL_GC_HOSTED instead as redundant and will be removed.

@comment *********************************************************************
@comment ** 8.2.40D CBL_OC_NANOSLEEP                                        **
@comment *********************************************************************
@page
@newsubsection{CBL_OC_NANOSLEEP}
@diagram{CBL_GC_NANOSLEEP Built-In Subroutine,SS-CBL_GC_NANOSLEEP,SS-CBL_GC_NANOSLEEP,None}
Use function CBL_GC_NANOSLEEP instead as redundant and will be removed.

@comment *********************************************************************
@comment ** 8.2.42 CBL_OPEN_FILE                                            **
@comment *********************************************************************
@page
@newsubsection{CBL_OPEN_FILE}
@diagram{CBL_OPEN_FILE Built-In Subroutine,SS-CBL_OPEN_FILE,SS-CBL_OPEN_FILE,None}
This routine opens an existing file for use as a byte-stream file usable by CBL_WRITE_FILE or CBL_READ_FILE.

The @var{file-path} argument  is an alphanumeric literal or data-item.

The @var{access-mode} argument is a numeric literal or data item with a @code{PIC X USAGE COMP-X} (or @code{USAGE BINARY-CHAR}) definition; it specifies how you wish to use the file, as follows:

@table @code
@item 1
input (read-only)

@item 2
output (write-only)

@item 3
input and/or output
@end table

The third and fourth arguments would specify a locking mode and device specification, respectively, but they're not implemented in GnuCOBOL (currently, at least) --- just specify each as 0.

The final argument (@var{handle}) is a @code{PIC X(4) USAGE COMP-X} item that will receive the handle to the file.  That handle is used on all other byte-stream functions to reference this specific file.

A
@registerref{RETURN-CODE} value of -1 indicates an invalid argument, while a value of 0 indicates success.  A value of 35 means the file does not exist.

An example of the use of OPEN, CLOSE, READ etc., can be found in Contribs program printcbl.cbl which is basically also in cobxref.cbl as program 3.

@comment *********************************************************************
@comment ** 8.2.43 CBL_OR                                                   **
@comment *********************************************************************
@page
@newsubsection{CBL_OR}
@diagram{CBL_OR Built-In Subroutine,SS-CBL_OR,SS-CBL_OR,None}
@multitable @columnfractions 0.3 0.7
@item
@verbatim
 Old    Old    New
Arg 1  Arg 2  Arg 2
 Bit    Bit    Bit
=====  =====  =====
  0      0      0
  0      1      1
  1      0      1
  1      1      1
@end verbatim
@tab This subroutine performs a bit-by-bit logical @i{or} process between the left-most 8*@var{byte-length} corresponding bits of @var{item-1} and @var{item-2}, storing the resulting bit string into @var{item-2}.  The truth table shown to the left documents the @code{OR} process.
 @* @* The @var{item-1} argument may be an alphanumeric literal or a data item and @var{item-2} must be a data item.  The length of both @var{item-1} and @var{item-2} must be at least 8*@var{byte-length}.
@end multitable

The @var{byte-length} argument may be a numeric literal or data item, and must be specified using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-2} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.
@comment *********************************************************************
@comment ** 8.2.44 CBL_READ_FILE                                            **
@comment *********************************************************************
@page
@newsubsection{CBL_READ_FILE}
@diagram{CBL_READ_FILE Built-In Subroutine,SS-CBL_READ_FILE,SS-CBL_READ_FILE,None}
This routine reads @var{nbytes} of data starting at byte number @var{offset} from the byte-stream file defined by @var{handle} into @var{buffer}.

The @var{handle} argument (@code{PIC X(4) USAGE COMP-X}) must have been populated by a prior call to @subpgmref{CBL_OPEN_FILE}.

The @var{offset} argument (@code{PIC X(8) USAGE COMP-X}) defines the location in the file of the first byte to be read.  The first byte of a file is byte offset 0 and MUST be preset to zero for first use.

The @var{nbytes} argument (@code{PIC X(4) USAGE COMP-X}) specifies how many bytes (maximum) will be read.
If the @var{flag} argument is specified as 128, the size of the file (in bytes) will be returned into the file offset argument (argument 2) upon completion.  Not all operating system/GnuCOBOL environments may be able to retrieve file sizes  in such cases, a value of zero will be returned.  The only other valid value for flags is 0.  This argument may be specified either as a numeric literal or as a @code{PIC X USAGE COMP-X} data item.

Upon completion, the
@registerref{RETURN-CODE} will be set to 0 if the read was successful or to 10 if an "end-of-file" condition occurred.  If a value of -1 is returned, a problem was identified with the subroutine arguments.
@comment *********************************************************************
@comment ** 8.2.45 CBL_READ_KBD_CHAR                                        **
@comment *********************************************************************
@page
@newsubsection{CBL_READ_KBD_CHAR}
@diagram{CBL_READ_KBD_CHAR Build-In Subroutine,SS-CBL_READ_KBD_CHAR,SS-CBL_READ_KBD_CHAR,None}
Waits until a character is typed from the terminal and then read it with no echo.

Parameters: char @code{PIC X}. Receives the character that was typed, in @sc{ASCII}.

status-code @code{PIC XX COMP-5}.

If @code{RETURNING} is not used the @code{RETURN-CODE} special register receives the status-code where zero is success and non-zero it is not.

[Above information taken from MF WB manual].
@comment *********************************************************************
@comment ** 8.2.46 CBL_RENAME_FILE                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_RENAME_FILE}
@diagram{CBL_RENAME_FILE Built-In Subroutine,SS-CBL_RENAME_FILE,SS-CBL_RENAME_FILE,None}
You may use this subroutine to rename a file.

The file specified by @var{old-file-path} will be ``renamed'' to the name specified as @var{new-file-path}.  Each argument may be an alphanumeric literal or data item.

Despite what the name of this routine might make you believe, this routine is more than just a simple ``rename'' --- it will actually move the file supplied as the 1@sup{st} argument to the file specified as the 2nd argument.  Think of it as a two-step sequence, first copying the @var{old-file-path} file to the @var{new-file-path} file and then a second step where the @var{old-file-path} is deleted.

If the attempt to move the file fails (for example, it doesn't exist), the
@registerref{RETURN-CODE} will be set to 128; on successful completion it will be set to 0.

@comment *********************************************************************
@comment ** 8.2.46B CBL_RUNTIME_ERROR                                       **
@comment *********************************************************************
@page
@newsubsection{CBL_RUNTIME_ERROR}
@diagram{CBL_RUNTIME_ERROR Built-In Subroutine,SS-CBL_RUNTIME_ERROR,SS-CBL_RUNTIME_ERROR,None}
Text to be added...

@comment *********************************************************************
@comment ** 8.2.47 CBL_SET_CSR_POS                                          **
@comment *********************************************************************
@page
@newsubsection{CBL_SET_CSR_POS}
@diagram{CBL_SET_CSR_POS Build-In Subroutine,SS-CBL_SET_CSR_POS,SS-CBL_SET_CSR_POS,None}
Set current cursor position on terminal.

This subroutine will set the cursor location on the screen, using a 2-byte value into the supplied @var{cursor-locn-buffer}.  The first byte of @var{cursor-locn-buffer} is for the line (row) location while the second sets the column location.

The two byte data block must be in binary form, and will be based upon starting values of 0, meaning that if the routine is called with a value of (14,11) cursor will be located at line 15, column 12.

The following is a typical @var{cursor-locn-buffer} definition:

@example
01  CURSOR-LOCN-BUFFER.
    05 CURSOR-LINE          USAGE BINARY-CHAR UNSIGNED.
    05 CURSOR-COLUMN        USAGE BINARY-CHAR UNSIGNED.
@end example

@comment *********************************************************************
@comment ** 8.2.49 CBL_TOLOWER                                              **
@comment *********************************************************************
@page
@newsubsection{CBL_TOLOWER}
@diagram{CBL_TOLOWER Built-In Subroutine,SS-CBL_TOLOWER,SS-CBL_TOLOWER,None}
This routine will convert the first @var{convert-length} (a numeric literal or data item) characters of @var{data-item} (an alpha-numeric identifier) to lower-case.

The @var{convert-length} argument must be specified @syntaxrefalt{BY VALUE,CALL}.  It specifies how many (leading) characters in data-item will be converted --- any characters after that will remain unchanged.

If @var{convert-length} is negative or zero, no conversion will be performed.
@comment *********************************************************************
@comment ** 8.2.50 CBL_TOUPPER                                              **
@comment *********************************************************************
@page
@newsubsection{CBL_TOUPPER}
@diagram{CBL_TOUPPER Built-In Subroutine,SS-CBL_TOUPPER,SS-CBL_TOUPPER,None}
This routine will convert the first @var{convert-length} (a numeric literal or data item) characters of @var{data-item} (an alpha-numeric identifier) to upper-case.

The @var{convert-length} argument must be specified @syntaxrefalt{BY VALUE,CALL}.  It specifies how many (leading) characters in data-item will be converted --- any characters after that will remain unchanged.

If @var{convert-length} is negative or zero, no conversion will be performed.
@comment *********************************************************************
@comment ** 8.2.51 CBL_WRITE_FILE                                           **
@comment *********************************************************************
@page
@newsubsection{CBL_WRITE_FILE}
@diagram{CBL_WRITE_FILE Built-In Subroutine,SS-CBL_WRITE_FILE,SS-CBL_WRITE_FILE,None}
This routine writes @var{nbytes} of data from @var{buffer} to the byte-stream file defined by @var{handle} starting at byte number @var{offset} within the file.

The @var{handle} argument (@code{PIC X(4) USAGE COMP-X}) must have been populated by a prior call to CBL_OPEN_FILE.
The offset argument (@code{PIC X(4) USAGE COMP-X}) defines the location in the file of the first byte to be written to.  The first byte of a file is byte offset 0.

The @var{nbytes} argument (@code{PIC X(4) USAGE COMP-X}) specifies how many bytes (maximum) will be written.

Currently, the only allowable value for the flags argument is 0.  This argument may be specified either as a numeric literal or as a @code{PIC X(1) USAGE COMP-X} data item.

Upon completion, the
@registerref{RETURN-CODE} will be set to 0 if the write was successful or to 30 if an I/O error condition occurred.  If a value of -1 is returned, a problem was identified with the subroutine arguments.
@comment *********************************************************************
@comment ** 8.2.52 CBL_XOR                                                  **
@comment *********************************************************************
@page
@newsubsection{CBL_XOR}
@diagram{CBL_XOR Built-In Subroutine,SS-CBL_XOR,SS-CBL_XOR,None}
@multitable @columnfractions 0.3 0.7
@item
@verbatim
 Old    Old    New
Arg 1  Arg 2  Arg 2
 Bit    Bit    Bit
=====  =====  =====
  0      0      0
  0      1      1
  1      0      1
  1      1      0
@end verbatim
@tab This subroutine performs a bit-by-bit logical @i{exclusive or} process between the left-most 8*@var{byte-length} corresponding bits of @var{item-1} and @var{item-2}, storing the resulting bit string into @var{item-2}.  The truth table shown to the left documents the @code{XOR} process. @* @* The @var{item-1} argument may be an alphanumeric literal or a data item and @var{item-2} must be a data item.  The length of both @var{item-1} and @var{item-2} must be at least 8*@var{byte-length}.
@end multitable

The @var{byte-length} argument may be a numeric literal or data item, and must be specified using @syntaxrefalt{BY VALUE,CALL}.

Any bits in @var{item-2} after the 8*@var{byte-length} point will be unaffected.

A result of zero will be passed back in the
@registerref{RETURN-CODE}.

@comment *********************************************************************
@comment ** 8.2.53 EXTFH                                                    **
@comment *********************************************************************
@page
@newsubsection{EXTFH}
@diagram{EXTFH Built-In Subroutine,SS-EXTFH,SS-EXTFH,None}
The use of the EXTFH function is summarized as follows.

The Callable File Handler (EXTFH), is primarily an API for file I-O and a kind of an industry standard.
It can be used to access to GnuCOBOL files by some other programming languages  (like C, Visual Basic, Python ...) on several platforms.
It also allows to use GnuCOBOL LIBCOB's fileio routines from other compilers (AcuCobol, MicroFocus, IBM Cobol ...) and vice versa (which of course needs a license). This can also help during migration phases.
The EXTFH API also provides features such as: Record locking, Data compression, New Index creation, Relative Byte Address,  ...
You can also write your own file handler and run it in place of EXTFH, when it conforms to the call interface defined in this chapter.

The Callable File Handler handles all file organizations: sequential, line sequential, relative and indexed.
The file operations performed by EXTFH fit into the following categories: Open files, Read and Write records, Move through records, Delete records, File and records locking, Unlocking records, Close files.


GnuCOBOL EXTFH file handling include support a callable EXTFH interface also provided by several compilers including Micro Focus
The GnuCOBOL external file handler can be directly invoked from COBOL too, using CALL "EXTFH".
EXTFH is a "tool" for creating a "pipe" between disparate I-O system interfacing or creating utilities where file characteristics
(record length, keypos, data set name (file name)  are not known until execution.
For instance you can use EXTFH to implement "IDCAMS like" file utility (similar to IDCAMS for VSAM mainframe datasets).
This also allows GnuCOBOL users to insert an external file handler while retaining all the normal COBOL I/O functions with a possible callback to libcob.
To have the compiled program call yourfh() for file I/O use: cobc -fcallfh=yourfh
In turn yourfh() may call EXTFH() to use I/O functions from GnuCOBOL.
Support for the EXTFH includes support for FH--FCD and FH--KEYDEF, fixed use of different attributes and changing pointers and now supports - for 32-bit builds - an internal conversion between FCD2 and FCD3 for cases where existing programs are coded with FCD2

@verbatim
Some sample use of EXTFH.
a. Write a GnuCOBOL program that accepts as parameters: file type (sequential,
   relative indexed etc ...), number and length of keys, both the primary and any
   alternative keys.
   This GnuCOBOL program, always the same, will be able to create various types of
   files (sequential, relative, indexed ) with a primary key that can be 5 bytes or
   20 or 30 bytes long, with a record length of 100 bytes or 1000 bytes etc, etc, ..
   simply by accepting parameters with one or many ACCEPT statements ... with as
   an example an open output and a close.
b. Allow a Microfocus COBOL (or AcuCOBOL or RM Cobol or Realia COBOL ...) program
   to read an indexed file that was created with a GnuCOBOL program that used BDB
   or VB-ISAM.
Conversely, read from a GnuCOBOL program an indexed file created by a Microfocus
COBOL program with its proprietary system for example IDX4.
This would require that EXTFH be available in the non GnuCOBOL environment.
c. Generate file io statistics. Each I-O operation can record the number of times a
read, write, delete, open - any file I-O statement.
You could record the start of the call to EXTFH, the return from EXTFH - even the
before and after image of the record processed.
You can implement recording stats from the file activity in your EXTFH services.
The intent to provide operation reporting performance / consumption.
Each I-O operation can record the number of times a read, write, delete, open - any
file I-O statement. You could record the start of the call to EXTFH, the return
from EXTFH - even the before and after image of the record processed.
If you use EXTFH you can gather the statistics and only need to recompile the
program - no change in them needed at all.
You can create a new EXTFH module named "myiostats.cbl" that uses the "xfhfcd3.cpy"
for its LINKAGE and to get the 78 values, which only counts the statistics and
possibly write them out when a CLOSE was requested; filter in that program as
you like (for example for the filename, filetype, ...) before adding to the
statistics; end with CALL "EXTFH" USING fcd-record to let libcob do the actual
file io; compile with with cobc -c myiostats.cbl.

Compile your programs with an additional -fcallfh=myiostats myiostats.o to route
all io through them
Consequently it does not affect the GnuCOBOL's EXTFH.
To use EXTFH in any COBOL environment that needs to provide an option like GnuCOBOL
has with -fcallfh or MF with its CALLFH directive (GnuCOBOL supports that when
included in source files as well).
To be able to call another COBOL's EXTFH entry point from a GnuCOBOL module to
allow the io be routed to that, this environment also needs this entry point and
a way to call it directly or via a "to GnuCOBOL foreign" COBOL module that calls
into that. So this part means that you can only use it from a GnuCOBOL module if
there's some way to access it.
d. You could read from a Python or Visual Basic program etc etc ... an indexed
file written with the GnuCOBOL program using BDB or VB-ISAM as along as you use
the applicable structure to call into EXTFH (the C structure is part of
libcob / common.h).

The COBOL syntax defining a file (the SELECT and the FD statement) cause the
compiler to create the data areas needed to define the file and to hold the file
records.
EXTFH uses 4 data areas during file operations: File Control Description (FCD),
Record Area, Filename Area, Key Definition Area.

To use the EXTFH you must follow these steps:
a. Allocate data areas for the File Control Description (FCD), Record Area,
   Filename Area and Key Definition Area (indexed files only).
b. Initialize all the data areas to binary zeros to ensure that EXTFH does
   not receive invalid values.
c. Fill in the fields in the Record Area, Filename Area, and Key Definition
   Area that are needed for the selected Operation Code.
d. Set the pointers in the File Control Description to point at Record Area,
   Filename Area and Key Definition Area (indexed files only)
e. Select the Operation Code to decide which file operation to be performed
f. Fill in the fields in the FCD that are needed for the selected Operation
   Code.
g. Call the File Handler.
h. Determine the success of the file I/O operation by checking the returned
   File Status
i. Process any data in the the Record Area and the FCD output fields

Use the following syntax to call the File Handler from COBOL:
call "EXTFH" using opcode fcd
where opcode is a PIC X(2) COMP-X field specifying the operation code.


FILE CONTROL DESCRIPTION (FCD).
==============================

The FCD  area contains information about the file in use, set the appropriate
fields in the FCD before calling EXTFH.
After performing the specified operation, EXTFH completes the appropriate
fields in the FCD before passing control back to the calling program.
All unused or reserved areas of the FCD must be set to binary zeros.

The FCD used on the call to open a file must be the one used on all subsequent
calls to that file.
The supplied GnuCOBOL copyfile xfhfcd3.cpy contains a COBOL definition of
the FCD.

01 FCD-AREA.
   COPY 'xfhfcd3.cpy'.

The structure of the FCD is defined below, bit 7 is always the leftmost bit.
When using COBOL, this and the following pointers are USAGE POINTER items,
set using a statement of the form:
set pointer to address of data item where: pointer is one of these fields,
data item is the relevant data area.
Offset and size are in bytes.

OFFSET SIZE DESCRIPTION
------ ---- --------------------------------------------------------------
 0     2    File Status Code. See also offsets 6 and 33.
            After every operation except a COMMIT or ROLLBACK operation,
            this field is updated with a standard file status value telling
            you the status of the operation.
 2     3    Reserved. Must be set to binary zeros.
 5     1    File organization: 0 Line sequential, 1 Sequential, 2 Indexed,
            3 Relative
 6     1    User Status and Access Mode indicators.
            User Status is indicated by bit 7. The bit is set if you have
            defined a file status.
            Defining a file status can affect how some operations (such as
            RETRYLOCK) are performed.
            When calling EXTFH directly, this bit should be set.
            however, file status is obtained directly from offset 0.
            Access mode is indicated by bits 6-0:
            0 - Sequential access mode, 4 - Random access mode,8 - Dynamic
            access mode.
 7     1    Open mode: you must set this field to 128 before opening a file.
            This field is written to by the Callable File Handler so that,
            on return, it indicates the open mode of the file: 0 INPUT,
            1 OUTPUT, 2 I/O, 3 EXTEND, 128 File is closed.
 8     3    Reserved. Must be set to binary zeros.
11     2    Length of filename.
13     8    Relative byte address.
            This field is used instead of the 4 byte field at offset 72 if
            bit 4 of byte 93 is set.
21     3    Reserved. Must be set to binary zeros.
24     1    Lock mode flags for shareable files:
            Bit 7 - Lock on multiple records
            Bit 6 - WRITELOCK directive enabled
            Bit 5 - RETRYOPEN
            Bit 4 - SKIPLOCK directive enabled
            Bit 3 - RETRYLOCK directive enabled
            Bit 2 - Lock mode MANUAL
            Bit 1 - Lock mode AUTOMATIC
            Bit 0 - Lock mode EXCLUSIVE
25      1   Other flags:
            Bit 7 - OPTIONAL file (OPEN INPUT)
            Bit 6 - Reserved
            Bit 5 - Not OPTIONAL (OPEN I/O and EXTEND)
            Bit 4 - Filename is EXTERNAL
            Bit 3 - Reserved
            Bit 2 - NODETECTLOCK directive enabled
            Bit 1 - Multiple Reel file (Record Sequential)
            Bit 0 - Line Advancing file (Record Sequential).
26      2   Reserved. Must be set to binary zeros.
28      4   File handle
32      1   Reserved. Must be set to binary zeros.
33      1   File status type. See also offsets 0 and 6:
            Bit 7 Set for ANSI'85 COBOL file status by default, otherwise
            ANSI'74 COBOL file status
            Bits 6-3 Reserved
            Bit 2 Enables tab insertion for line sequential files
            Bit 1 Enables null insertion for line sequential files
            Bit 0 Reserved.
            Bits 1 and 2 are set/unset by EXTFH at open time,
            depending on the settings of the N and T RTS switches. These
            bits can be set/unset after an OPEN operation to override the
            N and T RTS switches.
34      1   File format:
            0 - Operating system default. C-ISAM on UNIX,
                same as specifying a value of 3 on DOS, Windows and OS/2.
            1 - C-ISAM format
            2 - LEVEL II COBOL format
            3 - Micro Focus COBOL format
            4 - IDXFORMAT"4" format
            All platforms except UNIX:
            5 - Btrieve format with ANSI emulation
            6 - Btrieve format without ANSI emulation
            All platforms:
            8 - IDXFORMAT"8" format
            11 - Sequential files only. Mainframe print file.
            14 - Heap file
35      3   Reserved. Must be set to binary zeros.
38      2   Maximum record length (in bytes).
40      3   Reserved. Must be set to binary zeros.
            32-bit:
42      1   File descriptor. Returned for line sequential fixed length
            sequential and relative files and C-ISAM files on UNIX.
43      4   Relative record number.
47      1   Recording mode: Bits 7-1 Reserved,Bit 0: 0 - Fixed, 1 - Variable
48      2   Current record length (in bytes).
50      2   Minimum record length (in bytes).
52      2   Key-of-Reference (indexed files).
            This field identifies the Key-of-Reference, used for random READ
            operations.
            To specify the prime key, set this field to zero.
            For example, to specify the first alternate key defined, use a
            value 1; the second alternate key defined use value 2.
            Or:
            Line count (Line Sequential files).
            This field specifies the number of lines to skip when writing a
            file. For example:
            WRITE AFTER ADVANCING line-count LINES
54      2   Effective key length.
            When using a START operation on indexed files, you can specify
            only the leading part of a key instead of the whole key. You
            should set this field to the number of bytes to be used in the
            comparison.It must be > than zero and no bigger than the key
            being used.
56      4   Pointer to the record area.
60      4   Pointer to the filename area.
64      4   Pointer to key definition block.
68      4   Reserved. Must be set to binary zeros.
72      4   Relative byte address. Unless bit 4 of byte 93 is set,
            in which case the relative byte address is held at offset 13
76      2   Reserved. Must be set to binary zeros.
78      1   Data compression routine indicator:
            0 = No compression
            1-127 = Micro Focus data compression routine number (1=CBLDC001)
            128-255 = User-defined data compression routine number
            (128=USRDC128)
79      4   Fileshare V2 session-id.
83      2   Fileshare V2 file-id.
85      6   Reserved. Must be set to binary zeros.
91      1   Bit 7- Interlanguage locking (LOCKTYPE 1), Bits 6-0- Reserved.
92      1   Fileshare V2 flags: Bit 7 - Transaction logging; Bits 6-0 -
            Reserved.
93      1   Configuration flags:
            Bit 7  - WRITETHRU
            Bit 6  - Use Relative Byte Address
            Bit 5  - Update current record pointer
            Bit 4  - Use offset 13 for relative byte address, instead of
                     offset 72
            Bits 3-2  - Reserved
            Bit 1  - Check COBFSTATCONV
            Bit 0  - Set if IGNORELOCK required.
94      1   Reserved. Must be set to binary zeros.
95      1   Bit 7- Use EBCDIC collating sequence
            Bit 6- Set if file is to have WRITE AFTER ADVANCING
            Bit 5- Set if file is to have WRITE BEFORE ADVANCING
            Bit 4- ADV byte
            Bit 3- Ignore minimum length checking on variable-length files
            Bits 2-0- Reserved.
96      1   Index cache size.
97      1   Index cache area.
98      2   Reserved.

RECORD AREA
===========

The record area is an area into which records are read, and from which records
are (re)written.
The size of the record area must be four bytes larger than the largest record in
the file. The record length fields in the FCD always contain true record lengths,
not the length of the record area.
(See offsets 38, 48 and 50 in the FCD.)
The following GnuCOBOL sample code shows how the FCD is set up to point to the
record area:

01 wRECORD-AREA      PIC X(90).
   ...
   SET FCD-RECORD-ADDRESS TO ADDRESS OF wRECORD-AREA
   ...

FILENAME AREA
=============

The filename area contains the name of the file in use. It can contain drive
and/or path information as well as the actual name of the file.
If the actual name is shorter than the length of the buffer specified in the FCD,
it must be terminated by a space.
This data area must be filled before the first operation on the file.
The following GnuCOBOL sample code shows how the FCD is set up to point to the
filename area:

01 wFILENAME-AREA    PIC X(60) VALUE "file001.dat".
   ...
   MOVE LENGTH OF wFILENAME-AREA  TO FCD-NAME-LENGTH
   SET FCD-FILENAME-ADDRESS TO ADDRESS OF wFILENAME-AREA
   ...

KEY DEFINITION AREA
===================

The Key Definition Area is used to hold index key information during operations
on indexed files. It consists of three data areas: Global Information area, Key
Definition area, Component Definition area.

Global Information Area.

It tells the size of the Key Definition Area and how many keys are in the file.
All unused or reserved areas must be initialized to binary zeros. The structure
is shown below.

OFFSET SIZE DESCRIPTION
------ ---- -------------------------------------
0      2    Length of the Key Definition Block
2      4    Reserved. Must be set to binary zeros
6      2    Number of keys
8      6    Reserved. Must be set to binary zeros.

Key Definition Area Parameter Block.

It describes the keys used in the indexed file and consists of one Key Definition
for each key in the file. You must define all keys before their components. The
order of defining the keys is important. The ordinal position of the key is used
to identify it.
For example, if you have an indexed file with a prime key and two alternate keys,
the Key Definition area would contain three key definitions.
The prime key is key 0, the first alternate is key 1, and the second alternate
is key 2.
All unused or reserved areas must be initialized to binary zeros. The structure
is shown below.

OFFSET SIZE DESCRIPTION
------ ---- --------------------------------------------------------------
0      2    Component count. For ordinary keys, the component count is 1.
            For split keys, the component count is the number of components
            making up the split key.
2      2    Offset to first Component Definition area for this key.
            This offset is relative to the start of the Global Information
            area, starting at 0.
4      1    Key flags:
            Bit 7 - Reserved. Must be set to binary zeros
            Bit 6 - Duplicates allowed
            Bit 5 - Reserved. Must be set to binary zeros
            Bit 4 - Set to indicate that this is the prime key. If this is
            not set for any key, the file handler assumes that the first
            key is the prime key.
            Bit 3 - Reserved. Must be set to binary zeros
            Bit 2 - Reserved. Must be set to binary zeros
            Bit 1 - Sparse key. See offset 6
            Bit 0 - Reserved. Must be set to binary zeros.
5      1    Compression flags:
            Bits 7-3  - Reserved. Must be set to binary zeros
            Bit 2  - Compression of trailing spaces
            Bit 1  - Compression of leading characters
            Bit 0  - Compression of duplicates
6      2    Sparse character. If bit 1 of the key flags (offset 4) is set,
            the key is suppressed if it is entirely made up of this character.
7      8    Reserved. Must be set to binary zeros.

Component Definition Area.

It follows the Key Definition area and contains one component definition for each
key component.
Each key consists of one component, unless defined as a split key, when each
component of the key requires its own Component Definition.
The Component Definitions define the location in the record and length of the key
component. All unused or reserved areas must be initialized to binary zeros.
The structure of a Component Definition is shown below.

OFFSET SIZE DESCRIPTION
------ ---- --------------------------------------------------------------
0      2    Reserved. Must be set to binary zeros.
2      4    Offset of component in the record (starting at 0).
6      4    Length of the component (in bytes).

OPERATION CODES
===============

There are two types of operation codes:
Standard:     The code contain x"FA" in the leftmost byte; the least significant byte
              indicates the specific operation
Special:      The codes contain x"00" in the leftmost significant byte; the least
              significant byte indicates the specific operation

Opcode        A 2-character operation code specifying an exact operation.
Operation     The operation performed by the chosen opcode.
File Type     L Line Sequential, S Record Sequential(including vS),
              R Relative(including vR), I Indexed
              vS Variable format Sequential only,
              vR Variable format Relative only

Input fields  The offset values of fields in the FCD to be set before
              calling.

Output fields The offset values of fields set by EXTFH during the call.

STANDARD OPERATION CODES
------------------------

They  are identified by x"FA" in the leftmost significant byte of the operation
code. The least significant byte indicates the specific operation, as shown in
the following sections.

OPEN
Initiates the processing of files.

OP                                   FILE
CODE OPERATION                       TYPE
---- ------------------------------- -------
00   OPEN INPUT                      L S R I
01   OPEN OUTPUT                     L S R I
02   OPEN I-O                        L S R I
03   OPEN EXTEND                     L S R I
04   OPEN INPUT WITH NO REWIND       L S
05   OPEN OUTPUT WITH NO REWIND      L S
08   OPEN INPUT REVERSED             L S

Input Fields:
Offset 5  File organization
Offset 6  Access mode
Offset 7  Open mode. Must be set to 128 before opening a file.
Offset 11 Length of filename
Offset 24 Lock mode flags
Offset 25 Other flags
Offset 34 File format
Offset 38 Maximum record length
Offset 47 Recording mode
Offset 50 Minimum record length
Offset 60 Pointer to the filename area
Offset 64 Pointer to the key definition block (I)
Offset 78 Data compression
Offset 91 Interlanguage locking

Filename area
Key Definition Area (only for Indexed Files)

Output Fields:
Offset 0  User file status
Offset 7  Open mode
FCD Use for all subsequent accesses to this file

Opening a File More Than Once.
With EXTFH you can assign several FCDs to the same physical file and have them
all open at the same time.
The operating system counts it as just one open file.
The physical file is not closed until every logical file assigned to it has been
closed.

CLOSE
Terminates the processing of files.

OP                                   FILE
CODE OPERATION                       TYPE
---- ------------------------------- -------
80   CLOSE                           L S R I
81   CLOSE WITH LOCK                 L S R I
82   CLOSE WITH NO REWIND            L S
84   CLOSE REEL/UNIT                 L S
85   CLOSE REEL/UNIT FOR REMOVAL     L S
86   CLOSE REEL/UNIT WITH NO REWIND  L S

Input Fields: None
Output Fields: Offset 0 - User file status

READ
Makes available a specified record (random access) or the next or previous
logical record (sequential access).

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
8D   READ (sequential) WITH NO LOCK   L S R I
D8   READ (sequential) WITH LOCK      L S R I
D9   READ (sequential) WITH KEPT LOCK L S R I
F5   READ (sequential)                L S R I
8C   READ PREVIOUS WITH NO LOCK           R I
DE   READ PREVIOUS WITH LOCK              R I
DF   READ PREVIOUS WITH KEPT LOCK         R I
F9   READ PREVIOUS                        R I
8E   READ (random) WITH NO LOCK           R I
DA   READ (random) WITH LOCK              R I
DB   READ (random) WITH KEPT LOCK         R I
F6   READ (random)                        R I
8F   READ (direct) WITH NO LOCK       L S R I
D6   READ (direct) WITH LOCK          L S R I
D7   READ (direct) WITH KEPT LOCK     L S R I
C9   READ (direct)                    L S R I
F1   READ (position)                  L S R I

Input Fields:
Offset 43 Relative record number (R) if READ random or direct
Offset 52 Key identifier (I)
Offset 56 Pointer to the record area

Output Fields:
Offset  0 User file status
Offset 48 Current record length
Offset 72 Relative byte address

Record Area

WRITE/REWRITE
Releases a logical record for an output or input-output file.
For sequential files, it can also be used for vertical positioning of lines
in a logical page.

The REWRITE operation logically replaces a record existing in a disk file.
The WRITE operation releases record locks and writes records.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
E1   WRITE BEFORE                      L S
E2   WRITE AFTER                       L S
E3   WRITE BEFORE TAB                  L S
E4   WRITE AFTER TAB                   L S
E5   WRITE BEFORE PAGE                 L S
E6   WRITE AFTER PAGE                  L S
EC   WRITE BEFORE mnemonic name          S
ED   WRITE AFTER mnemonic name           S
F3   WRITE                             L S R I
F4   REWRITE                           L S R I

Input Fields:
Offset 43 Relative record number (R)
Offset 48 Current record length
Offset 52 Line count (WRITE only)
Offset 56 Pointer to the record area

Output Fields:
Offset  0 User file status
Offset 72 Relative byte address

START
Provides a basis for logical positioning in a relative or indexed file, for
subsequent retrieval of records.

OP                                          FILE
CODE OPERATION                              TYPE
---- --------------------------------       -------
E8   START equal to full length prime key       R I
E9   START equal to (any key/record number)     R I
EA   START greater than (>)                     R I
EB   START not less than (>=)                   R I
FE   START less than (<)                        R I
FF   START less than or equal to (<=)           R I

Input Fields:
Offset 43 Relative record number (R)
Offset 52 Key identifier (I)
Offset 54 Effective key length (I)
Offset 56 Pointer to the record area

Output Fields:
Offset  0 User file status

STEP
Steps to the next physical record, this operation enables very fast access
to a record.

OP                                          FILE
CODE OPERATION                              TYPE
---- --------------------------------       -------
90   STEP NEXT WITH NO LOCK                 L S R I
D4   STEP NEXT WITH LOCK                    L S R I
D5   STEP NEXT WITH KEPT LOCK               L S R I
CA   STEP NEXT                              L S R I
92   STEP FIRST WITH NO LOCK                L S R I
D0   STEP FIRST WITH LOCK                   L S R I
D1   STEP FIRST WITH KEPT LOCK              L S R I
CC   STEP FIRST                             L S R I

Input Fields: Offset 56 Pointer to the record area

Output Fields: Offset 0 User file status

@end verbatim

STEP operations are a method of sequentially retrieving records in a relative or indexed file without having to read via a key or relative record number.
Generally, this is a faster method of accessing data in the file.

A STEP NEXT operation returns the record that is physically stored immediately after the one that was last retrieved in the file
(either by a STEP or READ operation).

If you are using relative byte addressing and you have specified that the current record pointer
should be updated to the record you have just accessed, STEP operations are relative to this new position.
The relative byte address is returned on every STEP operation, so if you need to update the current record pointer to the record
just retrieved, you can use the READ (direct) operation using the address returned.
The current record pointer is not affected by STEP operations.

@verbatim

DELETE
Logically removes a record from a disk file.

OP                                   FILE
CODE OPERATION                       TYPE
---- ------------------------------- -------
F7   DELETE                          vS R I

Input Fields
Offset 43 Non-sequential access to relative record number (R)
Offset 56 Non-sequential access to record pointer (I)

Output Fields:
Offset  0 User file status

DELETE FILE
Physically removes the specified file from the physical devices on which it
resides.

OP                                   FILE
CODE OPERATION                       TYPE
---- ------------------------------- -------
F8   DELETE FILE                     L S R I

Input Fields:
Offset  5 File organization
Offset 11 Filename length
Offset 34 File format
Offset 60 Pointer to the filename area

Filename Area
Output Fields:
Offset  0 User file status

COMMIT
Releases all record locks in all files held by this run unit. This operation
code always requires use of the FCD.

OP                                   FILE
CODE OPERATION                       TYPE
---- ------------------------------- -------
DC   COMMIT (UNLOCK all files)       L S R I

Input Fields: Always requires FCD used by the file
Output Fields: None

ROLLBACK
Releases all record locks in all files held by this run unit.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
DD   ROLLBACK (UNLOCKs all files)     L S R I

Input Fields: None
Output Fields: None

UNLOCK
Releases all record locks held by the run unit on a named file.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
0E   UNLOCK                           L S R I

Input Fields: None

Output Fields: Offset 0 User file status

SPECIAL OPERATION CODES
-----------------------

They must be identified by the hexadecimal code x"00" in the most significant
byte of the operation code.
The least significant byte indicates the operation, as shown in the following
sections.

GET FILE INFO
Returns information on keys for the specified file in the format of the Key
Definition Block for index files and general file information for all file
types supported.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
06   Return file information          vS vR I

Input Fields:
Offset  5 File organization (can be x"FF")
Offset 11 Length of filename
Offset 60 Pointer to the filename area
Offset 64 Pointer to the key definition area (I)

Output Fields:
Offset  0 User file status
Offset  5 File organization

Key definition Area (I)
Offset 34 File format
Offset 38 Maximum record length
Offset 47 Recording mode
Offset 50 Minimum record length
Offset 72 File size
Offset 78 Data compression routine


It is your responsibility to ensure that you have enough space allocated for the
key definition block to hold all the information returned.
Failure to allocate enough space causes corruption of some data areas.
For variable-length sequential files and variable-length relative files, no key
definition information exists.
If the organization byte of the FCD is set to x"FF", this tries to determine the
file type and return with the relevant information set.
This mode of operation is not recommended if fixed-length sequential files are
involved as it might be impossible to determine
the difference between the first record of a fixed-length sequential file and the
header of a variable-length sequential file.
When the file type is determined as incompatible, the error code 9/161 is returned.

CREATE NEW INEDX
Creates a new .idx file, containing only header information for the file to
allow new indexes to be added.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
07   Open new index                         I

Input fields: same as open
Output fields: same as open

GET NEXT RECORD
Gets the next physical record from the index data file.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
08   Get next record                        I

Input fields: offset 56 pointer to record area

Output fields:
offset  0 user file status
offset 48 current record length
offset 72 relative byte offset

ADD KEY VALUE
Adds key value to the index for the key specified

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
09   Add key value                    I

Input fields:
offset 52 key identifier
offset 56 pointer to record area

Output fields: offset 0 user file status

FLUSH FILE
Ensure all data for a specific file is flushed to disk.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
0C   Flush File                       L S R I

Input Fields: None
Output Fields: None

UNLOCK RECORD
Unlocks a specific record in a file.

OP                                    FILE
CODE OPERATION                        TYPE
---- -------------------------------- -------
0F   Unlock record                          I

Input Fields: Offset 56  Pointer to the record area

Output Fields: None

SAMPLE PROGRAM
==============

EXTFH is very powerful, it requires many parameters to work and provides many
return data.
An example is very useful to better clarify all these aspects.
The following example also shows the COBOL structure of the FCD area and the Key
Definition Area
The following is a single EXTFH02.COB source to be compiled with a single command
but which includes two programs EXTFH02A and EXTFH02B.
The first program creates an indexed file with 10 records with the normal I-O
statements and calls the second program.
The second program instead uses EXTFH for OPEN, READ REWRITE START READ PREVIOUS
and CLOSE operations.

@end verbatim

@example
        >>SOURCE FREE
  IDENTIFICATION DIVISION.
  PROGRAM-ID. EXTFH02A.
  *>***********************************************************
  *> CREATE AN INDEXED FILE WITH 10 RECORDS FOR NEXT PROGRAM
  *>***********************************************************
  ENVIRONMENT DIVISION.
  INPUT-OUTPUT SECTION.
  FILE-CONTROL.
  SELECT OUTFILE
      ASSIGN TO "FILE01EXTFH"
      ORGANIZATION IS INDEXED
      RECORD KEY   IS PRIME-KEY
      ACCESS MODE  IS SEQUENTIAL
      FILE STATUS  IS FS-OUT.
  DATA DIVISION.
  FILE SECTION.
  FD OUTFILE.
  01  OUT-REC.
      05  PRIME-KEY PIC X(25) VALUE ALL 'K'.
      05  IN-DATA   PIC X(10) VALUE ALL 'x'.
  WORKING-STORAGE SECTION.
  01  FS-OUT        PIC XX  VALUE space.
  01  OUT-RECNUM    PIC 999 VALUE 0.
  PROCEDURE DIVISION.
      OPEN OUTPUT OUTFILE.
      INITIALIZE OUT-REC ALL TO VALUE.
      perform 10 times
        MOVE "RECORD-"  TO PRIME-KEY (1:7)
        ADD 1  TO OUT-RECNUM MOVE OUT-RECNUM TO PRIME-KEY (8:3)
        DISPLAY 'WRITE: ' OUT-REC  WRITE OUT-REC
      end-perform
      DISPLAY OUT-RECNUM ' records written'.
      CLOSE OUTFILE
      display 'Enter to continue...' accept omitted
      CALL 'EXTFH02B'
      STOP RUN.
  END PROGRAM EXTFH02A.

  *>***********************************************************
  *> USE CALL 'EXTFH' TO OPEN READ REWRITE START READPREV CLOSE
  *>***********************************************************
  IDENTIFICATION DIVISION.
  PROGRAM-ID. EXTFH02B.
  DATA DIVISION.
  WORKING-STORAGE SECTION.
  01 OperationCode.
      05  wOperationType    pic x(01).
          78  Standard-Type               value x'FA'.
          78  Special-Type                value x'00'.
      05  wOperationCode           pic x(01).
          *> Standard Codes (Type is x'FA')
          78  Open-Input                  value x'00'.
          78  Open-Output                 value x'01'.
          78  Open-I-O                    value x'02'.
          78  Open-Extend                 value x'03'.
          78  Open-Input-No-Rewind        value x'04'.
          78  Open-Output-No-Rewind       value x'05'.
          78  Open-Input-Reversed         value x'08'.
          78  Close-File                  value x'80'.
          78  Close-Lock                  value x'81'.
          78  Close-No-Rewind             value x'82'.
          78  Close-Reel-Unit             value x'84'.
          78  Close-Reel-Unit-For-Removal value x'85'.
          78  Close-Reel-Unit-No-Rewind   value x'86'.
          78  Read-Seq-No-Lock            value x'8D'.
          78  Read-Seq-Lock               value x'D8'.
          78  Read-Seq-Kept-Lock          value x'D9'.
          78  Read-Seq                    value x'F5'.
          78  Read-Previous-No-Lock       value x'8C'.
          78  Read-Previous-Lock          value x'DE'.
          78  Read-Previous-Kept-Lock     value x'DF'.
          78  Read-Previous               value x'F9'.
          78  Read-Random-No-Lock         value x'8E'.
          78  Read-Random-Lock            value x'DA'.
          78  Read-Random-Kept-Lock       value x'DB'.
          78  Read-Random                 value x'F6'.
          78  Read-Direct-No-Lock         value x'8F'.
          78  Read-Direct-Lock            value x'D6'.
          78  Read-Direct-Kept-Lock       value x'D7'.
          78  Read-Direct                 value x'C9'.
          78  Read-Position               value x'F1'.
          78  Write-Before                value x'E1'.
          78  Write-After                 value x'E2'.
          78  Write-Before-Tab            value x'E3'.
          78  Write-After-Tab             value x'E4'.
          78  Write-Before-Page           value x'E5'.
          78  Write-After-Page            value x'E6'.
          78  Write-Record                value x'F3'.
          78  Rewrite-Record              value x'F4'.
          78  Start-Equal-Prime-Key       value x'E8'.
          78  Start-Equal-Key             value x'E9'.
          78  Start-Greater               value x'EA'.
          78  Start-Not-Less              value x'EB'.
          78  Start-Less                  value x'FE'.
          78  Start-Less-Or-Equal         value x'FF'.
          78  Step-Next-No-Lock           value x'90'.
          78  Step-Next-Lock              value x'D4'.
          78  Step-Next-Kept-Lock         value x'D5'.
          78  Step-Next                   value x'CA'.
          78  Step-First-No-Lock          value x'92'.
          78  Step-First-Lock             value x'D0'.
          78  Step-First-Kept-Lock        value x'D1'.
          78  Step-First                  value x'CC'.
          78  Delete-Record               value x'F7'.
          78  Delete-File                 value x'F8'.
          78  Unlock-Current              value x'0E'.
          78  Commit-All                  value x'DC'.
          78  Rollback-All                value x'DD'.
*> Special codes  (Type is x'00')
          78  Get-File-Info               value x'06'. *> not avail. for BDB files
          78  Open-New-Index              value x'07'.
          78  Get-Next-Record             value x'08'.
          78  Add-Key-Value               value x'09'.
          78  Unlock-Record               value x'0F'.

  01  FCD-AREA. *> or use: COPY 'XFHFCD3.CPY'.
      10 FCD-FILE-STATUS.
        15 FCD-STATUS-KEY-1         pic x.
        15 FCD-STATUS-KEY-2         pic x.
        15 FCD-BINARY redefines FCD-STATUS-KEY-2 pic x comp-x.
      10 FCD-LENGTH                  pic xx comp-x.
      10 FCD-VERSION                 pic x comp-x.
        78 fcd--version-number      value 1.
      10 FCD-ORGANIZATION            pic x comp-x.
        78 fcd--line-sequential-org value 0.
        78 fcd--sequential-org      value 1.
        78 fcd--indexed-org         value 2.
        78 fcd--relative-org        value 3.
        78 fcd--determine-org       value 255. *> see wOperationCode 0006:
      10 FCD-ACCESS-MODE             pic x comp-x.
        78 fcd--sequential-access   value 0.
        78 fcd--dup-prime-access    value 1.
        78 fcd--random-access       value 4.
        78 fcd--dynamic-access      value 8.
        78 fcd--status-defined      value h"80".
      10 FCD-OPEN-MODE               pic x comp-x. *> open mode
        78 fcd--open-input          value 0.
        78 fcd--open-output         value 1.
        78 fcd--open-i-o            value 2.
        78 fcd--open-extend         value 3.
        78 fcd--open-max            value 3.
        78 fcd--open-closed         value 128.
      10 FCD-RECORDING-MODE          pic x comp-x. *> recording mode
        78 fcd--recmode-fixed       value 0.
        78 fcd--recmode-variable    value 1.
      10 FCD-FILE-FORMAT             pic x comp-x.
        78 fcd--format-liiv1        value 0.
        78 fcd--format-cisam        value 1.
        78 fcd--format-liiv2        value 2.
        78 fcd--format-cobol2       value 3.
        78 fcd--format-idx4         value 4.
        78 fcd--format-btrieve-ansi value 5.
        78 fcd--format-btrieve-non-ansi  value 6.
*>      78 fcd--format-rlio         value 7.
        78 fcd--format-big          value 8.
        78 fcd--format-leafrec      value 9.
        78 fcd--format-cst          value 10.
        78 fcd--format-mvs-print    value 11.
*>      78                          value 13.
        78 fcd--format-heap         value 14.
        78 fcd--format-esds         value 15.
        78 fcd--format-qsamv        value 255.
        78 fcd--max-file-format     value 16. *> 1 > max permissible format:
      10 FCD-DEVICE-FLAG             Pic x comp-x.
        78 fcd--dev-normal          value 0.
        78 fcd--dev-device          value 1.
        78 fcd--dev-stdin           value 2.
        78 fcd--dev-stdout          value 3.
        78 fcd--dev-stderr          value 4.
        78 fcd--dev-badname         value 5.
        78 fcd--dev-input-pipe      value 6.
        78 fcd--dev-output-pipe     value 7.
        78 fcd--dev-i-o-pipe        value 8.
        78 fcd--dev-library         value 9.
        78 fcd--dev-disk-file       value 10.
        78 fcd--dev-null            value 11.
        78 fcd--dev-disk-redir      value 12.
        78 fcd--dev-no-map          value 13.
      10 FCD-LOCK-ACTION             pic x comp-x. *> Used only in c-isam type calls
        78 fcd--getlock             value 1.
        78 fcd--nolock              value 2.
        78 fcd--ignorelock          value 3.
      10 FCD-DATA-COMPRESS           pic x comp-x.
      10 FCD-BLOCKING                pic x comp-x.
      10 FCD-additional-status redefines FCD-blocking pic x comp-x.
      10 FCD-IDXCACHE-SIZE           pic x comp-x.
      10 FCD-PERCENT                 pic x comp-x.
      10 FCD-REC-COUNT-SET redefines FCD-PERCENT  pic x comp-x.
      10 FCD-BLOCK-SIZE              pic x comp-x.
      10 FCD-FLAGS-1                 pic x comp-x.
        78 fcd--mainframe-compat    value h"80".
        78 fcd--ansi-line-adv       value h"40".
        78 fcd--return-key-only     value h"20".
        78 fcd--bypass-esds         value h"10".
        78 fcd--no-xfhname-mapping  value h"08".
        78 fcd--dont-call-xfhtrace  value h"04".
        78 fcd--call-xfhtrace       value h"02".
        78 fcd--fcd-decl            value h"01". *> declaratives exist:
      10 FCD-FLAGS-2                 pic x comp-x.
        78  fcd--convert-dbspace    value h"01".
      10 fcd-mvs-flags               pic x comp-x. *> MVS flag bits
        78  fcd--file-is-syspunch   value h"10".
        78  fcd--file-is-indd       value h"08".
        78  fcd--file-is-outdd      value h"04".
        78  fcd--amode-31bit        value h"02".
        78  fcd--amode-24bit        value h"01".
        78  fcd--amode-bits value fcd--amode-31bit + fcd--amode-24bit.
      10 FCD-STATUS-TYPE              pic x comp-x.
        78 fcd--ans85-status         value h"80".
        78 fcd--no-space-fill        value h"40".
        78 fcd--no-strip-spaces      value h"20".
        78 fcd--no-expand-tabs       value h"10".
        78 fcd--rec-term-bit         value h"08".
        78 fcd--insert-tabs          value h"04".
        78 fcd--insert-nulls         value h"02".
        78 fcd--cr-delimiter         value h"01".
        78 fcd--modify-writes   value fcd--insert-tabs + fcd--insert-nulls.
      10 FCD-OTHER-FLAGS              pic x comp-x.
        78 fcd--optional-file        value h"80".
        78 fcd--nodetectlock-input   value h"40".
        78 fcd--not-optional         value h"20".
        78 fcd--external-name        value h"10".
        78 fcd--get-info             value h"08".
        78 fcd--nodetectlock         value h"04".
        78 fcd--multiple-reel        value h"02".
        78 fcd--line-advancing       value h"01".
        78 fcd--special-sequential
            value fcd--optional-file + fcd--multiple-reel + fcd--line-advancing.
      10 FCD-TRANS-LOG                pic x comp-x.
        78 fcd--open-input-shared    value h"80".
        78 fcd--allow-input-locks    value h"40".
        78 fcd--no-read-sema         value h"20".
        78 fcd--expand-positioning-bit value h"10".
        78 fcd--no-seq-check         value h"08".
        78 fcd--dat-term-bit         value h"04".
        78 fcd--slow-read            value h"02".
        78 fcd--suppress-adv         value h"01".
      10 FCD-LOCKTYPES                pic x comp-x.
        78 fcd--interlang-locking    value h"80".
        78 fcd--allow-readers        value h"40".
        78 fcd--separate-lock-file   value h"20".
        78 fcd--single-open          value h"10".
        78 fcd--nfs-file-lock        value h"08".
        78 fcd--nfs-file-lock-hp     value h"04".
        78 fcd--nfs-file-locks value fcd--nfs-file-lock + fcd--nfs-file-lock-hp.
      10 FCD-FS-FLAGS                 pic x comp-x.
        78 fcd--transaction-processing-bit value h"80".
        78 fcd--recovery-run-b       value h"04".
        78 fcd--fs-server-bit        value h"02".
      10 FCD-CONFIG-FLAGS             pic x comp-x.
        78 fcd--writethru-bit        value h"80".
        78 fcd--relative-bit         value h"40".
        78 fcd--set-crp-bit          value h"20".
        78 fcd--bigfile-bit          value h"10".
*>      78 fcd--return-percent       value h"08".
*>      78 fcd--dont-call-xfhconv    value h"04".
        78 fcd--call-cobfstatconv    value h"02".
        78 fcd--ignorelock-bit       value h"01".
      10 FCD-MISC-FLAGS               pic x comp-x.
        78 fcd--mainframe-hostfd     value h"80".
        78 fcd--set-idxdatbuf        value h"40".
        78 fcd--load-onto-heap       value h"20".
        78 fcd--usage-unknown        value h"10".
        78 fcd--recmode-s            value h"08".
        78 fcd--recmode-u            value h"04".
        78 fcd--external-fcd         value h"02".
        78 fcd--closed-with-lock     value h"01".
      10 FCD-CONFIG-FLAGS2            pic x comp-x.
        78 fcd--file-is-ebcdic       value h"80".
        78 fcd--file-has-write-after value h"40".
        78 fcd--file-has-write-before value h"20".
        78 fcd--file-has-adv-specified value h"10".
        78 fcd--no-min-len-check     value h"08".
        78 fcd--no-key-check         value h"04".
        78 fcd--convert-to-ascii     value h"02".
        78 fcd--rm-behaviour         value h"01".
        78 fcd--file-has-before-or-after
            value fcd--file-has-write-before + fcd--file-has-write-after.
      10 FCD-LOCK-MODE                pic x comp-x.
        78 fcd--multilock-bit        value h"80".
        78 fcd--writelock-bit        value h"40".
        78 fcd--retry-open-bit       value h"20".
        78 fcd--skip-lock-bit        value h"10".
        78 fcd--retry-lock-bit       value h"08".
        78 fcd--manual-lock-bit      value h"04".
        78 fcd--auto-lock-bit        value h"02".
        78 fcd--exclusive-bit        value h"01".
        78 fcd--sharing-bits value fcd--manual-lock-bit + fcd--auto-lock-bit.
      10 FCD-SHR2                     pic x comp-x.
        78 fcd--file-max-bit         value h"08".
        78 fcd--file-pointer-bit     value h"04".
        78 fcd--retry-time-bit       value h"02".
        78 fcd--start-unlock         value h"01".
      10 FCD-IDXCACHE-BUFFS    pic x comp-x.
      10 FCD-INTERNAL-FLAGS-1  pic x comp-x.
      10 FCD-INTERNAL-FLAGS-2  pic x comp-x.
      10                       pic x comp-x occurs 15.
      10 FCD-NLS-ID            pic xx comp-x.   *>   NLS id (else 0)
      10 FCD-FS-FILE-ID        pic xx comp-x.
      10 fcd-retry-open-count  pic xx comp-x.
      10 FCD-NAME-LENGTH       pic xx comp-x.
      10 fcd-idxname-length    pic xx comp-x.
      10 fcd-retry-count       pic xx comp-x.
      *> Indexed key identifier for random READ
      10 FCD-KEY-ID            pic xx comp-x.
      10 FCD-LINE-COUNT        pic xx comp-x. *> Line count (seq files)
      10 FCD-USE-FILES         pic x  comp-x.
      10 FCD-GIVE-FILES        pic x  comp-x.
      10 FCD-KEY-LENGTH        pic xx comp-x. *> Effective key length
                                              *>  (START KEY LENGTH IS n)
      10                       pic x comp-x occurs 20.
      10 FCD-CURRENT-REC-LEN   pic x(4) comp-x. *> Current record length
      10 FCD-MIN-REC-LENGTH    pic x(4) comp-x. *> Minimum record length
      10 FCD-MAX-REC-LENGTH    pic x(4) comp-x. *> Max record length
      10 FCD-SESSION-ID        pic x(4) comp-x.
      10                       pic x comp-x occurs 24.
      10 FCD-RELADDR-OFFSET    pic x(8) comp-x.
      10 FCD-RELADDR           redefines FCD-RELADDR-OFFSET pic x(8) comp-x.
      10 FCD-RELADDR-BIG       redefines FCD-RELADDR-OFFSET pic x(8) comp-x.
      10 FCD-MAX-REL-KEY       pic x(8) comp-x.
      10 FCD-RELATIVE-KEY      pic x(8) comp-x.
      10 FCD-PTR-FILLER1       pic x(8) comp-x.
      10 FCD-HANDLE            redefines FCD-PTR-FILLER1 usage pointer.
      10 FCD-HANDLE-NUM        redefines FCD-PTR-FILLER1 pic x(4) comp-x.
      10 FCD-PTR-FILLER2       pic x(8) comp-x.   *> Pointer to record area
      10 FCD-RECORD-ADDRESS    redefines FCD-PTR-FILLER2 usage pointer.
      10 FCD-PTR-FILLER3       pic x(8) comp-x.   *> Pointer to file name
      10 FCD-FILENAME-ADDRESS  redefines FCD-PTR-FILLER3 usage pointer.
*> Pointer to index name (applies only if separate index file exists)
      10 FCD-PTR-FILLER4       pic x(8) comp-x.
      10 FCD-IDXNAME-ADDRESS   redefines FCD-PTR-FILLER4 usage pointer.
      10 FCD-INDEX-NAME        redefines FCD-PTR-FILLER4 usage pointer.
      10 FCD-PTR-FILLER5       pic x(8) comp-x.   *> Pointer to key def block
      10 FCD-KEY-DEF-ADDRESS   redefines FCD-PTR-FILLER5 usage pointer.
      10 FCD-PTR-FILLER6       pic x(8) comp-x.   *> Pointer to collating seq
      10 FCD-COL-SEQ-ADDRESS   redefines FCD-PTR-FILLER6 usage pointer.
      10 FCD-PTR-FILLER7       pic x(8) comp-x.   *> Pointer to using list
      10 FCD-FILDEF-ADDRESS    redefines FCD-PTR-FILLER7 usage pointer.
      10 FCD-PTR-FILLER8       pic x(8) comp-x.
      10 FCD-DFSORT-ADDRESS    redefines FCD-PTR-FILLER8 usage pointer.
  01  FILE-NAME                       PIC X(64).
  01  RECORD-AREA.
      05  PRIME-KEY                   PIC X(25).
      05  DATA-AREA                   PIC X(10).
  01  RECORD-AREA2.
      05  PRIME-KEY2                  PIC X(25).
      05  DATA-AREA2                  PIC X(10).
  01 KEY-DEF-AREA.
     47 GLOBAL-INFORMATION-AREA.
        49 LENGTH-OF-KEY-DEF-AREA      pic 9(04) comp-x.
        49 key-version                 pic 9(02) comp-x value 2.
        49 filler                      pic 9(06) comp-x. *> reserved
        49 NUMBER-OF-KEYS              pic 9(04) comp-x.
        49 filler                      pic 9(13) comp-x. *> reserved
*> key-definition-area is repeated for the number of keys defined by
*>                                                    NUMBER-OF-KEYS
     47 KEY-DEF-AREA-PARAM-BLOCK.
        49 component-count             pic 9(4) comp-x.
*> The offset for the component-specification for this key
        49 component-defs              pic 9(4) comp-x.
        49 key-flags                   pic 9(2) comp-x.
           78 KEY2KEYFLAG-DUPS-IN-ORDER    value h"40".
           78 KEY2KEYFLAG-PRIME            value h"10".
           78 KEY2KEYFLAG-SPARSE-KEY       value h"02".
        49 key-compression pic 9(2) comp-x.
           78 KEY2COMPRESS-TRAILING-NULLS  value h"08".
           78 KEY2COMPRESS-TRAILING-SPACES value h"04".
           78 KEY2COMPRESS-IDENTICAL-CHARS value h"02".
           78 KEY2COMPRESS-FOLLOWING-DUP   value h"01".
           78 KEY2COMPRESS-NO-COMPRESSION  value h"00".
           78 KEY2COMPRESS-DEFAULT value KEY2COMPRESS-NO-COMPRESSION.
        49 sparse-characters           pic x(2).
        49 filler                      pic x(8). *> reserved
*> component-specifications for all keys follows after the key definition area
*> for all the keys.
     47 COMPONENT-DEF-AREA.
        49 component-flags             pic 9(2) comp-x.
        49 component-type              pic 9(2) comp-x.
           78 KEY2PARTTYP-NUMERIC         value h"80".
           78 KEY2PARTTYP-SIGNED          value h"40".
           78 KEY2PARTTYP-COMP            value h"20".
           78 KEY2PARTTYP-COMP-3          value h"21".
           78 KEY2PARTTYP-COMP-X          value h"22".
           78 KEY2PARTTYP-COMP-5          value h"23".
           78 KEY2PARTTYP-FLOAT           value h"24".
           78 KEY2PARTTYP-COMP-6          value h"25".
           78 KEY2PARTTYP-DISPLAY         value h"00".
           78 KEY2PARTTYP-SIGN-TRAIL-INCL value h"00".
           78 KEY2PARTTYP-SIGN-TRAIL-SEP  value h"01".
           78 KEY2PARTTYP-SIGN-LEAD-INCL  value h"02".
           78 KEY2PARTTYP-SIGN-LEAD-SEP   value h"03".
           78 KEY2PARTTYP-SIGN-LEAD-FLOAT value h"04".
        49 component-offset            pic 9(9) comp-x.
        49 component-length            pic 9(9) comp-x.

  01  OP-N                 PIC X COMP-X.
  01  OP-X REDEFINES OP-N  PIC X.

  PROCEDURE DIVISION.
      PERFORM 1000-OPEN-FILE.
      INITIALIZE RECORD-AREA.
      MOVE 'RECORD-003KKKKKKKKKKKKKKK' TO PRIME-KEY.
      PERFORM 2000-READ-RECORD.
      DISPLAY 'AFTER RANDOM READ ------> ' RECORD-AREA '<' DISPLAY SPACE
      PERFORM 3000-REWRITE-RECORD.
      PERFORM 2000-READ-RECORD.
      DISPLAY 'READ AFTER REWRITE -----> ' RECORD-AREA '<' DISPLAY SPACE
      PERFORM 5000-CLOSE-FILE.

      PERFORM 1000-OPEN-FILE.
      PERFORM 6000-START.
      PERFORM 7000-READ-PREVIOUS.
      DISPLAY 'AFTER 1ST READ PREVIOUS -> ' RECORD-AREA2 '<' DISPLAY SPACE
      PERFORM 7000-READ-PREVIOUS.
      DISPLAY 'AFTER 2ND READ PREVIOUS -> ' RECORD-AREA2 '<' DISPLAY SPACE
      PERFORM 5000-CLOSE-FILE.
      STOP RUN.

  1000-Open-File. *> GET FILE INFO + OPEN
      MOVE 'FILE01EXTFH'          TO FILE-NAME
      MOVE STANDARD-TYPE          TO wOperationType
      MOVE OPEN-I-O               TO wOperationCode
      MOVE LOW-VALUES             TO FCD-AREA
      MOVE LENGTH OF FCD-AREA     TO FCD-LENGTH
      MOVE LENGTH OF FILE-NAME    TO FCD-NAME-LENGTH
      MOVE fcd--version-number    TO FCD-VERSION
      SET  FCD-FILENAME-ADDRESS   TO ADDRESS OF FILE-NAME
      SET  FCD-RECORD-ADDRESS     TO ADDRESS OF RECORD-AREA
      SET  FCD-KEY-DEF-ADDRESS    TO ADDRESS OF KEY-DEF-AREA
      MOVE fcd--exclusive-bit     TO FCD-LOCK-MODE
      MOVE fcd--format-cobol2     TO FCD-FILE-FORMAT
      MOVE fcd--indexed-org       TO FCD-ORGANIZATION
      MOVE fcd--dynamic-access    TO FCD-ACCESS-MODE
      MOVE fcd--recmode-fixed     TO FCD-RECORDING-MODE
      MOVE LENGTH OF RECORD-AREA  TO FCD-MIN-REC-LENGTH
      MOVE LENGTH OF RECORD-AREA  TO FCD-MAX-REC-LENGTH
      MOVE LENGTH OF RECORD-AREA  TO FCD-CURRENT-REC-LEN
      move fcd--open-closed       TO FCD-OPEN-MODE
      MOVE 16                     TO FCD-FS-FLAGS
      MOVE 1                      TO NUMBER-OF-KEYS
      MOVE LENGTH OF PRIME-KEY    TO COMPONENT-LENGTH
      display "01--- OPEN I-O"
      PERFORM 9000-CALL-EXTFH.
  2000-Read-Record.
      INITIALIZE RECORD-AREA.
      MOVE 'RECORD-003KKKKKKKKKKKKKKK' TO PRIME-KEY.
      MOVE READ-RANDOM-LOCK     TO wOperationCode.
      SET FCD-RECORD-ADDRESS    TO ADDRESS OF RECORD-AREA.
      display "02--- READ"
      PERFORM 9000-CALL-EXTFH.
  3000-Rewrite-Record.
      MOVE REWRITE-RECORD        TO wOperationCode.
      MOVE '1234567890' TO DATA-AREA.
      display "03--- REWRITE"
      PERFORM 9000-CALL-EXTFH.
  5000-Close-File.
      MOVE CLOSE-FILE            TO wOperationCode.
      display "04--- CLOSE"
      PERFORM 9000-CALL-EXTFH.
  6000-Start.
      SET FCD-RECORD-ADDRESS     TO ADDRESS OF RECORD-AREA.
      MOVE 25                    TO FCD-KEY-LENGTH.
      MOVE HIGH-VALUES           TO PRIME-KEY.
      MOVE START-LESS            TO wOperationCode.
      display "05--- START"
      PERFORM 9000-CALL-EXTFH.
  7000-Read-Previous.
      MOVE READ-PREVIOUS  TO wOperationCode.
      INITIALIZE RECORD-AREA2.
      SET FCD-RECORD-ADDRESS     TO ADDRESS OF RECORD-AREA2.
      display "06--- READ PREVIOUS"
      PERFORM 9000-CALL-EXTFH.
  9000-CALL-EXTFH.
      move '99' to FCD-FILE-STATUS
      display 'BEFORE OpCode: ' FUNCTION HEX-OF(OperationCode)
      perform 9900-Display
      CALL 'EXTFH' USING OperationCode FCD-AREA
      display 'AFTER OpCode : ' FUNCTION HEX-OF(OperationCode)
      perform 9900-Display
      accept omitted
      IF FCD-FILE-STATUS NOT = '00'
          MOVE wOperationCode TO OP-X
          IF FCD-STATUS-KEY-1 = '9'
              DISPLAY 'FILE ERROR, STATUS: 9/' FCD-BINARY '
                        wOperationCode: ' OP-N
          ELSE
              DISPLAY 'FILE ERROR, STATUS:   ' FCD-FILE-STATUS '
                                               wOperationCode: ' OP-N
          END-IF
          STOP RUN
      END-IF.
  9900-Display.
      display 'FILE-STATUS  : ' FCD-FILE-STATUS
      if wOperationCode NOT = READ-PREVIOUS
            display 'RECORD-AREA  : '  RECORD-AREA
      else  display 'RECORD-AREA2 : '  RECORD-AREA2
      end-if
      display 'KEY-DEF-AREA :' display FUNCTION HEX-OF(KEY-DEF-AREA)
      continue.
  END PROGRAM EXTFH02B.

@end example

@verbatim

RELATIVE BYTE ADDRESSING
========================

When you read or write a record, you obtain its relative byte address.
Using this address, you can re-read, re-write or delete the record without using
keys and indexes.
This is a fast method of accessing records, but has following limitations :
- A normal relative byte address operation does not affect the current record
  pointer.
  Therefore, a READ (sequential) after a relative byte addressing operation
  returns the record after the last one accessed using normal access methods.
  It does not return the record after the one you accessed using relative byte
  addressing.
- It is possible, however, to update the file position indicator so it points
  to the record you accessed using relative byte addressing.
  A subsequent READ returns you to the record after the one you accessed using
  the relative byte address operation.
- To update the file position indicator, you should set Bit 5 of the configuration
  flags (offset 93) in the FCD before calling the Callable File Handler to perform
  the relative byte address operation.
- Relative byte operations update the index when a record is re-written or deleted.
- If the record has been deleted since the relative byte address for it was
  obtained, a read or write using its relative byte address usually fails.
- However, you should be aware that it is possible for the record to have been
  replaced by a different record.

Record locking is supported by relative byte addressing.
The relative byte address of a record is returned in offset 72 of the FCD (or
offset 13, if bit 4 of offset 93 is set) on all operations that involve specific
records.
To use this address, simply save the contents of this field after a READ operation.
Note that if the operation is unsuccessful, the value in the relative byte address
is undefined.
Once you have obtained the relative byte address of a record, you can perform a
number of operations.
These are outlined in the following sections.
You can read a specific record from a file in two ways using the relative address:

Put the relative address in the relative byte address field of the FCD and set
bit 6 of the configuration flags in the FCD (offset 93).
If you want to update the file position indicator to this record, set bit 5 of
the configuration flags (offset 93).
Perform a READ (random) WITH NO LOCK, READ (random) WITH LOCK, READ (random)
WITH KEPT LOCK or READ (random) operation on the file.

The READ (direct) operations work the same as described above, but do not require
certain bits in the FCD to be set.
The READ (direct) operations always return the record at the address given in the
relative byte address field of the FCD and update the file position indicator.

Both of the above methods provide a way of switching the current key-of-reference
to a different key. For example,
if READ (sequential) operations are performed via the primary key, you can start
reading via the first alternate key from the current record using the following
steps:
a. Read the next record in the file (the address of this record is in the FCD
   relative byte address field).
b. Put the new key-of-reference in the key-of-reference field in the FCD
   (offset 52).
c. Perform a READ (direct) operation to return the record at this address. The
   key-of-reference is changed to the new one.
d. Read the next record in the file. This is the next record in the
   new key-of-reference index.

You can re-write a record to a specific address by specifying that address in the
relative byte address field of the FCD
and setting bit 6 of the configuration flags in the FCD (offset 93).
If you want to update the file position indicator, set bit 5 of the configuration
flags in the FCD (offset 93).
You can delete a record at a specific address by specifying that address in the
relative byte address field of the FCD and setting bit 6 of the configuration
flags in the FCD (offset 93).

CREATING A NEW INDEX
====================

That enables you to recreate an index file using only the information in the
data file.
To recreate an index file, your program must:
a. Open the file using the open-new-index operation code.
b. Read records from the file using the get-next-rec operation code.
c. Create an index from each separate record, using the add-index operation
   code.

@end verbatim

@example
GnuCOBOL Example:
78 open-new-index         value x"0007".
78 get-next-rec           value x"0008".
78 add-key-value          value x"0009".
78 close-file             value x"fa80".
      ...
  move open-new-index to opcode
  perform EXTFH-op
  move get-next-rec   to opcode
  perform EXTFH-op
  perform until fcd-status(1:1) not = "0"
     perform varying fcd-key-id from 0 by 1 until fcd-key-id = key-count
             or fcd-status(1:1) not = "0"
         move add-key-value to opcode
         perform EXTFH-op
     end-perform
     move get-next-rec to opcode
     perform EXTFH-op
  end-perform
  move close-file to opcode
  perform EXTFH-op
       ...

EXTFH-op.
  call "EXTFH" using opcode, fcd
  if fcd-status of fcd (1:1)  "1"
      move 1 to return-code
  end-if.

@end example

@verbatim

ACCESSING A COMPILER GENERATED FCD
==================================

When normal I/O operations (OPEN, READ ...)  in a GnuCOBOL program, an FCD is
created for each file.
To access this FCD, set up a FCD definition in the Linkage Section of your
program. An example FCD definition is supplied in a file called xfhfcd3.cpy.

This definition (that takes up no physical memory) can then be mapped onto the
FCD you want to read or alter using the following SET statement in your program:
Set address of fcd to address of fh--fcd of indexedfile
where the parameters are:
fcd The name of the FCD definition in the Linkage Section of your program;
fh--fcd of indexedfile (note the double hyphen).
The pointer special register automatically allocated to the file with FD-name:
indexedfile.
Following this SET operation, the data items defined in the Linkage Section group
item fcd become the fields of the FCD of the file referenced in the SET statement.
Similarly, you can access the Key Definition Area by:
Set address of kda to address of fh--keydef of indexedfile where the parameters
are:
kda the name of the key definition area in the Linkage Section of your program;
fh--keydef of indexedfile the pointer special register automatically allocated
    to the file with FD-name indexfile to point to its Key Definition Area.

TURN ON KEY COMPRESSION IN A FILE
=================================

Following program turns on key compression in a file by setting bits in the
file's Key Definition Area.

@end verbatim

@example
    select MASTERFILE
        assign to ...
        organization is indexed
        record key is M-RecKey
        alternate key is M-AltKey1 with duplicates
        alternate key is M-AltKey2
        alternate key is M-AltKey3 with duplicates.
     select INDEXEDFILE
        assign to ...
        organization is indexed
        record key is I-RecKey
        alternate key is I-AltKey1 with duplicates.
    ...
    ...
 LINKAGE SECTION.
 01 KeyDefinitionArea.
     03 filler              pic x(6).
     03 KeyCount            pic 9(4) comp-x.
     03 filler              pic x(6).
     03 KeyDefinition       occurs 1 to 4 times depending on KeyCount.
         05 filler          pic x(5).
         05 KeyCompression  pic 9(2) comp-x.
         05 filler          pic x(10).
   ...

 PROCEDURE DIVISION.
*>
*> set appropriate key compressions:
*>          +-- trailing space compression
*>          |+-- leading character compression
*>          ||+-- duplicate key compression
*>          |||
*> 7 = 00000111 - all compressions
*> 6 = 00000110 - leading character & trailing space
*> 2 = 00000010 - leading character compression
*> 1 = 00000001 - duplicate key compression

  set address of KeyDefinitionArea to address of fh--keydef of MASTERFILE
  move 4 to KeyCount
  move 6 to KeyCompression(1)
  move 7 to KeyCompression(2)
  move 6 to KeyCompression(3)
  move 7 to KeyCompression(4)
  open I-O MASTERFILE
  . . .
  set address of KeyDefinitionArea to address of fh--keydef of INDEXEDFILE
  move 2 to KeyCount
  move 4 to KeyCompression(1)
  move 1 to KeyCompression(2)
  open input INDEXEDFILE

@end example

See the file NEWS for more details as implementation varies between compiler versions.

Any variantion to these details should be reported as a Software Bug.

@comment *********************************************************************
@comment ** 8.2.53 SYSTEM                                                   **
@comment *********************************************************************
@page
@newsubsection{SYSTEM}
@diagram{SYSTEM Built-In Subroutine,SS-SYSTEM,SS-SYSTEM,None}
This subroutine submits @var{command} (an alphanumeric literal or data item) to a command shell for execution as if it were typed into a console/terminal window.

A shell will be opened subordinate to the GnuCOBOL program issuing the call to @code{SYSTEM}.

Output from the command (if any) will appear in the command window in which the GnuCOBOL program was executed.

On a Unix system, the shell environment will be established using the default shell program.  This is also true when using a GnuCOBOL build created with and for OSX or the Cygwin Unix emulator.

With native Windows Windows/MinGW builds, the shell environment will be the Windows console window command processor (usually @command{cmd.exe}) appropriate for the version of Windows you're using.

To trap output from the executed command and process it within the GnuCOBOL program, use a redirection (@samp{>}) to send the command output to a temporary file which you read from within the program once control returns.

The exit status of the executed command will be available in the @code{RETURN-CODE} special-register.

@comment *********************************************************************
@comment ** 8.2.54 X"91"                                                    **
@comment *********************************************************************
@page
@newsubsection{X"91"}
@diagram{X"91" Built-In Subroutine,SS-X91,SS-X91,None}
The original Micro Focus version of this routine is capable of providing a wide variety of functions.  GnuCOBOL supports just three of them but more on the way subject to version of compiler (see file NEWS):
@itemize @bullet
@item
Turning runtime switches (@code{SWITCH-1}, @dots{} , @code{SWITCH-8}) on.

@item
Turning runtime switches (@code{SWITCH-1}, @dots{} , @code{SWITCH-8}) off.

@item
Retrieving the number of arguments passed to a subroutine.
@end itemize

The @var{return-code} argument must be a one-byte binary numeric data item (@code{USAGE BINARY-CHAR} is recommended).  It will receive a value of 0 if the operation was successful, 1 otherwise.

The @var{function-code} argument must be either a numeric literal or a one-byte binary numeric data item (@code{USAGE BINARY-CHAR} is recommended).

The third argument --- @var{variable-arg} --- is defined differently depending upon the @var{function-code} value, as follows:
@table @asis

@item 11
Sets and/or clears all eight of the COBOL switches (@code{SWITCH-1} through @code{SWITCH-8}).  @xref{SPECIAL-NAMES}, for an explanation of those switches. Also referred to as programmable 0 - 7.

The @var{variable-arg} argument should be an @code{OCCURS 8 TIMES} table of @code{USAGE BINARY-CHAR}.

Each occurrence that is set to a value of zero prior to the @code{CALL X"91"} will cause the corresponding switch to be cleared.  Each occurrence set to 1 prior to the @code{CALL X"91"} will cause the corresponding switch to be set.

Values other than 0 or 1 will be ignored.

@item 12
Reads all eight of the COBOL switches (@code{SWITCH-1} through @code{SWITCH-8}) and debug switches as prorammable 0 - 7.

The @var{variable-arg} argument should be an @code{OCCURS 8 TIMES} table of @code{USAGE BINARY-CHAR}.

Each of the 1@sup{st} eight occurrences of the array will be set to either 0 or 1 --- 1 if the corresponding switch is set, 0 otherwise.

@item 13 + 14
Allow access to runtime switches 1 - 26 as A-Z. In case of A.N.T: set related runtime setting. Option 13 read them and option 14 sets them.

@item 15
Prepare for program lookup. Checks to see if a program exists. You pass the program name and its length in parameter. When routine exits, result is zero if found and non-zero if not. Parameter is a group item consisting of two data items: a PIC X COMP-X specifyinh length in bytes of data item containing the file name and PIC X data item of varaiable length containing the file name.

@item 16
Retrieves the number of arguments passed to the program executing the @code{CALL X"91"}, saving that number into the @var{variable-arg} argument.  That should be a binary numeric data item (@code{USAGE BINARY-CHAR} is recommended).

@item 35
Prepare for DOS EXEC call.

@item 46-49
Prepare for file specific settings LS_NULLS/LS_TABS.

@item 69
Prepare for directory search.

@end table
@comment *********************************************************************
@comment ** 8.2.55 X"E4"                                                    **
@comment *********************************************************************
@page
@newsubsection{X"E4"}
@diagram{X"E4" Built-In Subroutine,SS-XE4,SS-XE4,None}
Use @code{X"E4"} to clear the screen.  There are no arguments and no returned value.
@comment *********************************************************************
@comment ** 8.2.56 X"E5"                                                    **
@comment *********************************************************************
@newsubsection{X"E5"}
@diagram{X"E5" Built-In Subroutine,SS-XE5,SS-XE5,None}
The @code{X"E5"} routine will sound the PC ``bell''.  There are no arguments and no returned value.
@comment *********************************************************************
@comment ** 8.2.57 X"F4"                                                    **
@comment *********************************************************************
@page
@newsubsection{X"F4"}
@diagram{X"F4" Built-In Subroutine,SS-XF4,SS-XF4,None}
This routine packs the low-order (rightmost) bit from each of the eight 1-byte items in @var{table} into the corresponding bit positions of the single-byte data item @var{byte}.

The @var{byte} data item need be only a single byte in size.  If it is longer, the excess will be unaffected by this subroutine.

The @var{table} data item must be at least 8 bytes long.  If it is longer, the excess will be ignored by this subroutine.

Typically, table is defined similarly to the following:

@example
01  Table-Arg.
    05 Each-Byte OCCURS 8 TIMES USAGE BINARY-CHAR.
@end example
@comment *********************************************************************
@comment ** 8.2.58 X"F5"                                                    **
@comment *********************************************************************
@page
@newsubsection{X"F5"}
@diagram{X"F5" Built-In Subroutine,SS-XF5,SS-XF5,None}
This routine unpacks each bit of the single-byte data item @var{byte} into the low-order (rightmost) bit of each of the corresponding eight 1-byte items in @var{table}.  The other seven bit positions of each of the first eight entries in @var{table} will be set to zero.

The @var{byte} data item need be only a single byte in size.  If it is longer, the excess will be unaffected by this subroutine.

The @var{table} data item must be at least 8 bytes long.  If it is longer, the excess will be ignored by this subroutine.

Typically, table is defined similarly to the following:

@example
01  Table-Arg.
    05 Each-Byte OCCURS 8 TIMES USAGE BINARY-CHAR.
@end example
@iftex
@sp 3
@center ------------------------------------------------------------
@center End of Chapter 8 --- Functions
@end iftex


